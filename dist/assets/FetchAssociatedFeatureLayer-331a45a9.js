import{L as c,hv as _,Y as u,H as f,gD as p}from"./index-0b6846a6.js";import y from"./FeatureLayer-e1476ade.js";class S{constructor(t,r,a,e){var n;this._parsedUrl=t,this._portalItem=r,this._apiKey=a,this.signal=e,this._rootDocument=null;const s=(n=this._parsedUrl)==null?void 0:n.path.match(/^(.*)\/SceneServer\/layers\/([\d]*)\/?$/i);s&&(this._urlParts={root:s[1],layerId:parseInt(s[2],10)})}async fetch(){if(!this._urlParts)return null;const t=this._portalItem??await this._portalItemFromServiceItemId();if(t==null)return this._loadFromUrl();const r=await this._findAndLoadRelatedPortalItem(t);return r==null?null:this._loadFeatureLayerFromPortalItem(r)}async fetchPortalItem(){if(!this._urlParts)return null;const t=this._portalItem??await this._portalItemFromServiceItemId();return t==null?null:this._findAndLoadRelatedPortalItem(t)}async _fetchRootDocument(){if(this._rootDocument!=null)return this._rootDocument;if(this._urlParts==null)return this._rootDocument={},{};const t={query:{f:"json",token:this._apiKey},responseType:"json",signal:this.signal},r=`${this._urlParts.root}/SceneServer`;try{const a=await c(r,t);this._rootDocument=a.data}catch{this._rootDocument={}}return this._rootDocument}async _fetchServiceOwningPortalUrl(){var e,s;const t=(e=this._parsedUrl)==null?void 0:e.path,r=t?(s=_)==null?void 0:s.findServerInfo(t):null;if(r!=null&&r.owningSystemUrl)return r.owningSystemUrl;const a=t?t.replace(/(.*\/rest)\/.*/i,"$1")+"/info":null;try{const n=(await c(a,{query:{f:"json"},responseType:"json",signal:this.signal})).data.owningSystemUrl;if(n)return n}catch(n){u(n)}return null}async _findAndLoadRelatedPortalItem(t){try{return(await t.fetchRelatedItems({relationshipType:"Service2Service",direction:"reverse"},{signal:this.signal})).find(r=>r.type==="Feature Service")||null}catch(r){return u(r),null}}async _loadFeatureLayerFromPortalItem(t){await t.load({signal:this.signal});const r=await this._findMatchingAssociatedSublayerUrl(t.url??"");return new y({url:r,portalItem:t}).load({signal:this.signal})}async _loadFromUrl(){var r;const t=await this._findMatchingAssociatedSublayerUrl(`${(r=this._urlParts)==null?void 0:r.root}/FeatureServer`);return new y({url:t}).load({signal:this.signal})}async _findMatchingAssociatedSublayerUrl(t){var m;const r=t.replace(/^(.*FeatureServer)(\/[\d]*\/?)?$/i,"$1"),a={query:{f:"json"},responseType:"json",authMode:"no-prompt",signal:this.signal},e=(m=this._urlParts)==null?void 0:m.layerId,s=this._fetchRootDocument(),n=c(r,a),[h,d]=await Promise.all([n,s]),o=d&&d.layers,i=h.data&&h.data.layers;if(!Array.isArray(i))throw new Error("expected layers array");if(Array.isArray(o)){for(let l=0;l<Math.min(o.length,i.length);l++)if(o[l].id===e)return`${r}/${i[l].id}`}else if(e!=null&&e<i.length)return`${r}/${i[e].id}`;throw new Error("could not find matching associated sublayer")}async _portalItemFromServiceItemId(){const t=(await this._fetchRootDocument()).serviceItemId;if(!t)return null;const r=new f({id:t,apiKey:this._apiKey}),a=await this._fetchServiceOwningPortalUrl();a!=null&&(r.portal=new p({url:a}));try{return r.load({signal:this.signal})}catch(e){return u(e),null}}}export{S as s};
