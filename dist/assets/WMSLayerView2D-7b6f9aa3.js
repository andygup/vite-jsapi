import{ae as o,af as m,ai as E,y as M,E as g,i as I,L as F,A as W,bf as C}from"./index-06bb4acc.js";import{B as L}from"./BitmapContainer-afecf9b0.js";import{L as R,a as q}from"./LayerView-73b5e8d9.js";import{E as U}from"./ExportStrategy-4132d4d5.js";import{R as D}from"./RefreshableLayerView-f997a78e.js";import{c as A}from"./commonProperties-71483d7b.js";import{E as $}from"./ExportWMSImageParameters-b5ee62e8.js";import"./WGLContainer-895f473b.js";import"./definitions-3f56d206.js";import"./VertexArrayObject-5e83453c.js";import"./TextureDescriptor-767677c5.js";import"./enums-08489827.js";import"./VertexElementDescriptor-24e04d97.js";import"./color-8e5f8af9.js";import"./enums-eb6e4255.js";import"./ProgramTemplate-26d0268f.js";import"./MaterialKey-434335b3.js";import"./utils-0743b8a6.js";import"./heatmapUtils-97c04762.js";import"./vec4-3dd523e8.js";import"./vec4f64-efdcb593.js";import"./StyleDefinition-edaaf36e.js";import"./config-c06e4a6d.js";import"./GeometryUtils-0ab64fac.js";import"./Container-1a24548e.js";import"./parser-00347674.js";import"./_commonjsHelpers-725317a4.js";import"./earcut-db592379.js";import"./featureConversionUtils-bc1b4ef3.js";import"./OptimizedGeometry-af84d2ad.js";import"./OptimizedFeatureSet-5c82fe5a.js";import"./Bitmap-ed7e1a9c.js";import"./ElevationInfo-dc27b5b8.js";import"./lengthUtils-15108784.js";const B=f=>{let e=class extends f{initialize(){this.exportImageParameters=new $({layer:this.layer})}destroy(){this.exportImageParameters=M(this.exportImageParameters)}get exportImageVersion(){var t;return(t=this.exportImageParameters)==null||t.commitProperty("version"),this.commitProperty("timeExtent"),(this._get("exportImageVersion")||0)+1}fetchPopupFeatures(t){const{layer:a}=this;if(!t)return Promise.reject(new g("wmslayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:a}));const{popupEnabled:p}=a;if(!p)return Promise.reject(new g("wmslayerview:fetchPopupFeatures","popupEnabled should be true",{popupEnabled:p}));const c=this.createFetchPopupFeaturesQuery(t);if(!c)return Promise.resolve([]);const{extent:r,width:s,height:n,x:u,y}=c;if(!(r&&s&&n))throw new g("wmslayerview:fetchPopupFeatures","WMSLayer does not support fetching features.",{extent:r,width:s,height:n});return a.fetchFeatureInfo(r,s,n,u,y)}};return o([m()],e.prototype,"exportImageParameters",void 0),o([m({readOnly:!0})],e.prototype,"exportImageVersion",null),o([m()],e.prototype,"layer",void 0),o([m(A)],e.prototype,"timeExtent",void 0),e=o([E("esri.layers.mixins.WMSLayerView")],e),e};let h=class extends B(D(R(q))){constructor(){super(...arguments),this.bitmapContainer=new L}supportsSpatialReference(e){return this.layer.serviceSupportsSpatialReference(e)}update(e){this.strategy.update(e).catch(i=>{I(i)||F.getLogger(this.declaredClass).error(i)})}attach(){const{layer:e}=this,{imageMaxHeight:i,imageMaxWidth:t}=e;this.bitmapContainer=new L,this.container.addChild(this.bitmapContainer),this.strategy=new U({container:this.bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxHeight:i,imageMaxWidth:t,imageRotationSupported:!1,imageNormalizationSupported:!1,hidpi:!1}),this.addAttachHandles(W(()=>this.exportImageVersion,()=>this.requestUpdate()))}detach(){this.strategy=M(this.strategy),this.container.removeAllChildren()}moveStart(){}viewChange(){}moveEnd(){this.requestUpdate()}createFetchPopupFeaturesQuery(e){const{view:i,bitmapContainer:t}=this,{x:a,y:p}=e,{spatialReference:c}=i;let r,s=0,n=0;if(t.children.some(V=>{const{width:x,height:P,resolution:S,x:d,y:l}=V,b=d+S*x,v=l-S*P;return a>=d&&a<=b&&p<=l&&p>=v?(r=new C({xmin:d,ymin:v,xmax:b,ymax:l,spatialReference:c}),s=x,n=P,!0):!1}),!r)return null;const u=r.width/s,y=Math.round((a-r.xmin)/u),w=Math.round((r.ymax-p)/u);return{extent:r,width:s,height:n,x:y,y:w}}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(e,i,t,a){return this.layer.fetchImageBitmap(e,i,t,{timeExtent:this.timeExtent,...a})}};o([m()],h.prototype,"strategy",void 0);o([m()],h.prototype,"updating",void 0);h=o([E("esri.views.2d.layers.WMSLayerView2D")],h);const Se=h;export{Se as default};
