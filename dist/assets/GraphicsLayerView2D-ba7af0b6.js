import{B as s,ah as o,V as a,aB as m,ae as p,af as g,ai as l}from"./index-175d32d0.js";import{f as c,d as n}from"./LayerView-0bfae0f3.js";import{i as d}from"./GraphicContainer-44464265.js";import{o as u}from"./GraphicsView2D-97791f2f.js";import"./Container-ca0c82d8.js";import"./parser-be52f54c.js";import"./definitions-e9823d3c.js";import"./enums-74e97557.js";import"./TextureDescriptor-d0f0e66d.js";import"./color-5599f865.js";import"./enums-55085e26.js";import"./VertexElementDescriptor-2925c6af.js";import"./BaseGraphicContainer-04e7c0e5.js";import"./FeatureContainer-5759675b.js";import"./AttributeStoreView-ec64fd81.js";import"./TiledDisplayObject-2f7e7371.js";import"./visualVariablesUtils-ab0340c4.js";import"./visualVariablesUtils-bc0c668d.js";import"./VertexArrayObject-90380ad0.js";import"./TileContainer-a409cb42.js";import"./WGLContainer-d2c666b5.js";import"./ProgramTemplate-8ba0c0b6.js";import"./MaterialKey-532bc99f.js";import"./utils-2b389eab.js";import"./heatmapUtils-4fba0b55.js";import"./vec4f64-aa64c7e9.js";import"./StyleDefinition-fbc907c2.js";import"./config-1337d16e.js";import"./GeometryUtils-dd03fc25.js";import"./earcut-8a75b10b.js";import"./featureConversionUtils-3787082f.js";import"./OptimizedGeometry-33b2eb0d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./lengthUtils-349f6f20.js";import"./vec3f32-ad1dc57f.js";import"./normalizeUtils-2391e42c.js";import"./normalizeUtilsCommon-b064c045.js";import"./ExpandedCIM-652d49f1.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-53652037.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-91ef8d14.js";import"./floatRGBA-660570aa.js";import"./normalizeUtilsSync-a36bf333.js";import"./projectionSupport-5317a1c8.js";import"./json-48e3ea08.js";import"./labelingInfo-ffafbf0b.js";import"./labelUtils-358af0bc.js";import"./defaultsJSON-b087dd4d.js";import"./jsonUtils-a54641ba.js";import"./Matcher-a1fdaa6a.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-9e8d1948.js";import"./LRUCache-05c2e0c8.js";import"./MemCache-8e066c91.js";import"./devEnvironmentUtils-5002a058.js";import"./styleUtils-659e6a41.js";import"./featureFlags-a084cf3d.js";import"./schemaUtils-5e91e5e3.js";import"./sql-d95c95ff.js";import"./diffUtils-1e0b45c5.js";import"./clusterUtils-64f88ebd.js";import"./SizeVariable-41a3e64d.js";import"./colorRamps-f4ee9bc5.js";import"./LegendOptions-8e12359c.js";import"./sizeVariableUtils-d4870b0d.js";import"./util-63fe79d4.js";import"./ComputedAttributeStorage-f8bc0a4c.js";import"./FieldsIndex-2024344c.js";import"./arcadeTimeUtils-b058d7c4.js";import"./executionError-fb3f283a.js";import"./centroid-8e8cfa47.js";const w={remove(){},pause(){},resume(){}};let e=class extends c(n){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new u({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new d(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler))}detach(){this.container.removeAllChildren(),this.graphicsView=s(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){return this.graphicsView?this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate):[]}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof o?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(h=>h&&h.uid):a.isCollection(i)&&i.length>0&&(t=i.map(h=>h&&h.uid).toArray());const r=t==null?void 0:t.filter(m);return r!=null&&r.length?(this._addHighlight(r),{remove:()=>this._removeHighlight(r)}):w}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const r=this._highlightIds.get(t);this._highlightIds.set(t,r+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const r=this._highlightIds.get(t)-1;r===0?this._highlightIds.delete(t):this._highlightIds.set(t,r)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};p([g()],e.prototype,"graphicsView",void 0),e=p([l("esri.views.2d.layers.GraphicsLayerView2D")],e);const Gi=e;export{Gi as default};
