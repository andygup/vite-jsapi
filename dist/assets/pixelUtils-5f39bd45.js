import{r as P,t as N,e as H}from"./typedArrayUtil-2bcf3cee.js";import{e as E,y as j,s as ot,n as at,l as ht}from"./cast-daef7652.js";import{a as ct,s as W}from"./Error-bd05b442.js";import{y as ft}from"./string-3d0ebcd3.js";class K{constructor(e=null,i=null,l=null){this.minValue=e,this.maxValue=i,this.noDataValue=l}}var L;let G=L=class extends ht{constructor(t){super(t),this.width=null,this.height=null,this.pixelType="f32",this.validPixelCount=null,this.mask=null,this.maskIsAlpha=!1,this.statistics=null}static createEmptyBand(t,e){return new(L.getPixelArrayConstructor(t))(e)}static getPixelArrayConstructor(t){let e;switch(t){case"u1":case"u2":case"u4":case"u8":e=Uint8Array;break;case"u16":e=Uint16Array;break;case"u32":e=Uint32Array;break;case"s8":e=Int8Array;break;case"s16":e=Int16Array;break;case"s32":e=Int32Array;break;case"f32":case"c64":case"c128":case"unknown":e=Float32Array;break;case"f64":e=Float64Array}return e}castPixelType(t){if(!t)return"f32";let e=t.toLowerCase();return["u1","u2","u4"].includes(e)?e="u8":["unknown","u8","s8","u16","s16","u32","s32","f32","f64"].includes(e)||(e="f32"),e}getPlaneCount(){var t;return(t=this.pixels)==null?void 0:t.length}addData(t){if(!t.pixels||t.pixels.length!==this.width*this.height)throw new ct("pixelblock:invalid-or-missing-pixels","add data requires valid pixels array that has same length defined by pixel block width * height");this.pixels||(this.pixels=[]),this.statistics||(this.statistics=[]),this.pixels.push(t.pixels),this.statistics.push(t.statistics??new K)}getAsRGBA(){const t=new ArrayBuffer(this.width*this.height*4);switch(this.pixelType){case"s8":case"s16":case"u16":case"s32":case"u32":case"f32":case"f64":this._fillFromNon8Bit(t);break;default:this._fillFrom8Bit(t)}return new Uint8ClampedArray(t)}getAsRGBAFloat(){const t=new Float32Array(this.width*this.height*4);return this._fillFrom32Bit(t),t}updateStatistics(){if(!this.pixels)return;this.statistics=this.pixels.map(i=>this._calculateBandStatistics(i,this.mask));const t=this.mask;let e=0;if(P(t))for(let i=0;i<t.length;i++)t[i]&&e++;else e=this.width*this.height;this.validPixelCount=e}clamp(t){if(!t||t==="f64"||t==="f32"||!this.pixels)return;let e;switch(t){case"u8":e=[0,255];break;case"u16":e=[0,65535];break;case"u32":e=[0,4294967295];break;case"s8":e=[-128,127];break;case"s16":e=[-32768,32767];break;case"s32":e=[-2147483648,2147483647];break;default:e=[-34e38,34e38]}const[i,l]=e,a=this.pixels,n=this.width*this.height,s=a.length;let o,h,u;const r=[];for(let p=0;p<s;p++){u=L.createEmptyBand(t,n),o=a[p];for(let g=0;g<n;g++)h=o[g],u[g]=h>l?l:h<i?i:h;r.push(u)}this.pixels=r,this.pixelType=t}extractBands(t){const{pixels:e,statistics:i}=this;if(N(t)||t.length===0||!e||e.length===0)return this;const l=e.length,a=t.some(s=>s>=e.length),n=l===t.length&&!t.some((s,o)=>s!==o);return a||n?this:new L({pixelType:this.pixelType,width:this.width,height:this.height,mask:this.mask,validPixelCount:this.validPixelCount,maskIsAlpha:this.maskIsAlpha,pixels:t.map(s=>e[s]),statistics:i&&t.map(s=>i[s])})}clone(){const t=new L({width:this.width,height:this.height,pixelType:this.pixelType,maskIsAlpha:this.maskIsAlpha,validPixelCount:this.validPixelCount});let e;P(this.mask)&&(this.mask instanceof Uint8Array?t.mask=new Uint8Array(this.mask):t.mask=this.mask.slice(0));const i=L.getPixelArrayConstructor(this.pixelType);if(this.pixels&&this.pixels.length>0){t.pixels=[];const l=!!this.pixels[0].slice;for(e=0;e<this.pixels.length;e++)t.pixels[e]=l?this.pixels[e].slice(0,this.pixels[e].length):new i(this.pixels[e])}if(this.statistics)for(t.statistics=[],e=0;e<this.statistics.length;e++)t.statistics[e]=ft(this.statistics[e]);return t}_fillFrom8Bit(t){const{mask:e,maskIsAlpha:i,pixels:l}=this;if(!t||!l||!l.length)return void W.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");let a,n,s,o;a=n=s=l[0],l.length>=3?(n=l[1],s=l[2]):l.length===2&&(n=l[1]);const h=new Uint32Array(t),u=this.width*this.height;if(a.length===u)if(P(e)&&e.length===u)if(i)for(o=0;o<u;o++)e[o]&&(h[o]=e[o]<<24|s[o]<<16|n[o]<<8|a[o]);else for(o=0;o<u;o++)e[o]&&(h[o]=255<<24|s[o]<<16|n[o]<<8|a[o]);else for(o=0;o<u;o++)h[o]=255<<24|s[o]<<16|n[o]<<8|a[o];else W.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.")}_fillFromNon8Bit(t){const{pixels:e,mask:i,statistics:l}=this;if(!t||!e||!e.length)return void W.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");const a=this.pixelType;let n=1,s=0,o=1;if(l&&l.length>0){for(const f of l)if(f.minValue!=null&&(s=Math.min(s,f.minValue)),f.maxValue!=null&&f.minValue!=null){const m=f.maxValue-f.minValue;o=Math.max(o,m)}n=255/o}else{let f=255;a==="s8"?(s=-128,f=127):a==="u16"?f=65535:a==="s16"?(s=-32768,f=32767):a==="u32"?f=4294967295:a==="s32"?(s=-2147483648,f=2147483647):a==="f32"?(s=-34e38,f=34e38):a==="f64"&&(s=-Number.MAX_VALUE,f=Number.MAX_VALUE),n=255/(f-s)}const h=new Uint32Array(t),u=this.width*this.height;let r,p,g,c,x;if(r=p=g=e[0],r.length!==u)return W.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.");if(e.length>=2)if(p=e[1],e.length>=3&&(g=e[2]),P(i)&&i.length===u)for(c=0;c<u;c++)i[c]&&(h[c]=255<<24|(g[c]-s)*n<<16|(p[c]-s)*n<<8|(r[c]-s)*n);else for(c=0;c<u;c++)h[c]=255<<24|(g[c]-s)*n<<16|(p[c]-s)*n<<8|(r[c]-s)*n;else if(P(i)&&i.length===u)for(c=0;c<u;c++)x=(r[c]-s)*n,i[c]&&(h[c]=255<<24|x<<16|x<<8|x);else for(c=0;c<u;c++)x=(r[c]-s)*n,h[c]=255<<24|x<<16|x<<8|x}_fillFrom32Bit(t){const{pixels:e,mask:i}=this;if(!t||!e||!e.length)return W.getLogger(this.declaredClass).error("getAsRGBAFloat()","Unable to convert to RGBA. The input pixel block is empty.");let l,a,n,s;l=a=n=e[0],e.length>=3?(a=e[1],n=e[2]):e.length===2&&(a=e[1]);const o=this.width*this.height;if(l.length!==o)return W.getLogger(this.declaredClass).error("getAsRGBAFloat()","Unable to convert to RGBA. The pixelblock is invalid.");let h=0;if(P(i)&&i.length===o)for(s=0;s<o;s++)t[h++]=l[s],t[h++]=a[s],t[h++]=n[s],t[h++]=1&i[s];else for(s=0;s<o;s++)t[h++]=l[s],t[h++]=a[s],t[h++]=n[s],t[h++]=1}_calculateBandStatistics(t,e){let i=1/0,l=-1/0;const a=t.length;let n,s=0;if(P(e))for(n=0;n<a;n++)e[n]&&(s=t[n],i=s<i?s:i,l=s>l?s:l);else for(n=0;n<a;n++)s=t[n],i=s<i?s:i,l=s>l?s:l;return new K(i,l)}};E([j({json:{write:!0}})],G.prototype,"width",void 0),E([j({json:{write:!0}})],G.prototype,"height",void 0),E([j({json:{write:!0}})],G.prototype,"pixelType",void 0),E([ot("pixelType")],G.prototype,"castPixelType",null),E([j({json:{write:!0}})],G.prototype,"validPixelCount",void 0),E([j({json:{write:!0}})],G.prototype,"mask",void 0),E([j({json:{write:!0}})],G.prototype,"maskIsAlpha",void 0),E([j({json:{write:!0}})],G.prototype,"pixels",void 0),E([j({json:{write:!0}})],G.prototype,"statistics",void 0),G=L=E([at("esri.layers.support.PixelBlock")],G);const S=G;var Q,Y;function _(t){return P(t)&&t.declaredClass==="esri.layers.support.PixelBlock"&&t.pixels&&t.pixels.length>0}function Mt(t,e){if(!(e!=null&&e.length)||!_(t))return t;const i=t.pixels.length;return e&&e.some(l=>l>=i)||i===1&&e.length===1&&e[0]===0?t:i!==e.length||e.some((l,a)=>l!==a)?new S({pixelType:t.pixelType,width:t.width,height:t.height,mask:t.mask,validPixelCount:t.validPixelCount,maskIsAlpha:t.maskIsAlpha,pixels:e.map(l=>t.pixels[l]),statistics:t.statistics&&e.map(l=>t.statistics[l])}):t}function bt(t){if(!(t!=null&&t.length)||t.some(r=>!_(r)))return null;if(t.length===1)return P(t[0])?t[0].clone():null;const e=t,{width:i,height:l,pixelType:a}=e[0];if(e.some(r=>r.width!==i||r.height!==l))return null;const n=e.map(({mask:r})=>r).filter(r=>r!=null);let s=null;n.length&&(s=new Uint8Array(i*l),s.set(n[0]),n.length>1&&st(n.slice(1),s));const o=[];e.forEach(({pixels:r})=>o.push(...r));const h=e.map(({statistics:r})=>r).filter(r=>r==null?void 0:r.length),u=[];return h.forEach(r=>u.push(...r)),new S({pixelType:a,width:i,height:l,mask:s,pixels:o,statistics:u.length?u:null})}function Tt(t){if(!t)return;const e=t.colormap;if(!e||e.length===0)return;const i=e.sort((p,g)=>p[0]-g[0]);let l=0;i[0][0]<0&&(l=i[0][0]);const a=Math.max(256,i[i.length-1][0]-l+1),n=new Uint8Array(4*a),s=[];let o,h=0,u=0;const r=i[0].length===5;if(a>65536)return i.forEach(p=>{s[p[0]-l]=r?p.slice(1):p.slice(1).concat([255])}),{indexed2DColormap:s,offset:l,alphaSpecified:r};if(t.fillUnspecified)for(o=i[u],h=o[0]-l;h<a;h++)n[4*h]=o[1],n[4*h+1]=o[2],n[4*h+2]=o[3],n[4*h+3]=r?o[4]:255,h===o[0]-l&&(o=u===i.length-1?o:i[++u]);else for(h=0;h<i.length;h++)o=i[h],u=4*(o[0]-l),n[u]=o[1],n[u+1]=o[2],n[u+2]=o[3],n[u+3]=r?o[4]:255;return{indexedColormap:n,offset:l,alphaSpecified:r}}function Bt(t,e){if(!_(t)||!e||!e.indexedColormap&&!e.indexed2DColormap)return t;const i=t.clone(),l=i.pixels;let a=i.mask;const n=i.width*i.height;if(l.length!==1)return t;const{indexedColormap:s,indexed2DColormap:o,offset:h,alphaSpecified:u}=e;let r=0;const p=l[0],g=new Uint8Array(p.length),c=new Uint8Array(p.length),x=new Uint8Array(p.length);let f,m=0;if(s){const d=s.length-1;if(P(a))for(r=0;r<n;r++)a[r]&&(m=4*(p[r]-h),m<h||m>d?a[r]=0:(g[r]=s[m],c[r]=s[m+1],x[r]=s[m+2],a[r]=s[m+3]));else{for(a=new Uint8Array(n),r=0;r<n;r++)m=4*(p[r]-h),m<h||m>d?a[r]=0:(g[r]=s[m],c[r]=s[m+1],x[r]=s[m+2],a[r]=s[m+3]);i.mask=a}}else if(o)if(P(a))for(r=0;r<n;r++)a[r]&&(f=o[p[r]],g[r]=f[0],c[r]=f[1],x[r]=f[2],a[r]=f[3]);else{for(a=new Uint8Array(n),r=0;r<n;r++)f=o[p[r]],g[r]=f[0],c[r]=f[1],x[r]=f[2],a[r]=f[3];i.mask=a}return i.pixels=[g,c,x],i.statistics=null,i.pixelType="u8",i.maskIsAlpha=u,i}function Ut(t,e){if(!_(t))return null;const{pixels:i,mask:l}=t,a=i.length;let n=e.lut;const{offset:s}=e;n&&n[0].length===1&&(n=i.map(()=>n));const o=[],h=e.outputPixelType||"u8";for(let r=0;r<a;r++){const p=it(i[r],l,n[r],s||0,h);o.push(p)}const u=new S({width:t.width,height:t.height,pixels:o,mask:l,pixelType:h});return u.updateStatistics(),u}function it(t,e,i,l,a){const n=t.length,s=S.createEmptyBand(a,n);if(e)for(let o=0;o<n;o++)e[o]&&(s[o]=i[t[o]-l]);else for(let o=0;o<n;o++)s[o]=i[t[o]-l];return s}function vt(t,e){if(!_(t))return null;const i=t.clone(),{pixels:l}=i,a=i.width*i.height,n=e.length,s=Math.floor(n/2),o=e[Math.floor(s)],h=l[0];let u,r,p,g,c,x,f=!1;const m=new Uint8Array(a),d=new Uint8Array(a),y=new Uint8Array(a);let M=i.mask;const w=e[0].mappedColor.length===4;for(M||(M=new Uint8Array(a),M.fill(w?255:1),i.mask=M),c=0;c<a;c++)if(M[c]){for(u=h[c],f=!1,x=s,r=o,p=0,g=n-1;g-p>1;){if(u===r.value){f=!0;break}u>r.value?p=x:g=x,x=Math.floor((p+g)/2),r=e[Math.floor(x)]}f||(u===e[p].value?(r=e[p],f=!0):u===e[g].value?(r=e[g],f=!0):u<e[p].value?(f=!1,r=null):u>e[p].value&&(u<e[g].value?(r=e[p],f=!0):g===n-1?(f=!1,r=null):(r=e[g],f=!0))),f?(m[c]=r.mappedColor[0],d[c]=r.mappedColor[1],y[c]=r.mappedColor[2],M[c]=r.mappedColor[3]):m[c]=d[c]=y[c]=M[c]=0}return i.pixels=[m,d,y],i.mask=M,i.pixelType="u8",i.maskIsAlpha=w,i}function Ct(t,e){if(!_(t))return null;const{width:i,height:l}=t,{inputRanges:a,outputValues:n,outputPixelType:s,noDataRanges:o,allowUnmatched:h}=e,u=t.pixels[0],r=S.createEmptyBand(s,u.length);h&&r.set(u);const p=t.mask,g=a.length/2;for(let x=0;x<l;x++)for(let f=0;f<i;f++){const m=x*i+f;if(!p||p[m]){const d=u[m];for(let y=g-1;y>=0;y--)if(d>=a[2*y]&&d<=a[2*y+1]){r[m]=n[y];break}}}let c=p;if(o!=null&&o.length){c=new Uint8Array(i*l),p&&c.set(p);for(let x=0;x<l;x++)for(let f=0;f<i;f++){const m=x*i+f;if(!p||p[m]){const d=u[m];for(let y=0;y<g;y+=2)if(d>=o[y]&&d<=o[y+1]){r[m]=0,c[m]=0;break}}}}return new S({width:i,height:l,pixelType:s,pixels:[r],mask:c})}function Z(t,e,i,l){const a=i!=null&&i.length>=2?new Set(i):null,n=(i==null?void 0:i.length)===1?i[0]:null,s=!!(e!=null&&e.length);for(let o=0;o<t.length;o++)if(l[o]){const h=t[o];if(s){let u=!1;for(let r=0;r<e.length;r+=2)if(h>=e[r]&&h<=e[r+1]){u=!0;break}u||(l[o]=0)}l[o]&&(h===n||a!=null&&a.has(h))&&(l[o]=0)}}function tt(t,e){const i=t[0].length;for(let l=0;l<i;l++)if(e[l]){let a=!1;for(let n=0;n<t.length;n++)if(t[n][l]){a=!0;break}a||(e[l]=0)}}function st(t,e){const i=t[0].length;for(let l=0;l<i;l++)if(e[l]){let a=!1;for(let n=0;n<t.length;n++)if(t[n][l]===0){a=!0;break}a&&(e[l]=0)}}function Pt(t,e){if(!_(t))return null;const{width:i,height:l,pixels:a}=t,n=i*l,s=new Uint8Array(n);t.mask?s.set(t.mask):s.fill(255);const o=a.length,{includedRanges:h,noDataValues:u,outputPixelType:r,matchAll:p,lookup:g}=e;if(g){const c=[];for(let x=0;x<o;x++){const f=it(a[x],s,g.lut,g.offset||0,"u8");c.push(f)}c.length===1?s.set(c[0]):p?tt(c,s):st(c,s)}else if(p){const c=[];for(let x=0;x<o;x++){const f=new Uint8Array(n);f.set(s),Z(a[x],h,u,f),c.push(f)}c.length===1?s.set(c[0]):tt(c,s)}else for(let c=0;c<o;c++)Z(a[c],h,u,s);return new S({width:i,height:l,pixelType:r,pixels:a,mask:s})}function St(t,e,i){if(t!=="u8"&&t!=="s8"&&t!=="u16"&&t!=="s16")return null;const l=t.includes("16")?65536:256,a=t.includes("s")?-l/2:0,n=S.createEmptyBand(t,l);for(let s=0;s<e.length;s++){const o=i[s],h=Math.ceil(e[2*s]-a),u=Math.floor(e[2*s+1]-a);for(let r=h;r<=u;r++)n[r]=o}return{lut:n,offset:a}}function _t(t,e,i){if(t!=="u8"&&t!=="s8"&&t!=="u16"&&t!=="s16")return null;const l=t.includes("16")?65536:256,a=t.includes("s")?-l/2:0,n=new Uint8Array(l);if(e)for(let s=0;s<e.length;s++){const o=Math.ceil(e[2*s]-a),h=Math.floor(e[2*s+1]-a);for(let u=o;u<=h;u++)n[u]=255}if(i)for(let s=0;s<i.length;s++)n[i[s]-a]=0;return{lut:n,offset:a}}function ut(t,e,i,l,a,n,s,o){return{xmin:a<=i*t?0:a<i*t+t?a-i*t:t,ymin:n<=l*e?0:n<l*e+e?n-l*e:e,xmax:a+s<=i*t?0:a+s<i*t+t?a+s-i*t:t,ymax:n+o<=l*e?0:n+o<l*e+e?n+o-l*e:e}}function Ft(t,e){if(!t||t.length===0)return null;const i=t.find(x=>x.pixelBlock);if(!i||N(i.pixelBlock))return null;const l=(i.extent.xmax-i.extent.xmin)/i.pixelBlock.width,a=(i.extent.ymax-i.extent.ymin)/i.pixelBlock.height,n=.01*Math.min(l,a),s=t.sort((x,f)=>Math.abs(x.extent.ymax-f.extent.ymax)>n?f.extent.ymax-x.extent.ymax:Math.abs(x.extent.xmin-f.extent.xmin)>n?x.extent.xmin-f.extent.xmin:0),o=Math.min.apply(null,s.map(x=>x.extent.xmin)),h=Math.min.apply(null,s.map(x=>x.extent.ymin)),u=Math.max.apply(null,s.map(x=>x.extent.xmax)),r=Math.max.apply(null,s.map(x=>x.extent.ymax)),p={x:Math.round((e.xmin-o)/l),y:Math.round((r-e.ymax)/a)},g={width:Math.round((u-o)/l),height:Math.round((r-h)/a)},c={width:Math.round((e.xmax-e.xmin)/l),height:Math.round((e.ymax-e.ymin)/a)};return Math.round(g.width/i.pixelBlock.width)*Math.round(g.height/i.pixelBlock.height)!==s.length||p.x<0||p.y<0||g.width<c.width||g.height<c.height?null:{extent:e,pixelBlock:pt(s.map(x=>x.pixelBlock),g,{clipOffset:p,clipSize:c})}}function q(t,e,i,l,a,n){const{width:s,height:o}=i.block,{x:h,y:u}=i.offset,{width:r,height:p}=i.mosaic,g=ut(s,o,l,a,h,u,r,p);let c=0,x=0;if(n){const f=n.hasGCSSShiftTransform?360:n.halfWorldWidth??0,m=s*n.resolutionX,d=n.startX+l*m,y=d+m;d<f&&y>f?x=n.rightPadding:d>=f&&(c=n.leftMargin-n.rightPadding,x=0)}if(g.xmax-=x,typeof e!="number")for(let f=g.ymin;f<g.ymax;f++){const m=(a*o+f-u)*r+(l*s-h)+c,d=f*s;for(let y=g.xmin;y<g.xmax;y++)t[m+y]=e[d+y]}else for(let f=g.ymin;f<g.ymax;f++){const m=(a*o+f-u)*r+(l*s-h)+c;for(let d=g.xmin;d<g.xmax;d++)t[m+d]=e}}function pt(t,e,i={}){const{clipOffset:l,clipSize:a,alignmentInfo:n,blockWidths:s}=i;if(s)return xt(t,e,{blockWidths:s});const o=t.find(A=>_(A));if(N(o))return null;const h=a?a.width:e.width,u=a?a.height:e.height,r=o.width,p=o.height,g=e.width/r,c=e.height/p,x={offset:l||{x:0,y:0},mosaic:a||e,block:{width:r,height:p}},f=o.pixelType,m=S.getPixelArrayConstructor(f),d=o.pixels.length,y=[];let M,w;for(let A=0;A<d;A++){w=new m(h*u);for(let T=0;T<c;T++)for(let k=0;k<g;k++){const B=t[T*g+k];_(B)&&(M=B.pixels[A],q(w,M,x,k,T,n))}y.push(w)}let U;if(t.some(A=>N(A)||P(A.mask)&&A.mask.length>0)){U=new Uint8Array(h*u);for(let A=0;A<c;A++)for(let T=0;T<g;T++){const k=t[A*g+T],B=P(k)?k.mask:null;P(B)?q(U,B,x,T,A,n):q(U,k?1:0,x,T,A,n)}}const v=new S({width:h,height:u,pixels:y,pixelType:f,mask:U});return v.updateStatistics(),v}function xt(t,e,i){const l=t.find(c=>P(c));if(N(l))return null;const a=t.some(c=>!P(c)||!!c.mask),{width:n,height:s}=e,o=a?new Uint8Array(n*s):null,{blockWidths:h}=i,u=[],r=l.getPlaneCount(),p=S.getPixelArrayConstructor(l.pixelType);if(a)for(let c=0,x=0;c<t.length;x+=h[c],c++){const f=t[c];if(!_(f))continue;const m=H(f.mask);for(let d=0;d<s;d++)for(let y=0;y<h[c];y++)o[d*n+y+x]=m==null?255:m[d*f.width+y]}for(let c=0;c<r;c++){const x=new p(n*s);for(let f=0,m=0;f<t.length;m+=h[f],f++){const d=t[f];if(!_(d))continue;const y=d.pixels[c];if(y!=null)for(let M=0;M<s;M++)for(let w=0;w<h[f];w++)x[M*n+w+m]=y[M*d.width+w]}u.push(x)}const g=new S({width:n,height:s,mask:o,pixels:u,pixelType:l.pixelType});return g.updateStatistics(),g}function It(t,e,i){if(!_(t))return null;const{width:l,height:a}=t,n=e.x,s=e.y,o=i.width+n,h=i.height+s;if(n<0||s<0||o>l||h>a||n===0&&s===0&&o===l&&h===a)return t;t.mask||(t.mask=new Uint8Array(l*a));const u=t.mask;for(let r=0;r<a;r++){const p=r*l;for(let g=0;g<l;g++)u[p+g]=r<s||r>=h||g<n||g>=o?0:1}return t.updateStatistics(),t}function gt(t){if(!_(t))return null;const e=t.clone(),{width:i,height:l,pixels:a}=t,n=a[0],s=e.pixels[0],o=H(t.mask);for(let h=2;h<l-1;h++){const u=new Map;for(let p=h-2;p<h+2;p++)for(let g=0;g<4;g++){const c=p*i+g;D(u,n[c],o?o[c]:1)}s[h*i]=et(u),s[h*i+1]=s[h*i+2]=s[h*i];let r=3;for(;r<i-1;r++){let p=(h-2)*i+r+1;D(u,n[p],o?o[p]:1),p=(h-1)*i+r+1,D(u,n[p],o?o[p]:1),p=h*i+r+1,D(u,n[p],o?o[p]:1),p=(h+1)*i+r+1,D(u,n[p],o?o[p]:1),p=(h-2)*i+r-3,z(u,n[p],o?o[p]:1),p=(h-1)*i+r-3,z(u,n[p],o?o[p]:1),p=h*i+r-3,z(u,n[p],o?o[p]:1),p=(h+1)*i+r-3,z(u,n[p],o?o[p]:1),s[h*i+r]=et(u)}s[h*i+r+1]=s[h*i+r]}for(let h=0;h<i;h++)s[h]=s[i+h]=s[2*i+h],s[(l-1)*i+h]=s[(l-2)*i+h];return e.updateStatistics(),e}function et(t){if(t.size===0)return 0;let e=0,i=-1,l=0;const a=t.keys();let n=a.next();for(;!n.done;)l=t.get(n.value),l>e&&(i=n.value,e=l),n=a.next();return i}function z(t,e,i){if(i===0)return;const l=t.get(e);l===1?t.delete(e):t.set(e,l-1)}function D(t,e,i){i!==0&&t.set(e,t.has(e)?t.get(e)+1:1)}function mt(t,e,i){let{x:l,y:a}=e;const{width:n,height:s}=i;if(l===0&&a===0&&s===t.height&&n===t.width)return t;const{width:o,height:h}=t,u=Math.max(0,a),r=Math.max(0,l),p=Math.min(l+n,o),g=Math.min(a+s,h);if(p<0||g<0||!_(t))return null;l=Math.max(0,-l),a=Math.max(0,-a);const{pixels:c}=t,x=n*s,f=c.length,m=[];for(let w=0;w<f;w++){const U=c[w],v=S.createEmptyBand(t.pixelType,x);for(let A=u;A<g;A++){const T=A*o;let k=(A+a-u)*n+l;for(let B=r;B<p;B++)v[k++]=U[T+B]}m.push(v)}const d=new Uint8Array(x),y=H(t.mask);for(let w=u;w<g;w++){const U=w*o;let v=(w+a-u)*n+l;for(let A=r;A<p;A++)d[v++]=y?y[U+A]:1}const M=new S({width:i.width,height:i.height,pixelType:t.pixelType,pixels:m,mask:d});return M.updateStatistics(),M}function dt(t,e=!0){if(!_(t))return null;const{pixels:i,width:l,height:a,mask:n,pixelType:s}=t,o=[],h=Math.round(l/2),u=Math.round(a/2),r=a-1,p=l-1;for(let c=0;c<i.length;c++){const x=i[c],f=S.createEmptyBand(s,h*u);let m=0;for(let d=0;d<a;d+=2)for(let y=0;y<l;y+=2){const M=x[d*l+y];if(e){const w=y===p?M:x[d*l+y+1],U=d===r?M:x[d*l+y+l],v=y===p?U:d===r?w:x[d*l+y+l+1];f[m++]=(M+w+U+v)/4}else f[m++]=M}o.push(f)}let g=null;if(P(n)){g=new Uint8Array(h*u);let c=0;for(let x=0;x<a;x+=2)for(let f=0;f<l;f+=2){const m=n[x*l+f];if(e){const d=f===p?m:n[x*l+f+1],y=x===r?m:n[x*l+f+l],M=f===p?y:x===r?d:n[x*l+f+l+1];g[c++]=m*d*y*M?1:0}else g[c++]=m}}return new S({width:h,height:u,pixelType:s,pixels:o,mask:g})}function Rt(t,e,i){if(!_(t))return null;const{width:l,height:a}=e;let{width:n,height:s}=t;const o=new Map,h={x:0,y:0},u=i==null?1:1+i;let r=t;for(let p=0;p<u;p++){const g=Math.ceil(n/l),c=Math.ceil(s/a);for(let x=0;x<c;x++){h.y=x*a;for(let f=0;f<g;f++){h.x=f*l;const m=mt(r,h,e);o.set(`${p}/${x}/${f}`,m)}}p<u-1&&(r=dt(r)),n=Math.round(n/2),s=Math.round(s/2)}return o}function lt(t,e,i,l,a=.5){const{width:n,height:s}=t,{width:o,height:h}=e,u=l.cols,r=l.rows,p=Math.ceil(o/u-.1/u),g=Math.ceil(h/r-.1/r);let c,x,f,m,d,y,M;const w=p*u,U=w*g*r,v=new Float32Array(U),A=new Float32Array(U),T=new Uint32Array(U),k=new Uint32Array(U);let B,V,F=0;for(let I=0;I<g;I++)for(let R=0;R<p;R++){c=12*(I*p+R),x=i[c],f=i[c+1],m=i[c+2],d=i[c+3],y=i[c+4],M=i[c+5];for(let C=0;C<r;C++){F=(I*r+C)*w+R*u,V=(C+.5)/r;for(let b=0;b<C;b++)B=(b+.5)/u,v[F+b]=(x*B+f*V+m)*n-a,A[F+b]=(d*B+y*V+M)*s-a,T[F+b]=Math.round(v[F+b]),k[F+b]=Math.round(A[F+b])}c+=6,x=i[c],f=i[c+1],m=i[c+2],d=i[c+3],y=i[c+4],M=i[c+5];for(let C=0;C<r;C++){F=(I*r+C)*w+R*u,V=(C+.5)/r;for(let b=C;b<u;b++)B=(b+.5)/u,v[F+b]=(x*B+f*V+m)*n-a,A[F+b]=(d*B+y*V+M)*s-a,T[F+b]=Math.round(v[F+b]),k[F+b]=Math.round(A[F+b])}}return{offsets_x:v,offsets_y:A,offsets_xi:T,offsets_yi:k,gridWidth:w}}function Gt(t,e){const{coefficients:i,spacing:l}=e,{offsets_x:a,offsets_y:n,gridWidth:s}=lt(t,t,i,{rows:l[0],cols:l[1]},.5),{width:o,height:h}=t,u=new Float32Array(o*h),r=180/Math.PI;for(let p=0;p<h;p++)for(let g=0;g<o;g++){const c=p*s+g,x=p===0?c:c-s,f=p===h-1?c:c+s,m=a[x]-a[f],d=n[f]-n[x];if(isNaN(m)||isNaN(d))u[p*o+g]=90;else{let y=Math.atan2(d,m)*r;y=(360+y)%360,u[p*o+g]=y}}return u}function Et(t,e,i,l,a="nearest"){if(!_(t))return null;a==="majority"&&(t=gt(t));const{pixels:n,mask:s,pixelType:o}=t,h=t.width,u=t.height,r=S.getPixelArrayConstructor(o),p=n.length,{width:g,height:c}=e;let x=!1;for(let k=0;k<i.length;k+=3)i[k]===-1&&i[k+1]===-1&&i[k+2]===-1&&(x=!0);const{offsets_x:f,offsets_y:m,offsets_xi:d,offsets_yi:y,gridWidth:M}=lt({width:h,height:u},e,i,l,a==="majority"?0:.5);let w;const U=(k,B,V)=>{const F=k instanceof Float32Array||k instanceof Float64Array?0:.5;for(let I=0;I<c;I++){w=I*M;for(let R=0;R<g;R++){if(f[w]<0||m[w]<0)k[I*g+R]=0;else if(V)k[I*g+R]=B[d[w]+y[w]*h];else{const C=Math.floor(f[w]),b=Math.floor(m[w]),O=Math.ceil(f[w]),$=Math.ceil(m[w]),X=f[w]-C,J=m[w]-b;if(!s||s[C+b*h]&&s[C+b*h]&&s[C+$*h]&&s[O+$*h]){const nt=(1-X)*B[C+b*h]+X*B[O+b*h],rt=(1-X)*B[C+$*h]+X*B[O+$*h];k[I*g+R]=(1-J)*nt+J*rt+F}else k[I*g+R]=B[d[w]+y[w]*h]}w++}}},v=[];let A;for(let k=0;k<p;k++)A=new r(g*c),U(A,n[k],a==="nearest"||a==="majority"),v.push(A);const T=new S({width:g,height:c,pixelType:o,pixels:v});if(P(s))T.mask=new Uint8Array(g*c),U(T.mask,s,!0);else if(x){T.mask=new Uint8Array(g*c);for(let k=0;k<g*c;k++)T.mask[k]=f[k]<0||m[k]<0?0:1}return T.updateStatistics(),T}(function(t){t[t.matchAny=0]="matchAny",t[t.matchAll=1]="matchAll"})(Q||(Q={})),function(t){t[t.bestMatch=0]="bestMatch",t[t.fail=1]="fail"}(Y||(Y={}));export{Ft as A,Et as D,pt as T,Rt as W,Tt as a,It as b,Ut as c,Bt as f,S as g,bt as h,Q as i,Gt as j,_t as k,Y as o,vt as p,_ as r,Mt as s,St as w,Ct as x,Pt as y};
