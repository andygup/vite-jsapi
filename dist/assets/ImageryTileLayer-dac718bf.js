import{cM as mt,bp as pe,f6 as it,J as Be,s as P,bE as Ee,K as N,bf as H,L as st,cQ as dt,hG as rt,bU as pt,ae as b,af as v,ai as Q,bD as yt,_ as gt,Q as He,bt as q,bP as xt,P as nt,aB as Ce,m as wt,bV as It,X as bt,dv as St,Z as Rt,D as vt,dY as Tt,ei as _t,bb as kt,bF as Ft,a$ as Mt}from"./index-298039cc.js";import{c as Ct,w as Pe,l as at,b as Pt,X as Ae,I as Le,R as $t,V as Dt,M as We,t as Ot,m as Bt,a as Et,o as zt,d as Jt}from"./ImageHistogramParameters-03ae5c31.js";import{O as Nt}from"./MultiOriginJSONSupport-1e25fea4.js";import{l as Ht}from"./ArcGISService-5b4b2430.js";import{a as At}from"./BlendLayer-cb6a7453.js";import{o as Lt}from"./CustomParametersMixin-8768a13f.js";import{f as ot,c as Wt}from"./commonProperties-4b011f7f.js";import{h as lt,D as qt,i as Gt,a as jt,p as ct,d as qe,o as Ut,f as Ge,g as Vt}from"./multidimensionalUtils-ee7552b3.js";import{j as Xt,l as ye,c as Yt,V as Kt,r as je,m as ge,h as Qt,t as ze,P as Zt,w as ei,x as ti,N as ii,U as si,R as ri,z as xe,B as ni,L as ai,D as oi}from"./RasterSymbolizer-73030fea.js";import{i as Ue,m as Ve,x as Xe,h as li,s as ci}from"./RawBlockCache-8b95787f.js";import{b as Te,R as ut,E as ui,c as hi,z as fi,e as mi,u as ee,f as di,d as pi,a as yi,D as gi}from"./dataUtils-7323bccc.js";import{k as $e,K as we,_ as Ye,i as Ke,n as xi,Q as _e,q as Se,$ as wi,V as Ii,v as bi,J as Si}from"./rasterProjectionHelper-cc12988f.js";import{N as De,f as Ri,i as vi,m as Je,c as Ti,C as _i}from"./utils-e50411b5.js";import{c as ki}from"./OperationalLayer-801a0f7c.js";import{j as Fi}from"./PortalLayer-c1506571.js";import{p as Mi}from"./RefreshableLayer-2dd2ccaf.js";import{t as Ci}from"./ScaleRangeLayer-24dee353.js";import{a as Pi}from"./TemporalLayer-98e8530b.js";import{y as de}from"./Field-33980454.js";import{g as ht}from"./FeatureSet-3f378b6d.js";import{n as $i,z as Di}from"./TilemapCache-6dcb9757.js";import{p as Oi}from"./popupUtils-a64a4c8d.js";import"./UniqueValueRenderer-d96bd559.js";import"./LegendOptions-1287e8f6.js";import"./diffUtils-39c4addc.js";import"./SizeVariable-8d9a35e0.js";import"./colorRamps-51949912.js";import"./sizeVariableUtils-d4870b0d.js";import"./lengthUtils-f797b468.js";import"./ColorStop-a25162f1.js";import"./jsonUtils-10e33437.js";import"./styleUtils-7224a88d.js";import"./featureFlags-8316ab84.js";import"./normalizeUtils-1070937a.js";import"./normalizeUtilsCommon-385dee75.js";import"./utils-ddc505ee.js";import"./parser-b2de9c30.js";import"./ItemCache-f24398e0.js";import"./MemCache-782b477a.js";import"./generateRendererUtils-879d3155.js";import"./jsonUtils-4a81df35.js";import"./ElevationInfo-7a165961.js";import"./colorUtils-c0f43caf.js";import"./portalItemUtils-8d4c2c9b.js";import"./fieldType-81268207.js";import"./ByteSizeUnit-d4757d40.js";import"./LRUCache-879d162d.js";const Qe=8,Bi=256;let L=class extends mt(yt){constructor(){super(...arguments),this.datasetName=null,this.datasetFormat=null,this.hasUniqueSourceStorageInfo=!0,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const e=$e();this.addResolvingPromise(e),await this.when()}normalizeCtorArgs(e){return e&&e.ioConfig&&(e={...e,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:pe.create(),...e.ioConfig}}),e}get _isGlobalWrappableSource(){const{rasterInfo:e}=this,s=we(e.spatialReference);return s!=null&&e.extent.width>=s/2}get _hasNoneOrGCSShiftTransform(){const{transform:e}=this.rasterInfo;return e==null||e.type==="gcs-shift"}set rasterJobHandler(e){var s,t;this._set("rasterJobHandler",e),this.datasetFormat==="Function"&&((t=(s=this.primaryRasters)==null?void 0:s.rasters)==null||t.forEach(i=>i.rasterJobHandler=e))}set url(e){this._set("url",it(e,Be.getLogger(this.declaredClass)))}async open(e){throw new P("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(e,s,t,i={}){const r=i.tileInfo||this.rasterInfo.storageInfo.tileInfo,n=this.getTileExtentFromTileInfo(e,s,t,r);return this.fetchPixels(n,r.size[0],r.size[1],i)}async identify(e,s={}){var $;e=Ee(N,e).clone().normalize();const{multidimensionalDefinition:t,timeExtent:i}=s,{rasterInfo:r}=this,{hasMultidimensionalTranspose:n,multidimensionalInfo:o}=r;let{transposedVariableName:l}=s;const u=o!=null&&n&&(i!=null||lt(t));u&&!l&&(l=t!=null&&t.length>0?t[0].variableName??void 0:o.variables[0].name,s={...s,transposedVariableName:l}),s=this._getRequestOptionsWithSliceId(s);const{spatialReference:c,extent:f}=r,{datumTransformation:m}=s;let h=Ye(e,c,m);if(!f.intersects(h))return{location:h,value:null};if(r.transform!=null){const D=r.transform.inverseTransform(h);if(!r.nativeExtent.intersects(D))return{location:D,value:null};h=D}let p=0;const g=l!=null&&o!=null&&r.hasMultidimensionalTranspose;if(this.datasetFormat==="Function"){const D=this.primaryRasters.rasters[0];if(g)return D.identify(h,s);const{pixelSize:O}=r,C=3,E=O.x*C/2,J=O.y*C/2,V=new H({xmin:h.x-E,xmax:h.x+E,ymin:h.y-J,ymax:h.y+J,spatialReference:c}),X={interpolation:"nearest"},{pixelBlock:B}=await D.fetchPixels(V,C,C,X),{pixelBlock:G}=await this.fetchPixels(V,C,C,X);if(B==null)return{location:h,value:null};const A=Math.floor(C*C*.5),j=!B.mask||B.mask[A]?B.pixels.map(Z=>Z[A]):null;let ie;return G!=null&&(ie=!G.mask||G.mask[A]?G.pixels.map(Z=>Z[A]):void 0),{location:h,value:j,processedValue:ie,pyramidLevel:0}}if(!g){if(s.srcResolution)p=Ke(s.srcResolution,r,this.ioConfig.sampling).pyramidLevel;else if(p=await this.computeBestPyramidLevelForLocation(e,s),p==null)return{location:h,value:null}}const d=this.identifyPixelLocation(h,p,null,g);if(d===null)return{location:h,value:null};const{row:x,col:y,rowOffset:w,colOffset:I,blockWidth:R}=d,T=l??s.sliceId,F=Ue(this.url,T),k=`${p}/${x}/${y}`;let _=Ve(F,null,k);_==null&&(_=this.fetchRawTile(p,x,y,s),Xe(F,null,k,_));const S=await _;if(S==null||!(($=S.pixels)!=null&&$.length))return{location:h,value:null};const M=w*R+I;return this._processIdentifyResult(S,{srcLocation:h,position:M,pyramidLevel:p,useTransposedTile:!!g,requestSomeSlices:u,identifyOptions:s})}async fetchPixels(e,s,t,i={}){e=xi(e),i=this._getRequestOptionsWithSliceId(i);const{_hasNoneOrGCSShiftTransform:r}=this;if(i.requestRawData&&r)return this._fetchPixels(e,s,t,i);const n=we(e.spatialReference),o=_e(e);if(n==null||o===0||o===1&&this._isGlobalWrappableSource&&r)return this._fetchPixels(e,s,t,i);if(o>=3)return{extent:e,pixelBlock:null};const l=[],{xmin:u,xmax:c}=e,f=Math.round(n/(c-u)*s),m=f-Math.round((n/2-u)/(c-u)*s);let h=0;const p=[];for(let y=0;y<=o;y++){const w=new H({xmin:y===0?u:-n/2,xmax:y===o?c-n*y:n/2,ymin:e.ymin,ymax:e.ymax,spatialReference:e.spatialReference}),I=y===0?f-m:y===o?s-h:f;h+=I,p.push(I);const R=i.disableWrapAround&&y>0?null:this._fetchPixels(w,I,t,i);l.push(R)}const g=(await Promise.all(l)).map(y=>y==null?void 0:y.pixelBlock);let d=null;const x={width:s,height:t};return this.rasterJobHandler?d=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:g,srcMosaicSize:x,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:p},i)).pixelBlock:d=Te(g,x,{blockWidths:p}),{extent:e,srcExtent:Se(e,this.rasterInfo.spatialReference,i.datumTransformation),pixelBlock:d}}async fetchRawPixels(e,s,t,i={}){s={x:Math.floor(s.x),y:Math.floor(s.y)};const r=await this._fetchRawTiles(e,s,t,i),{nativeExtent:n,nativePixelSize:o,storageInfo:l}=this.rasterInfo,u=2**e,c=o.x*u,f=o.y*u,m=new H({xmin:n.xmin+c*s.x,xmax:n.xmin+c*(s.x+t.width-1),ymin:n.ymax-f*(s.y+t.height-1),ymax:n.ymax-f*s.y,spatialReference:n.spatialReference});if(!r)return{extent:m,srcExtent:m,pixelBlock:null};const{pixelBlocks:h,mosaicSize:p}=r;if(h.length===1&&h[0]!=null&&h[0].width===t.width&&h[0].height===t.height)return{extent:m,srcExtent:m,pixelBlock:r.pixelBlocks[0]};const g=e>0?l.pyramidBlockWidth:l.blockWidth,d=e>0?l.pyramidBlockHeight:l.blockHeight,x={x:s.x%g,y:s.y%d};let y;return this.rasterJobHandler?y=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:h,srcMosaicSize:p,destDimension:t,clipOffset:x,clipSize:t,coefs:null,sampleSpacing:null,interpolation:i.interpolation,alignmentInfo:null,blockWidths:null},i)).pixelBlock:y=Te(h,p,{clipOffset:x,clipSize:t}),{extent:m,srcExtent:m,pixelBlock:y}}fetchRawTile(e,s,t,i){throw new P("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(e){return Se(this.rasterInfo.extent,e)}decodePixelBlock(e,s){return!this.rasterJobHandler||s.useCanvas?Xt(e,s):this.rasterJobHandler.decode({data:e,options:s})}async request(e,s,t=0){const{customFetchParameters:i}=this.ioConfig,{range:r,query:n,headers:o}=s;t=t??s.retryCount??this.ioConfig.retryCount;const l=r?{Range:`bytes=${r.from}-${r.to}`}:null;try{return await st(e,{...s,query:{...n,...i},headers:{...o,...l}})}catch(u){if(t>0)return t--,this.request(e,s,t);throw u}}getSliceIndex(e){const{multidimensionalInfo:s}=this.rasterInfo;return s==null||e==null||e.length===0?null:qt(e,s)}getTileExtentFromTileInfo(e,s,t,i){const r=dt(i.lodAt(e));return this.getTileExtent({x:r.resolution,y:r.resolution},s,t,i.origin,i.spatialReference,i.size)}updateTileInfo(){const{storageInfo:e,spatialReference:s,extent:t,pixelSize:i}=this.rasterInfo;if(!e.tileInfo){const r=[],n=e.maximumPyramidLevel||0;let o=Math.max(i.x,i.y),l=1/.0254*96*o;for(let c=0;c<=n;c++)r.push(new rt({level:n-c,resolution:o,scale:l})),o*=2,l*=2;const u=new N({x:t.xmin,y:t.ymax,spatialReference:s});e.tileInfo=new pe({origin:u,size:[e.blockWidth,e.blockHeight],spatialReference:s,lods:r}),e.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(e,s=512,t=512,i){const{width:r,height:n,nativeExtent:o,pixelSize:l,spatialReference:u}=e,c=new N({x:o.xmin,y:o.ymax,spatialReference:u});i==null&&(i=Math.max(0,Math.round(Math.log(Math.max(r,n))/Math.LN2-8)));const f=this.computeBlockBoundary(o,512,512,{x:o.xmin,y:o.ymax},[l],i);e.storageInfo=new ye({blockWidth:s,blockHeight:t,pyramidBlockWidth:s,pyramidBlockHeight:t,origin:c,firstPyramidLevel:1,maximumPyramidLevel:i,blockBoundary:f})}async computeBestPyramidLevelForLocation(e,s={}){return 0}computeBlockBoundary(e,s,t,i,r,n=0,o=2){if(r.length===1&&n>0){r=[...r];let{x:f,y:m}=r[0];for(let h=0;h<n;h++)f*=o,m*=o,r.push({x:f,y:m})}const l=[],{x:u,y:c}=i;for(let f=0;f<r.length;f++){const{x:m,y:h}=r[f];l.push({minCol:Math.floor((e.xmin-u+.1*m)/s/m),maxCol:Math.floor((e.xmax-u-.1*m)/s/m),minRow:Math.floor((c-e.ymax+.1*h)/t/h),maxRow:Math.floor((c-e.ymin-.1*h)/t/h)})}return l}getPyramidPixelSize(e){const{nativePixelSize:s}=this.rasterInfo,{pyramidResolutions:t,pyramidScalingFactor:i}=this.rasterInfo.storageInfo;if(e===0)return s;if(t!=null&&t.length)return t[e-1];const r=i**e;return{x:s.x*r,y:s.y*r}}identifyPixelLocation(e,s,t,i){const{spatialReference:r,nativeExtent:n,storageInfo:o}=this.rasterInfo,{maximumPyramidLevel:l,origin:u,transposeInfo:c}=o,f=i&&c!=null?c.tileSize[0]:o.blockWidth,m=i&&c!=null?c.tileSize[1]:o.blockHeight,h=Ye(e,r,t);if(!n.intersects(h)||s<0||s>l)return null;const p=this.getPyramidPixelSize(s),{x:g,y:d}=p,x=(u.y-h.y)/d/m,y=(h.x-u.x)/g/f,w=Math.min(m-1,Math.floor((x-Math.floor(x))*m)),I=Math.min(f-1,Math.floor((y-Math.floor(y))*f));return{pyramidLevel:s,row:Math.floor(x),col:Math.floor(y),rowOffset:w,colOffset:I,blockWidth:f,srcLocation:h}}getTileExtent(e,s,t,i,r,n){const[o,l]=n,u=i.x+t*o*e.x,c=u+o*e.x,f=i.y-s*l*e.y,m=f-l*e.y;return new H({xmin:u,xmax:c,ymin:m,ymax:f,spatialReference:r})}getBlockWidthHeight(e){return{blockWidth:e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(e,s,t){const i=this.rasterInfo.storageInfo.blockBoundary[e];return!i||i.maxRow<s||i.maxCol<t||i.minRow>s||i.minCol>t}async _fetchPixels(e,s,t,i={}){let r=_e(e);if(r>=2)return{extent:e,pixelBlock:null};const n=this._getSourceDataInfo(e,s,t,i),{pyramidLevel:o,srcResolution:l,srcExtent:u,srcWidth:c,srcHeight:f,ul:m}=n;if(c===0||f===0)return{extent:e,srcExtent:u,pixelBlock:null};const{rasterInfo:h}=this,p=h.transform,g=(p==null?void 0:p.type)==="gcs-shift",d=we(e.spatialReference)!=null;!g&&d||(r=_e(n.srcExtent,g));const x=await this._fetchRawTiles(o,m,{width:c,height:f,wrapCount:r},i);if(!x)return{extent:e,srcExtent:u,pixelBlock:null};const y=h.storageInfo,w=o>0?y.pyramidBlockWidth:y.blockWidth,I=o>0?y.pyramidBlockHeight:y.blockHeight;let{x:R,y:T}=h.pixelSize;if(o>0){const{pyramidResolutions:j,pyramidScalingFactor:ie}=y;if(j!=null&&j[o-1])({x:R,y:T}=j[o-1]);else{const Z=ie**o;R*=Z,T*=Z}}const F=new N({x:R,y:T,spatialReference:h.spatialReference}),k=w===c&&I===f&&m.x%w==0&&m.y%I==0,_=new N({x:(e.xmax-e.xmin)/s,y:(e.ymax-e.ymin)/t,spatialReference:e.spatialReference}),S=!e.spatialReference.equals(this.rasterInfo.spatialReference),{datumTransformation:M}=i;if(!S&&k&&x.pixelBlocks.length===1&&w===s&&I===t&&l.x===_.x&&l.y===_.y)return{extent:e,srcExtent:u,srcTilePixelSize:F,pixelBlock:x.pixelBlocks[0]};const $=d&&we(u.spatialReference)!=null&&this._hasNoneOrGCSShiftTransform,D=i.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");D&&!this.rasterJobHandler&&await $e();const O=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:e,srcBufferExtent:x.extent,pixelSize:_.toJSON(),datumTransformation:M,rasterTransform:p,hasWrapAround:r>0||$,isAdaptive:this.ioConfig.optimizeProjectionAccuracy!==!1,includeGCSGrid:D},i):wi({projectedExtent:e,srcBufferExtent:x.extent,pixelSize:_,datumTransformation:M,rasterTransform:p,hasWrapAround:r>0||$,isAdaptive:!1,includeGCSGrid:D});let C;const E=!i.requestRawData,J={rows:O.spacing[0],cols:O.spacing[1]},V=this._hasNoneOrGCSShiftTransform?this._getRasterTileAlignmentInfo(o,x.extent.xmin):void 0,{pixelBlocks:X,mosaicSize:B,isPartiallyFilled:G}=x;let A=null;if(this.rasterJobHandler)({pixelBlock:C,localNorthDirections:A}=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:X,srcMosaicSize:B,destDimension:E?{width:s,height:t}:null,coefs:E?O.coefficients:null,sampleSpacing:E?J:null,projectDirections:D,gcsGrid:D?O.gcsGrid:null,isUV:this.rasterInfo.dataType==="vector-uv",interpolation:i.interpolation,alignmentInfo:V,blockWidths:null},i));else{const j=Te(X,B,{alignmentInfo:V});C=E?ut(j,{width:s,height:t},O.coefficients,J,i.interpolation):j,D&&O.gcsGrid&&(A=ui({width:s,height:t},O.gcsGrid),C=hi(C,this.rasterInfo.dataType,A))}return i.requestRawData||D?{extent:e,srcExtent:u,srcTilePixelSize:F,pixelBlock:C,transformGrid:O,localNorthDirections:A,isPartiallyFilled:G}:{extent:e,srcExtent:u,srcTilePixelSize:F,pixelBlock:C}}async _fetchRawTiles(e,s,t,i){const{origin:r,blockBoundary:n}=this.rasterInfo.storageInfo,{blockWidth:o,blockHeight:l}=this.getBlockWidthHeight(e);let{x:u,y:c}=s,{width:f,height:m,wrapCount:h}=t;const p=this._getRasterTileAlignmentInfo(e,0);i.buffer&&(u-=i.buffer.cols,c-=i.buffer.rows,f+=2*i.buffer.cols,m+=2*i.buffer.rows);let g=0,d=0,x=0;h&&p!=null&&({worldColumnCountFromOrigin:d,originColumnOffset:x,rightPadding:g}=p,d*p.blockWidth-g>=u+f&&(g=0));const y=Math.floor(u/o),w=Math.floor(c/l),I=Math.floor((u+f+g-1)/o),R=Math.floor((c+m+g-1)/l),T=n[e];if(!T)return null;const{minRow:F,minCol:k,maxCol:_,maxRow:S}=T;if(h===0&&(R<F||I<k||w>S||y>_))return null;const M=new Array;let $=!1;const D=this.ioConfig.allowPartialFill==null?i.allowPartialFill:this.ioConfig.allowPartialFill;for(let B=w;B<=R;B++)for(let G=y;G<=I;G++){let A=G;if(!i.disableWrapAround&&h&&p!=null&&d<=G&&(A=G-d-x),B>=F&&A>=k&&S>=B&&_>=A){const j=this._fetchRawTile(e,B,A,i);D?M.push(new Promise(ie=>{j.then(Z=>ie(Z)).catch(()=>{$=!0,ie(null)})})):M.push(j)}else M.push(Promise.resolve(null))}if(M.length===0)return null;const O=await Promise.all(M),C={height:(R-w+1)*l,width:(I-y+1)*o},{spatialReference:E}=this.rasterInfo,J=this.getPyramidPixelSize(e),{x:V,y:X}=J;return{extent:new H({xmin:r.x+y*o*V,xmax:r.x+(I+1)*o*V,ymin:r.y-(R+1)*l*X,ymax:r.y-w*l*X,spatialReference:E}),pixelBlocks:O,mosaicSize:C,isPartiallyFilled:$}}_fetchRawTile(e,s,t,i){const r=this.rasterInfo.storageInfo.blockBoundary[e];if(!r)return Promise.resolve(null);const{minRow:n,minCol:o,maxCol:l,maxRow:u}=r;if(s<n||t<o||s>u||t>l)return Promise.resolve(null);const c=Ue(this.url,i.sliceId),f=`${e}/${s}/${t}`;let m=Ve(c,i.registryId,f);if(m==null){const h=new AbortController;m=this.fetchRawTile(e,s,t,{...i,signal:h.signal}),Xe(c,i.registryId,f,m,h),m.catch(()=>li(c,i.registryId,f))}return i.signal&&pt(i,()=>{ci(c,i.registryId,f)}),m}_computeMagDirValues(e){var u;const{bandCount:s,dataType:t}=this.rasterInfo;if(!(s===2&&t==="vector-magdir"||t==="vector-uv")||(e==null?void 0:e.length)!==2||!((u=e[0])!=null&&u.length))return null;const i=e[0].length;if(t==="vector-magdir"){const c=e[1].map(f=>(f+360)%360);return[e[0],c]}const[r,n]=e,o=[],l=[];for(let c=0;c<i;c++){const[f,m]=fi([r[c],n[c]]);o.push(f),l.push(m)}return[o,l]}_getRasterTileAlignmentInfo(e,s){return this._rasterTileAlighmentInfo==null&&(this._rasterTileAlighmentInfo=Ii(this.rasterInfo)),this._rasterTileAlighmentInfo.pyramidsInfo==null?null:{startX:s,halfWorldWidth:this._rasterTileAlighmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlighmentInfo.hasGCSSShiftTransform,...this._rasterTileAlighmentInfo.pyramidsInfo[e]}}_getSourceDataInfo(e,s,t,i={}){const r={datumTransformation:i.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0,ul:{x:0,y:0}};i.srcResolution&&(r.srcResolution=i.srcResolution,this._updateSourceDataInfo(e,r));const n=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:o,srcHeight:l,pyramidLevel:u}=r,c=o/s,f=l/t,m=u<n&&c*f>=16,h=u===n&&this._requireTooManySrcTiles(o,l,s,t);if(m||h||o===0||l===0){const p=new N({x:(e.xmax-e.xmin)/s,y:(e.ymax-e.ymin)/t,spatialReference:e.spatialReference});let g=bi(p,this.rasterInfo.spatialReference,e,r.datumTransformation);const d=!g||i.srcResolution&&g.x+g.y<i.srcResolution.x+i.srcResolution.y;if(m&&i.srcResolution&&d){const x=Math.round(Math.log(Math.max(c,f))/Math.LN2)-1;if(n-u+3>=x){const y=2**x;g={x:i.srcResolution.x*y,y:i.srcResolution.y*y}}}g&&(r.srcResolution=g,this._updateSourceDataInfo(e,r))}return this._requireTooManySrcTiles(r.srcWidth,r.srcHeight,s,t)&&(r.srcWidth=0,r.srcHeight=0),r}_requireTooManySrcTiles(e,s,t,i){const{tileInfo:r}=this.rasterInfo.storageInfo;return Math.ceil(e/r.size[0])*Math.ceil(s/r.size[1])>=Bi||e/t>Qe||s/i>Qe}_updateSourceDataInfo(e,s){s.srcWidth=0,s.srcHeight=0;const{rasterInfo:t}=this,i=t.spatialReference,{srcResolution:r,datumTransformation:n}=s,{pyramidLevel:o,pyramidResolution:l,excessiveReading:u}=Ke(r,t,this.ioConfig.sampling);if(u)return;let c=s.srcExtent||Se(e,i,n);if(c==null)return;const f=t.transform;f&&(c=f.inverseTransform(c)),s.srcExtent=c;const{x:m,y:h}=t.storageInfo.origin,p=Math.floor((c.xmin-m)/l.x+.1),g=Math.floor((h-c.ymax)/l.y+.1),d=Math.floor((c.xmax-m)/l.x-.1),x=Math.floor((h-c.ymin)/l.y-.1),y=c.width<.1*l.x?0:d-p+1,w=c.height<.1*l.y?0:x-g+1;s.pyramidLevel=o,s.pyramidResolution=l,s.srcWidth=y,s.srcHeight=w,s.ul={x:p,y:g}}_getRequestOptionsWithSliceId(e){return this.rasterInfo.multidimensionalInfo!=null&&e.sliceId==null&&(e={...e,sliceId:this.getSliceIndex(e.multidimensionalDefinition)}),e}_processIdentifyResult(e,s){const{srcLocation:t,position:i,pyramidLevel:r,useTransposedTile:n}=s,o=e.pixels[0].length/e.width/e.height;if(!(!e.mask||e.mask[i]))return{location:t,value:null};const{multidimensionalInfo:l}=this.rasterInfo;if(l==null||!n){const x=e.pixels.map(I=>I[i]),y={location:t,value:x,pyramidLevel:r},w=this._computeMagDirValues(x.map(I=>[I]));return w!=null&&w.length&&(y.magdirValue=w.map(I=>I[0])),y}let u=e.pixels.map(x=>x.slice(i*o,i*o+o)),c=this._computeMagDirValues(u);const{requestSomeSlices:f,identifyOptions:m}=s;let h=Gt(l,m.transposedVariableName);if(f){const x=jt(h,m.multidimensionalDefinition,m.timeExtent);u=u.map(y=>x.map(w=>y[w])),c=c==null?void 0:c.map(y=>x.map(w=>y[w])),h=x.map(y=>h[y])}const p=e.noDataValues||this.rasterInfo.noDataValue,g={pixels:u,pixelType:e.pixelType};let d;return p!=null&&(mi(g,p),d=g.mask),{location:t,value:null,dataSeries:h.map((x,y)=>{const w={value:(d==null?void 0:d[y])===0?null:u.map(I=>I[y]),multidimensionalDefinition:x.multidimensionalDefinition.map(I=>new ct({...I,isSlice:!0}))};return c!=null&&c.length&&(w.magdirValue=[c[0][y],c[1][y]]),w}),pyramidLevel:r}}};b([v()],L.prototype,"_rasterTileAlighmentInfo",void 0),b([v({readOnly:!0})],L.prototype,"_isGlobalWrappableSource",null),b([v({readOnly:!0})],L.prototype,"_hasNoneOrGCSShiftTransform",null),b([v()],L.prototype,"rasterJobHandler",null),b([v(ot)],L.prototype,"url",null),b([v({type:String,json:{write:!0}})],L.prototype,"datasetName",void 0),b([v({type:String,json:{write:!0}})],L.prototype,"datasetFormat",void 0),b([v()],L.prototype,"hasUniqueSourceStorageInfo",void 0),b([v()],L.prototype,"rasterInfo",void 0),b([v()],L.prototype,"ioConfig",void 0),b([v()],L.prototype,"sourceJSON",void 0),L=b([Q("esri.layers.support.rasterDatasets.BaseRaster")],L);const oe=L;let se=class extends oe{constructor(){super(...arguments),this.datasetFormat="Function",this.tileType="Raster",this.rasterFunction=null}async open(e){var u,c,f;await this.init();const{rasterFunction:s}=this;(c=(u=this.primaryRasters)==null?void 0:u.rasters)!=null&&c.length?s.sourceRasters=this.primaryRasters.rasters:(this.primaryRasters=s.getPrimaryRasters(),this.rasterJobHandler&&((f=this.primaryRasters.rasters)==null||f.forEach(m=>m.rasterJobHandler=this.rasterJobHandler)));const{rasters:t,rasterIds:i}=this.primaryRasters,r=t.map(m=>m.rasterInfo?void 0:m.open(e));await Promise.all(r);const n=t.map(({rasterInfo:m})=>m),o=s.bind({rasterInfos:n,rasterIds:i});if(!o.success||n.length===0)throw new P("raster-function:open",`cannot bind the function: ${o.error??""}`);await this.syncJobHandler();const l=n[0];this.hasUniqueSourceStorageInfo=n.length===1||n.slice(1).every(m=>this._hasSameStorageInfo(m,l)),this.set("sourceJSON",t[0].sourceJSON),this.set("rasterInfo",s.rasterInfo)}async syncJobHandler(){var e;return(e=this.rasterJobHandler)==null?void 0:e.updateRasterFunction(this.rasterFunction)}async fetchPixels(e,s,t,i={}){var w,I;const{rasters:r,rasterIds:n}=this.primaryRasters;let o=!1;const{interpolation:l}=i,u=(w=this.rasterFunction.flatWebGLFunctionChain)==null?void 0:w.hasSurfaceFunction;!i.requestRawData&&l!=="bilinear"&&u&&(o=r.length===1&&!i.skipRasterFunction,i={...i,interpolation:"bilinear",requestRawData:o});const c=r.map(R=>R.fetchPixels(e,s,t,i)),f=await Promise.all(c),m=f.map(R=>R.pixelBlock),h=o||i.requestRawData?f.map(R=>R.srcTilePixelSize):null;if(i.skipRasterFunction||m.every(R=>R==null))return f[0];const p=((I=f.find(R=>R.pixelBlock!=null))==null?void 0:I.extent)??e,g=this.rasterJobHandler?await this.rasterJobHandler.process({extent:p,primaryPixelBlocks:m,primaryPixelSizes:h,primaryRasterIds:n}):this.rasterFunction.process({extent:p,primaryPixelBlocks:m,primaryPixelSizes:h,primaryRasterIds:n}),{transformGrid:d}=f[0];if(!o||g==null||d==null)return{...f[0],pixelBlock:g};const x={rows:d.spacing[0],cols:d.spacing[1]};let y;return this.rasterJobHandler?y=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:[g],srcMosaicSize:{width:g.width,height:g.height},destDimension:{width:s,height:t},coefs:d.coefficients,sampleSpacing:x,projectDirections:!1,gcsGrid:null,isUV:!1,interpolation:l,alignmentInfo:void 0,blockWidths:null},i)).pixelBlock:y=ut(g,{width:s,height:t},d.coefficients,x,l),{extent:e,srcExtent:f[0].srcExtent,pixelBlock:y}}_hasSameStorageInfo(e,s){const{storageInfo:t,pixelSize:i,spatialReference:r,extent:n}=e,{storageInfo:o,pixelSize:l,spatialReference:u,extent:c}=s;return i.x===l.x&&i.y===l.y&&r.equals(u)&&n.equals(c)&&t.blockHeight===o.blockHeight&&t.blockWidth===o.blockWidth&&t.maximumPyramidLevel===o.maximumPyramidLevel}};b([v({type:String,json:{write:!0}})],se.prototype,"datasetFormat",void 0),b([v()],se.prototype,"tileType",void 0),b([v()],se.prototype,"rasterFunction",void 0),b([v()],se.prototype,"primaryRasters",void 0),se=b([Q("esri.layers.support.rasterDatasets.FunctionRaster")],se);const Oe=se;function Ei(a,e){if(a.spatialReference.equals(e))return a;const s=He(a.spatialReference),t=He(e);if(s===t)return a;const i=s/t;return{x:a.x*i,y:a.y*i}}async function zi(a,e,s){if(s.type==="extent")return Ni(a,e,s);const{width:t,height:i}=a,r=new Uint8Array(t*i),{contains:n,intersects:o}=await gt(()=>import("./geometryEngine-94f3b97c.js"),["assets/geometryEngine-94f3b97c.js","assets/geometryEngineBase-6eb2672b.js","assets/index-298039cc.js","assets/index-001d3307.css","assets/hydrated-1d6b94b5.js"]);return o(e,s)?s.type==="polyline"?Hi(a,e,s):n(s,e)?a:Ji(a,e,s):new ee({pixelType:a.pixelType,width:t,height:i,mask:r,maskIsAlpha:!1,pixels:[...a.pixels]})}function Ji(a,e,s){if(!a)return a;const{width:t,height:i}=a,r=e.width/t,n=e.height/i,{xmin:o,ymax:l}=e;let u;if(s.type==="extent"){const d=(s.xmin-o)/r,x=(s.xmax-o)/r,y=(l-s.ymax)/n,w=(l-s.ymin)/n;u=[[[d,y],[d,w],[x,w],[x,y],[d,y]]]}else u=s.rings.map(d=>d.map(([x,y])=>[(x-o)/r,(l-y)/n]));const c=document.createElement("canvas");c.width=t,c.height=i;const f=c.getContext("2d");f.fillStyle="#f00",u.forEach(d=>{f.beginPath(),f.moveTo(d[0][0],d[0][1]);for(let x=0;x<d.length;x++)f.lineTo(d[x][0],d[x][1]);f.closePath(),f.fill()});const m=f.getImageData(0,0,t,i).data,h=a.mask,p=t*i,g=new Uint8Array(p);for(let d=0;d<p;d++)h&&!h[d]||(g[d]=m[4*d+3]>127?255:0);return new ee({pixelType:a.pixelType,width:t,height:i,mask:g,maskIsAlpha:!1,pixels:[...a.pixels]})}function Ni(a,e,s){const{width:t,height:i}=a,r=new Uint8Array(t*i),n=e.width/t,o=e.height/i;if(s.width/n<.5||s.height/o<.5)return new ee({pixelType:a.pixelType,width:t,height:i,mask:r,pixels:[...a.pixels]});const{xmin:l,xmax:u,ymin:c,ymax:f}=e,{xmin:m,xmax:h,ymin:p,ymax:g}=s,d=Math.max(l,m),x=Math.min(u,h),y=Math.max(c,p),w=Math.min(f,g),I=.5*n,R=.5*o;if(x-d<I||w-y<R||x<l+I||d>u-I||y>f-R||w<c+R)return new ee({pixelType:a.pixelType,width:t,height:i,mask:r,pixels:[...a.pixels]});const T=Math.max(0,(d-l)/n),F=Math.min(t,Math.max(0,(x-l)/n)),k=Math.max(0,(f-w)/o),_=Math.min(i,Math.max(0,(f-y)/o)),S=Math.round(T),M=Math.round(F)-1,$=Math.round(k),D=Math.round(_)-1;if(S===M&&T%1>.5&&F%1<.5||$===D&&k%1>.5&&_%1<.5)return new ee({pixelType:a.pixelType,width:t,height:i,mask:r,pixels:[...a.pixels]});if(S===0&&$===0&&M===t&&D===i)return a;const O=a.mask;for(let C=$;C<=D;C++)for(let E=S;E<=M;E++){const J=C*t+E;r[J]=O?O[J]:255}return new ee({pixelType:a.pixelType,width:t,height:i,mask:r,pixels:[...a.pixels]})}function Hi(a,e,s){const{width:t,height:i}=a,r=new Uint8Array(t*i),n=e.width/t,o=e.height/i,{xmin:l,ymax:u}=e,{paths:c}=s,f=a.mask;for(let m=0;m<c.length;m++){const h=c[m];for(let p=0;p<h.length-1;p++){const[g,d]=h[p],[x,y]=h[p+1];let w=Math.floor((u-d)/o),I=Math.floor((u-y)/o);if(I<w){const T=w;w=I,I=T}w=Math.max(0,w),I=Math.min(i-1,I);const R=(x-g)/(y-d);for(let T=w;T<=I;T++){const F=T===w?Math.max(d,y):(i+1-T)*o,k=T===I?Math.min(d,y):F-o;let _=Math.floor(y===d?(g-l)/n:(R*(F-d)+g-l)/n),S=Math.floor(y===d?(x-l)/n:(R*(k-d)+g-l)/n);if(S<_){const $=_;_=S,S=$}const M=T*t;_=Math.max(0,_),S=Math.min(t-1,S);for(let $=M+_;$<=M+S;$++)r[$]=f?f[$]:255}}}return new ee({pixelType:a.pixelType,width:t,height:i,mask:r,pixels:[...a.pixels]})}function Ai(a,e,s,t=!0){const{spatialReference:i}=a,{x:r,y:n}=Ei(s,i);let o,l,u;const c=e.type==="extent"?e:e.extent;let{xmin:f,xmax:m,ymax:h,ymin:p}=c;const{xmin:g,ymax:d}=a.extent;return t?(f=g+(f>g?r*Math.round((f-g)/r):0),h=d-(h<d?n*Math.round((d-h)/n):0),m=g+(m>g?r*Math.round((m-g)/r):0),p=d-(p<d?n*Math.round((d-p)/n):0),o=new H({xmin:f,ymax:h,xmax:m,ymin:p,spatialReference:i}),l=Math.round(o.width/r),u=Math.round(o.height/n)):(l=Math.floor((m-f)/r+.8),u=Math.floor((h-p)/n+.8),f=g+(f>g?r*Math.floor((f-g)/r+.1):0),h=d-(h<d?n*Math.floor((d-h)/n+.1):0),m=f+l*r,p=h-u*n,o=new H({xmin:f,ymax:h,xmax:m,ymin:p,spatialReference:i})),{extent:o,width:l,height:u}}const Ze=Be.getLogger("esri.layers.mixins.ImageryTileMixin"),Li=a=>{let e=class extends a{constructor(...t){var i,r;super(...t),this._isConstructedFromFunctionRaster=!1,this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.interpolation="nearest",this.multidimensionalSubset=null,this.raster=null,this.rasterFunction=null,this.rasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.symbolizer=null,this._isConstructedFromFunctionRaster=((r=(i=t[0])==null?void 0:i.raster)==null?void 0:r.datasetFormat)==="Function"}get fullExtent(){var t;return(t=this.rasterInfo)==null?void 0:t.extent}set multidimensionalDefinition(t){this._set("multidimensionalDefinition",t),this.updateRenderer()}get tileInfo(){var t;return(t=this.rasterInfo)==null?void 0:t.storageInfo.tileInfo}set url(t){this._set("url",it(t,Ze))}set renderer(t){this._set("renderer",t),this.updateRenderer()}async convertVectorFieldData(t,i){if(t==null||!this.rasterInfo)return null;const r=this._rasterJobHandler.instance,n=this.rasterInfo.dataType;return r?r.convertVectorFieldData({pixelBlock:t,dataType:n},i):di(t,n)}async computeStatisticsHistograms(t,i){t=Ee(Pt,t).clone();const{rasterInfo:r}=this,{geometry:n}=t;if(n==null)throw new P("imagery-tile-mixin:compute-statistics-histograms","geometry must be specified");let o=n;const{spatialReference:l}=r;n.spatialReference.equals(l)||(await $e(),o=n.type==="extent"?Se(n,l):Si(n,l));const u=t.pixelSize??new N({x:r.pixelSize.x,y:r.pixelSize.y,spatialReference:l}),{extent:c,width:f,height:m}=Ai(r,o,u),h=await this.fetchPixels(c,f,m,{...i,interpolation:"nearest"});if(h.pixelBlock==null)throw new P("imagery-tile-mixin:compute-statistics-histograms","failed to fetch pixels");const p=await zi(h.pixelBlock,c,o),g=this._rasterJobHandler.instance;return g?g.computeStatisticsHistograms({pixelBlock:p},i):Yt(p)}async createFlowMesh(t,i){const r=this._rasterJobHandler.instance;return r?r.createFlowMesh(t,i):pi(t.meshType,t.simulationSettings,t.flowData,i.signal!=null?i.signal:new AbortController().signal)}normalizeRasterFetchOptions(t){var o,l;const{multidimensionalInfo:i}=this.rasterInfo??{};if(i==null)return t;let r=t.multidimensionalDefinition||this.multidimensionalDefinition;r!=null&&r.length||(r=qe(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset}));const n=t.timeExtent||this.timeExtent;if(r!=null&&n!=null&&(n.start!=null||n.end!=null)){r=r.map(x=>x.clone());const u=(l=(o=i.variables.find(({name:x})=>x===r[0].variableName))==null?void 0:o.dimensions)==null?void 0:l.find(({name:x})=>x==="StdTime"),c=r.find(({dimensionName:x})=>x==="StdTime");if(!u||!c)return{...t,multidimensionalDefinition:null};const{start:f,end:m}=n,h=f==null?null:f.getTime(),p=m==null?null:m.getTime(),g=h??p,d=p??h;if(u.values!=null){const x=u.values.filter(y=>{if(Array.isArray(y)){if(g===d)return y[0]<=g&&y[1]>=g;const w=y[0]<=g&&y[1]>g||y[0]<d&&y[1]>=d,I=y[0]>=g&&y[1]<=d||y[0]<g&&y[1]>d;return w||I}return g===d?y===g:y>=g&&y<=d});if(x.length){const y=x.sort((w,I)=>{const R=Array.isArray(w)?w[0]:w,T=Array.isArray(w)?w[1]:w,F=Array.isArray(I)?I[0]:I,k=Array.isArray(I)?I[1]:I;return g===d?R-F:Math.abs(T-d)-Math.abs(k-d)})[0];c.values=[y]}else r=null}else if(u.hasRegularIntervals&&u.extent){const[x,y]=u.extent;g>y||d<x?r=null:c.values=g===d?[g]:[Math.max(x,g),Math.min(y,d)]}}return r!=null&&Ut(r,this.multidimensionalSubset)?{...t,multidimensionalDefinition:null}:{...t,multidimensionalDefinition:r}}async updateRasterFunction(){var c,f;if(this.type!=="imagery-tile"||!this.rasterFunction&&!this._cachedRasterFunctionJson||JSON.stringify(this.rasterFunction)===JSON.stringify(this._cachedRasterFunctionJson))return;if(this._isConstructedFromFunctionRaster&&this.raster.datasetFormat==="Function"){const m=this.raster.rasterFunction.toJSON();return!this.rasterFunction&&m&&this._set("rasterFunction",Pe.fromJSON(m)),void(this._cachedRasterFunctionJson=(c=this.rasterFunction)==null?void 0:c.toJSON())}let t,i=this.raster,r=!1;i.datasetFormat==="Function"?(t=i.primaryRasters.rasters,i=t[0],r=!0):t=[i];const{rasterFunction:n}=this;if(n){const m={raster:i};t.length>1&&t.forEach(g=>m[g.url]=g);const h=De(n.rasterFunctionDefinition??n.toJSON(),m),p=new Oe({rasterFunction:h});p.rasterJobHandler=this._rasterJobHandler.instance,await p.open(),this._cachedRasterFunctionJson=(f=this.rasterFunction)==null?void 0:f.toJSON(),this.raster=p}else this.raster=i,this._cachedRasterFunctionJson=null;if(this._cachedRendererJson=null,!r&&!n)return;const{bandIds:o}=this,{bandCount:l}=this.raster.rasterInfo,u=o!=null&&o.length?o.some(m=>m>=l):l>=3;o&&(u||this.renderer.type!=="raster-stretch")&&this._set("bandIds",null),this._configDefaultRenderer("auto")}async updateRenderer(){const{loaded:t,symbolizer:i}=this;if(!t||!i)return;const{rasterInfo:r}=this.raster,n=Ge(r,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),o=n==null?void 0:n.name,l=Ae({...this.renderer.toJSON(),variableName:o});if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(l))return;const u=this._rasterJobHandler.instance;u&&(i.rasterInfo=Le(r,o),i.rendererJSON=l,i.bind(),await u.updateSymbolizer(i),this._cachedRendererJson=l)}async applyRenderer(t,i){const r=t&&t.pixelBlock;if(!(r!=null&&r.pixels&&r.pixels.length>0))return null;let n;await this.updateRenderer();const o=this._rasterJobHandler.instance,l=this.bandIds??[];return n=o?await o.symbolize({...t,simpleStretchParams:i,bandIds:l}):this.symbolizer.symbolize({...t,simpleStretchParams:i,bandIds:l}),n}getTileUrl(t,i,r){return this.raster.datasetFormat==="RasterTileServer"?`${this.url}/tile/${t}/${i}/${r}`:""}getCompatibleTileInfo(t,i,r=!1){if(!this.loaded||i==null)return null;if(r&&t.equals(this.spatialReference))return this.tileInfo;const n=xt(t);return pe.create({size:256,spatialReference:t,origin:n?{x:n.origin[0],y:n.origin[1]}:{x:i.xmin,y:i.ymax}})}getCompatibleFullExtent(t){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(t)||(this._compatibleFullExtent=this.raster.computeExtent(t)),this._compatibleFullExtent):null}async fetchTile(t,i,r,n={}){if(s(this),n.requestAsImageElement){const l=this.getTileUrl(t,i,r);return st(l,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:n.signal}).then(u=>u.data)}const{rasterInfo:o}=this;if(o.multidimensionalInfo!=null&&(n=this.normalizeRasterFetchOptions(n)).multidimensionalDefinition==null){const l=n.tileInfo||o.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(t,i,r,l),pixelBlock:null}}return await this._initJobHandler(),await this.updateRasterFunction(),this.renderer.type==="raster-shaded-relief"&&(n={...n,buffer:{cols:1,rows:1}}),this.raster.fetchTile(t,i,r,n)}async fetchPixels(t,i,r,n={}){return this.rasterInfo.multidimensionalInfo!=null&&(n=this.normalizeRasterFetchOptions(n)).multidimensionalDefinition==null?{extent:t,pixelBlock:null}:(await this._initJobHandler(),await this.updateRasterFunction(),i=Math.round(i),r=Math.round(r),this.raster.fetchPixels(t,i,r,n))}async identify(t,i={}){var l;const{raster:r,rasterInfo:n}=this;if(n.multidimensionalInfo!=null&&!(n.hasMultidimensionalTranspose&&(lt(i.multidimensionalDefinition)||i.transposedVariableName||i.timeExtent))&&(i=this.normalizeRasterFetchOptions(i)).multidimensionalDefinition==null)return{location:t,value:null};const o=(l=this.multidimensionalSubset)==null?void 0:l.areaOfInterest;if(o&&!o.contains(t))throw new P("imagery-tile-mixin:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");return r.identify(t,i)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){var n,o,l;const t=(n=this.rasterInfo)==null?void 0:n.multidimensionalInfo;if(t==null||((o=this.rasterInfo)==null?void 0:o.dataType)!=="standard-time")return!1;const i=this.multidimensionalDefinition,r=(l=i==null?void 0:i[0])==null?void 0:l.variableName;return t.variables.some(u=>u.name===r&&(!(i!=null&&i[0].dimensionName)||u.dimensions.some(c=>c.name==="StdTime")))}getStandardTimeValue(t){return new Date(24*(t-25569)*3600*1e3).toString()}getMultidimensionalSubsetVariables(t){var r;const i=t??((r=this.rasterInfo)==null?void 0:r.multidimensionalInfo);return Vt(this.multidimensionalSubset,i)}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=qe(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset})),this._configDefaultRenderer()}_initJobHandler(){if(this._rasterJobHandler.connectionPromise!=null)return this._rasterJobHandler.connectionPromise;const t=new Ot;return this._rasterJobHandler.connectionPromise=t.initialize().then(()=>{s(this),this._rasterJobHandler.instance=t,this.raster.rasterJobHandler=t,this.renderer&&this.updateRenderer(),this.raster.datasetFormat==="Function"&&this.raster.syncJobHandler()}).catch(()=>{}),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null,this.raster&&(this.raster.rasterJobHandler=null)}_configDefaultInterpolation(){var t;if(this.interpolation==null){s(this);const{raster:i}=this,r=$t(i.rasterInfo,i.tileType,(t=this.sourceJSON)==null?void 0:t.defaultResamplingMethod);this._set("interpolation",r)}}_configDefaultRenderer(t="no"){var c,f;s(this);const{rasterInfo:i}=this.raster;!this.bandIds&&i.bandCount>1&&(this.bandIds=Dt(i));const r=Ge(i,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),n=r==null?void 0:r.name;if(!this.renderer||t==="override"){const m=We(i,{bandIds:this.bandIds,variableName:n}),h=i.statistics,p=h&&h.length>0?h[0]:null,g=(p==null?void 0:p.max)??0,d=(p==null?void 0:p.min)??0;this.raster.datasetFormat==="WCSServer"&&m.type==="raster-stretch"&&(g>1e24||d<-1e24)&&(m.dynamicRangeAdjustment=!0,m.statistics=null,m.stretchType==="none"&&(m.stretchType="min-max")),this.renderer=m}const o=Ae({...this.renderer.toJSON(),variableName:n}),l=Le(i,n);this.symbolizer?(this.symbolizer.rendererJSON=o,this.symbolizer.rasterInfo=l):this.symbolizer=new Kt({rendererJSON:o,rasterInfo:l});const u=this.symbolizer.bind();if(u.success){if(t==="auto"){const{colormap:m}=this.raster.rasterInfo,h=this.renderer;if(m!=null)if(h.type!=="raster-colormap")this._configDefaultRenderer("override");else{const p=We(this.raster.rasterInfo);JSON.stringify(p)!==JSON.stringify(h)&&this._configDefaultRenderer("override")}else if(h.type==="raster-stretch"){const p=(c=this.bandIds)==null?void 0:c.length,g=(f=h.statistics)==null?void 0:f.length;!h.dynamicRangeAdjustment&&g&&p&&g!==p&&this._configDefaultRenderer("override")}}}else Ze.warn("imagery-tile-mixin",u.error||"The given renderer is not supported by the layer."),t==="auto"&&this._configDefaultRenderer("override")}};function s(t){if(!t.raster||!t.rasterInfo)throw new P("imagery-tile","no raster")}return b([v()],e.prototype,"_cachedRendererJson",void 0),b([v()],e.prototype,"_cachedRasterFunctionJson",void 0),b([v()],e.prototype,"_compatibleFullExtent",void 0),b([v()],e.prototype,"_isConstructedFromFunctionRaster",void 0),b([v()],e.prototype,"_rasterJobHandler",void 0),b([v()],e.prototype,"bandIds",void 0),b([v({json:{origins:{service:{read:{source:"copyrightText"}}}}})],e.prototype,"copyright",void 0),b([v({json:{read:!1}})],e.prototype,"fullExtent",null),b([v()],e.prototype,"interpolation",void 0),b([v()],e.prototype,"ioConfig",void 0),b([v({type:[ct],json:{write:!0}})],e.prototype,"multidimensionalDefinition",null),b([v({type:Ct,json:{write:!0}})],e.prototype,"multidimensionalSubset",void 0),b([v()],e.prototype,"raster",void 0),b([v({type:Pe})],e.prototype,"rasterFunction",void 0),b([v()],e.prototype,"rasterInfo",void 0),b([v()],e.prototype,"sourceJSON",void 0),b([v({readOnly:!0,type:q,json:{read:!1}})],e.prototype,"spatialReference",void 0),b([v({json:{read:!1}})],e.prototype,"tileInfo",null),b([v(ot)],e.prototype,"url",null),b([v({types:at})],e.prototype,"renderer",null),b([v()],e.prototype,"symbolizer",void 0),e=b([Q("esri.layers.ImageryTileMixin")],e),e};function Wi(a){const e=a.fields,s=a.records,t=e.some(u=>u.name.toLowerCase()==="oid")?"OBJECTID":"OID",i=[{name:t,type:"esriFieldTypeOID",alias:"OID"}].concat(e.map(u=>({name:u.name,type:"esriFieldType"+u.typeName,alias:u.name}))),r=i.map(u=>u.name),n=[];let o=0,l=0;return s.forEach(u=>{const c={};for(c[t]=o++,l=1;l<r.length;l++)c[r[l]]=u[l-1];n.push({attributes:c})}),{displayFieldName:"",fields:i,features:n}}class ft{static get supportedVersions(){return[5]}static parse(e){const s=new DataView(e),t=3&s.getUint8(0);if(t!==3)return{header:{version:t},recordSet:null};const i=s.getUint32(4,!0),r=s.getUint16(8,!0),n=s.getUint16(10,!0),o={version:t,recordCount:i,headerByteCount:r,recordByteCount:n};let l=32;const u=[],c=[];let f;if(t===3){for(;s.getUint8(l)!==13;)f=String.fromCharCode(s.getUint8(l+11)).trim(),u.push({name:je(new Uint8Array(e,l,11)),type:f,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(f)],length:s.getUint8(l+16)}),l+=32;if(l+=1,u.length>0)for(;c.length<i&&e.byteLength-l>n;){const m=[];s.getUint8(l)===32?(l+=1,u.forEach(h=>{if(h.type==="C")m.push(je(new Uint8Array(e,l,h.length)).trim());else if(h.type==="N")m.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,l,h.length)).trim(),10));else if(h.type==="F")m.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,l,h.length)).trim()));else if(h.type==="D"){const p=String.fromCharCode.apply(null,new Uint8Array(e,l,h.length)).trim();m.push(new Date(parseInt(p.substring(0,4),10),parseInt(p.substring(4,6),10)-1,parseInt(p.substring(6,8),10)))}l+=h.length}),c.push(m)):l+=n}}return{header:o,fields:u,records:c,recordSet:Wi({fields:u,records:c})}}}const re=new Map;re.set("int16","esriFieldTypeSmallInteger"),re.set("int32","esriFieldTypeInteger"),re.set("int64","esriFieldTypeInteger"),re.set("float32","esriFieldTypeSingle"),re.set("float64","esriFieldTypeDouble"),re.set("text","esriFieldTypeString");const et=8;let he=class extends oe{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(e){await this.init();const{data:s}=await this.request(this.url+"/conf.json",{signal:e==null?void 0:e.signal});if(!this._validateHeader(s))throw new P("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:t,rasterInfo:i}=this._parseHeader(s);if(i.dataType==="thematic"){const r=await this._fetchAuxiliaryInformation();i.attributeTable=r}this._set("storageInfo",t),this._set("rasterInfo",i),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(e,s,t,i={}){const{transposeInfo:r}=this.rasterInfo.storageInfo,{transposedVariableName:n}=i,o=!(!r||!n),l=o?0:this.rasterInfo.storageInfo.maximumPyramidLevel-e;if(l<0)return null;const u=this._buildCacheFilePath(l,s,t,i.multidimensionalDefinition,n),c=this._getIndexRecordFromBundle(s,t,o),f=await this.request(u,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:i.signal});if(!f)return null;const m=new Uint8Array(f.data),h=this._getTileEndAndContentType(m,c);if(h.recordSize===0)return null;const p=await this.request(u,{range:{from:h.position,to:h.position+h.recordSize},responseType:"array-buffer",signal:i.signal});if(!p)return null;const[g,d]=this._getTileSize(o);return this.decodePixelBlock(p.data,{width:g,height:d,planes:null,pixelType:null,returnInterleaved:o})}_validateHeader(e){const s=["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"];return e&&e.type==="RasterInfo"&&!s.some(t=>!e[t])}_parseHeader(e){var X;const s=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][e.pixelType],{bandCount:t,histograms:i,colormap:r,blockWidth:n,blockHeight:o,firstPyramidLevel:l,maximumPyramidLevel:u}=e,c=e.statistics&&e.statistics.map(B=>({min:B.min,max:B.max,avg:B.mean,stddev:B.standardDeviation,median:B.median,mode:B.mode})),f=e.extent.spatialReference,m=(X=e.geodataXform)==null?void 0:X.spatialReference,h=new q(f!=null&&f.wkid||f!=null&&f.wkt?f:m);let p=new H({xmin:e.extent.xmin,ymin:e.extent.ymin,xmax:e.extent.xmax,ymax:e.extent.ymax,spatialReference:h});const g=new N({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:h}),d=Math.round((p.xmax-p.xmin)/g.x),x=Math.round((p.ymax-p.ymin)/g.y),y=this._parseTransform(e.geodataXform),w=y?p:null;y&&(p=y.forwardTransform(p),g.x=(p.xmax-p.xmin)/d,g.y=(p.ymax-p.ymin)/x);const I=e.properties??{},R=e.format.toLowerCase().replace("cache/",""),T=new N(e.origin.x,e.origin.y,h);let F,k,_,S;if(r&&r.colors)for(F=[],k=0;k<r.colors.length;k++)_=r.colors[k],S=r.values?r.values[k]:k,F.push([S,255&_,_<<16>>>24,_<<8>>>24,_>>>24]);const M=e.LODInfos,$=[];for(k=0;k<M.levels.length;k++)$.push(new rt({level:M.levels[k],resolution:M.resolutions[k],scale:96/.0254*M.resolutions[k]}));const D=new pe({dpi:96,lods:$,format:R,origin:T,size:[n,o],spatialReference:h}),O={recordSize:et,packetSize:e.packetSize,headerSize:e.packetSize*e.packetSize*et+64},C=[{maxCol:Math.ceil(d/n)-1,maxRow:Math.ceil(x/o)-1,minCol:0,minRow:0}];let E=2;if(u>0)for(k=0;k<u;k++)C.push({maxCol:Math.ceil(d/E/n)-1,maxRow:Math.ceil(x/E/o)-1,minCol:0,minRow:0}),E*=2;const J=e.mdInfo;let V=null;if(J&&I._yxs){const B=I._yxs;V={packetSize:B.PacketSize,tileSize:[B.TileXSize,B.TileYSize]}}return{storageInfo:O,rasterInfo:new ge({width:d,height:x,pixelType:s,bandCount:t,extent:p,nativeExtent:w,transform:y,spatialReference:h,pixelSize:g,keyProperties:I,statistics:c,histograms:i,multidimensionalInfo:J,colormap:F,storageInfo:new ye({blockWidth:n,blockHeight:o,pyramidBlockWidth:n,pyramidBlockHeight:o,origin:T,tileInfo:D,transposeInfo:V,firstPyramidLevel:l,maximumPyramidLevel:u,blockBoundary:C})})}}_parseTransform(e){var t,i;if(!Ri(e))throw new P("cloudraster:open","the data contains unsupported geodata transform types");const s=vi(e);if(s.type==="identity")return null;if(s.type!=="polynomial"||!((t=s.forwardCoefficients)!=null&&t.length)||!((i=s.inverseCoefficients)!=null&&i.length))throw new P("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return s}async _fetchAuxiliaryInformation(e){const s=this.request(this.url+"/conf.vat.json",{signal:e}).then(n=>n.data).catch(()=>null),t=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:e}).then(n=>n.data).catch(()=>null),i=await Promise.all([s,t]);let r;if(i[0]){let n=i[0].fields;const o=i[0].values;if(n&&o){n=n.map(u=>({type:u.name==="OID"?"esriFieldTypeOID":re.get(u.type),name:u.name,alias:u.alias||u.name}));const l=o.map(u=>({attributes:u}));n&&o&&(r={fields:n,features:l})}}return!r&&i[1]&&(r=ft.parse(i[1]).recordSet),ht.fromJSON(r)}_buildCacheFilePath(e,s,t,i,r){const n=this._getPackageSize(!!r),o=Math.floor(s/n)*n,l=Math.floor(t/n)*n,u="R"+this._toHexString4(o)+"C"+this._toHexString4(l);let c="L";c+=e>=10?e.toString():"0"+e.toString();const{multidimensionalInfo:f}=this.rasterInfo,m=i==null?void 0:i[0];if(f==null||!m)return`${this.url}/_alllayers/${c}/${u}.bundle`;let h="_yxs";if(!r){h=f.variables.find(d=>d.name===m.variableName).dimensions[0].values.indexOf(m.values[0]).toString(16);const g=4-h.length;for(let d=0;d<g;d++)h="0"+h;h="S"+h}const p=this._getVariableFolderName(r||m.variableName);return`${this.url}/_alllayers/${p}/${h}/${c}/${u}.bundle`}_getPackageSize(e=!1){const{transposeInfo:s}=this.rasterInfo.storageInfo;return e&&s!=null?s.packetSize??0:this.storageInfo.packetSize}_getTileSize(e=!1){const{storageInfo:s}=this.rasterInfo,{transposeInfo:t}=s;return e&&t!=null?t.tileSize:s.tileInfo.size}_getVariableFolderName(e){return(e=e.trim())===""?"_v":e.replace(/[\{|\}\-]/g,"_").replace("\\*","_v")}_getIndexRecordFromBundle(e,s,t=!1){const i=this._getPackageSize(t),r=i*(e%i)+s%i;if(r<0)throw new Error("Invalid level / row / col");return 20+r*this.storageInfo.recordSize+44}_getTileEndAndContentType(e,s){const t=e.subarray(s,s+8);let i,r=0;for(i=0;i<5;i++)r|=(255&t[i])<<8*i;const n=0xffffffffff&r;for(r=0,i=5;i<8;i++)r|=(255&t[i])<<8*(i-5);return{position:n,recordSize:0xffffffffff&r}}_toHexString4(e){let s=e.toString(16);if(s.length!==4){let t=4-s.length;for(;t-- >0;)s="0"+s}return s}};b([v({readOnly:!0})],he.prototype,"storageInfo",void 0),b([v({type:String,json:{write:!0}})],he.prototype,"datasetFormat",void 0),he=b([Q("esri.layers.support.rasterDatasets.CloudRaster")],he);const qi=he;let fe=class extends oe{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.data=null}async open(e){await this.init();const s=this.data,{pixelBlock:t,statistics:i,histograms:r,name:n,keyProperties:o,nativeExtent:l,transform:u}=this.data,{width:c,height:f,pixelType:m}=t,h=s.extent??new H({xmin:-.5,ymin:.5,xmax:c-.5,ymax:f-.5,spatialReference:new q({wkid:3857})}),p=s.isPseudoSpatialReference??!s.extent,g={x:h.width/c,y:h.height/f},d=new ge({width:c,height:f,pixelType:m,extent:h,nativeExtent:l,transform:u,pixelSize:g,spatialReference:h.spatialReference,bandCount:t.pixels.length,keyProperties:o||{},statistics:i,isPseudoSpatialReference:p,histograms:r});this.createRemoteDatasetStorageInfo(d,512,512),this._set("rasterInfo",d),this.updateTileInfo(),await this._buildInMemoryRaster(t,{width:512,height:512},e),this.datasetName=n,this.url="/InMemory/"+n}fetchRawTile(e,s,t,i={}){const r=this._pixelBlockTiles.get(`${e}/${s}/${t}`);return Promise.resolve(r)}async _buildInMemoryRaster(e,s,t){var c,f;const i=this.rasterInfo.storageInfo.maximumPyramidLevel,r=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:e,tileSize:s,maximumPyramidLevel:i},t):Promise.resolve(yi(e,s,i)),n=this.rasterInfo.statistics!=null,o=this.rasterInfo.histograms!=null,l=n?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:e},t):Promise.resolve(Qt(e)),u=await nt([r,l]);if(!u[0].value&&u[1].value)throw new P("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=u[0].value,n||(this.rasterInfo.statistics=(c=u[1].value)==null?void 0:c.statistics),o||(this.rasterInfo.histograms=(f=u[1].value)==null?void 0:f.histograms)}};b([v({type:String,json:{write:!0}})],fe.prototype,"datasetFormat",void 0),b([v()],fe.prototype,"data",void 0),fe=b([Q("esri.layers.support.rasterDatasets.InMemoryRaster")],fe);const Gi=fe;function ce(a,e){if(!a||!e)return[];let s=e;e.includes("/")?(s=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const t=[];if(e){const r=ce(a,s);for(let n=0;n<r.length;n++)ce(r[n],e).forEach(o=>t.push(o));return t}const i=a.getElementsByTagNameNS("*",s);if(!i||i.length===0)return[];for(let r=0;r<i.length;r++)t.push(i[r]||i.item(r));return t}function U(a,e){if(!a||!e)return null;let s=e;e.includes("/")?(s=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const t=ce(a,s);return t.length>0?e?U(t[0],e):t[0]:null}function K(a,e=null){const s=e?U(a,e):a;let t;return s?(t=s.textContent||s.nodeValue,t?t.trim():null):null}function ji(a,e){const s=ce(a,e),t=[];let i;for(let r=0;r<s.length;r++)i=s[r].textContent||s[r].nodeValue,i&&(i=i.trim(),i!==""&&t.push(i));return t}function Ie(a,e){return ji(a,e).map(s=>Number(s))}function ae(a,e){const s=K(a,e);return Number(s)}function ke(a,e){var i;const s=(i=a==null?void 0:a.nodeName)==null?void 0:i.toLowerCase(),t=e.toLowerCase();return s.slice(s.lastIndexOf(":")+1)===t}function tt(a,e){if(!a||!e)return null;const s=[];for(let t=0;t<a.length;t++)s.push(a[t]),s.push(e[t]);return s}function Ui(a){const e=U(a,"GeodataXform"),s=ve(ae(e,"SpatialReference/WKID")||K(e,"SpatialReference/WKT"));if(e.getAttribute("xsi:type")!=="typens:PolynomialXform")return{spatialReference:s,transform:null};const t=ae(e,"PolynomialOrder")??1,i=Ie(e,"CoeffX/Double"),r=Ie(e,"CoeffY/Double"),n=Ie(e,"InverseCoeffX/Double"),o=Ie(e,"InverseCoeffY/Double"),l=tt(i,r),u=tt(n,o);return{spatialReference:s,transform:l&&u&&l.length&&u.length?new Je({spatialReference:s,polynomialOrder:t,forwardCoefficients:l,inverseCoefficients:u}):null}}function Vi(a){var m;const e=ae(a,"NoDataValue"),s=U(a,"Histograms/HistItem"),t=ae(s,"HistMin"),i=ae(s,"HistMax"),r=ae(s,"BucketCount"),n=(m=K(s,"HistCounts"))==null?void 0:m.split("|").map(h=>Number(h));let o,l,u,c;ce(a,"Metadata/MDI").forEach(h=>{const p=Number(h.textContent??h.nodeValue);switch(h.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":o=p;break;case"STATISTICS_MAXIMUM":l=p;break;case"STATISTICS_MEAN":u=p;break;case"STATISTICS_STDDEV":c=p}});const f=ae(a,"Metadata/SourceBandIndex");return{noDataValue:e,histogram:n!=null&&n.length&&t!=null&&i!=null?{min:t,max:i,size:r||n.length,counts:n}:null,sourceBandIndex:f,statistics:o!=null&&l!=null?{min:o,max:l,avg:u,stddev:c}:null}}function ve(a){if(!a)return null;let e=Number(a);if(!isNaN(e)&&e!==0)return new q({wkid:e});if((a=String(a)).startsWith("COMPD_CS")){if(!a.includes("VERTCS")||!a.includes("GEOGCS")&&!a.startsWith("PROJCS"))return null;const s=a.indexOf("VERTCS"),t=a.indexOf("PROJCS"),i=t>-1?t:a.indexOf("GEOGCS");if(i===-1)return null;const r=a.slice(i,a.lastIndexOf("]",s)+1).trim(),n=a.slice(s,a.lastIndexOf("]")).trim();e=Fe(r);const o=new q(e?{wkid:e}:{wkt:r}),l=Fe(n);return l&&(o.vcsWkid=l),o}return a.startsWith("GEOGCS")||a.startsWith("PROJCS")?(e=Fe(a),new q(e!==0?{wkid:e}:{wkt:a})):null}function Fe(a){var i;const e=a.replace(/\]/g,"[").replace(/\"/g,"").split("[").map(r=>r.trim()).filter(r=>r!==""),s=e[e.length-1].split(","),t=(i=s[0])==null?void 0:i.toLowerCase();if((t==="epsg"||t==="esri")&&a.endsWith('"]]')){const r=Number(s[1]);if(!isNaN(r)&&r!==0)return r}return 0}function Ne(a){var t;if(((t=a==null?void 0:a.documentElement.tagName)==null?void 0:t.toLowerCase())!=="pamdataset")return{};const e={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};a.documentElement.childNodes.forEach(i=>{if(i.nodeType===1){if(ke(i,"SRS")){if(!e.spatialReference){const r=K(i);e.spatialReference=ve(r)}}else if(ke(i,"Metadata"))if(i.getAttribute("domain")==="xml:ESRI"){const{spatialReference:r,transform:n}=Ui(i);e.transform=n,e.spatialReference||(e.spatialReference=r)}else ce(i,"MDI").forEach(r=>e.metadata[r.getAttribute("key")]=K(r));else if(ke(i,"PAMRasterBand")){const r=Vi(i);r.sourceBandIndex!=null&&e.rasterBands[r.sourceBandIndex]==null?e.rasterBands[r.sourceBandIndex]=r:e.rasterBands.push(r)}}});const s=e.rasterBands;if(s.length){const i=!!s[0].statistics;e.statistics=i?s.map(n=>n.statistics).filter(Ce):null;const r=!!s[0].histogram;e.histograms=r?s.map(n=>n.histogram).filter(Ce):null}return e}let Re=class extends oe{async open(a){await this.init();const e=await this._fetchData(a);let{spatialReference:s,statistics:t,histograms:i,transform:r}=await this._fetchAuxiliaryData(a);const n=!s;n&&(s=new q({wkid:3857})),i!=null&&i.length&&t==null&&(t=ze(i));const{width:o,height:l}=e;let u=new H({xmin:-.5,ymin:.5-l,xmax:o-.5,ymax:.5,spatialReference:s});const c=r?r.forwardTransform(u):u;let f=!0;if(r){const h=r.forwardCoefficients;f=h&&h[1]===0&&h[2]===0,f&&(r=null,u=c)}const m=new Gi({data:{extent:c,nativeExtent:u,transform:r,pixelBlock:e,statistics:t,histograms:i,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:n}});await m.open(),m.data=null,this._set("rasterInfo",m.rasterInfo),this._inMemoryRaster=m}fetchRawTile(a,e,s,t={}){return this._inMemoryRaster.fetchRawTile(a,e,s,t)}async _fetchData(a){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:a==null?void 0:a.signal}),s=Zt(e).toUpperCase();if(s!=="JPG"&&s!=="PNG"&&s!=="GIF"&&s!=="BMP")throw new P("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",s);const t=s.toLowerCase(),i=t==="gif"||t==="bmp"||!wt("ios"),r=await this.decodePixelBlock(e,{format:t,useCanvas:i,hasNoZlibMask:!0});if(r==null)throw new P("image-aux-raster:open","the data cannot be decoded");return r}async _fetchAuxiliaryData(a){var u;const e=a==null?void 0:a.signal,s=this.ioConfig.skipExtensions??[],t=s.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:e}),i=this.datasetFormat,r=i==="JPG"?"jgw":i==="PNG"?"pgw":i==="BMP"?"bpw":null,n=r&&s.includes(r)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+r,{responseType:"text",signal:e}),o=await nt([t,n]);if(e!=null&&e.aborted)throw It();const l=Ne((u=o[0].value)==null?void 0:u.data);if(!l.transform){const c=o[1].value?o[1].value.data.split(`
`).slice(0,6).map(f=>Number(f)):null;l.transform=(c==null?void 0:c.length)===6?new Je({forwardCoefficients:[c[4],c[5],c[0],-c[1],c[2],-c[3]]}):null}return l}};b([v({type:String,json:{write:!0}})],Re.prototype,"datasetFormat",void 0),Re=b([Q("esri.layers.support.rasterDatasets.ImageAuxRaster")],Re);const be=Re;let me=class extends oe{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async open(a){var F,k;await this.init();const e=a&&a.signal,s=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:e});s.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const t=s.data;if(this.sourceJSON=t,!t)throw new P("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!t.tileInfo)throw new P("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const i=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=t.cacheType,this.tileType==null&&(i.includes(t.tileInfo.format.toLowerCase())?this.tileType="Map":t.tileInfo.format.toLowerCase()==="lerc"?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=((F=t.name)==null?void 0:F.slice(t.name.indexOf("/")+1))??"";const r=await this._fetchRasterInfo({signal:e});if(r==null)throw new P("image-server-raster:open","cannot initialize image service");const n=this.tileType==="Map"?$i(t.tileInfo,t):pe.fromJSON(t.tileInfo);bt(n);const[o,l]=this._computeMinMaxLOD(r,n),{extent:u,pixelSize:c}=r,f=.5/r.width*c.x,m=Math.max(c.x,c.y),{lods:h}=n;(this.tileType!=="Map"&&t.maxScale!==0||Math.abs(c.x-c.y)>f||!h.some(_=>Math.abs(_.resolution-m)<f))&&(c.x=c.y=o.resolution,r.width=Math.ceil((u.xmax-u.xmin)/c.x-.1),r.height=Math.ceil((u.ymax-u.ymin)/c.y-.1));const p=o.level-l.level,[g,d]=n.size,x=[],y=[];h.forEach((_,S)=>{_.level>=l.level&&_.level<=o.level&&x.push({x:_.resolution,y:_.resolution}),S<h.length-1&&y.push(Math.round(10*_.resolution/h[S+1].resolution)/10)}),x.sort((_,S)=>_.x-S.x);const w=this.computeBlockBoundary(u,g,d,n.origin,x,p),I=x.length>1?x.slice(1):null;let R;t.transposeInfo&&(R={tileSize:[t.transposeInfo.rows,t.transposeInfo.cols],packetSize:((k=r.keyProperties)==null?void 0:k._yxs.PacketSize)??0});const T=y.length<=1||y.length>=3&&y.slice(0,y.length-1).every(_=>_===y[0])?y[0]??2:Math.round(10/(l.resolution/o.resolution)**(-1/p))/10;if(r.storageInfo=new ye({blockWidth:n.size[0],blockHeight:n.size[1],pyramidBlockWidth:n.size[0],pyramidBlockHeight:n.size[1],pyramidResolutions:I,pyramidScalingFactor:T,compression:n.format,origin:n.origin,firstPyramidLevel:1,maximumPyramidLevel:p,tileInfo:n,transposeInfo:R,blockBoundary:w}),this._fixGCSShift(r),this._set("rasterInfo",r),t.capabilities.toLowerCase().includes("tilemap")){const _={tileInfo:r.storageInfo.tileInfo,parsedUrl:St(this.url),url:this.url,tileServers:[],type:"tile"};this._tilemapCache=new Di({layer:_})}}async fetchRawTile(a,e,s,t={}){const{storageInfo:i,extent:r}=this.rasterInfo,{transposeInfo:n}=i,o=n!=null&&!!t.transposedVariableName;if(this._slices&&!o&&t.sliceId==null)return null;const l=o?0:i.maximumPyramidLevel-a+this._levelOffset,u=`${this.url}/tile/${l}/${e}/${s}`,c=this._slices?o?{variable:t.transposedVariableName}:{sliceId:t.sliceId||0}:null,{data:f}=await this.request(u,{query:c,responseType:"array-buffer",signal:t.signal});if(!f)return null;const m=o?n.tileSize:i.tileInfo.size,h=await this.decodePixelBlock(f,{width:m[0],height:m[1],planes:null,pixelType:null,isPoint:this.tileType==="Elevation",returnInterleaved:o,noDataValue:this.rasterInfo.noDataValue});if(h==null)return null;const p=i.blockBoundary[a];if(i.compression!=="jpg"||s>p.minCol&&s<p.maxCol&&e>p.minRow&&e<p.maxRow)return h;const{origin:g,blockWidth:d,blockHeight:x}=i,{x:y,y:w}=this.getPyramidPixelSize(a),I=Math.round((r.xmin-g.x)/y)%d,R=Math.round((r.xmax-g.x)/y)%d||d,T=Math.round((g.y-r.ymax)/w)%x,F=Math.round((g.y-r.ymin)/w)%x||x,k=s===p.minCol?I:0,_=e===p.minRow?T:0,S=s===p.maxCol?R:d,M=e===p.maxRow?F:x;return gi(h,{x:k,y:_},{width:S-k,height:M-_}),h}getSliceIndex(a){if(!this._slices||a==null||a.length===0)return null;const e=a;for(let s=0;s<this._slices.length;s++){const t=this._slices[s].multidimensionalDefinition;if(t.length===e.length&&!t.some(i=>{const r=e.find(n=>i.variableName===n.variableName&&n.dimensionName===i.dimensionName);return r?(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])!==(Array.isArray(r.values[0])?`${r.values[0][0]}-${r.values[0][1]}`:r.values[0]):!0}))return s}return null}async fetchVariableStatisticsHistograms(a,e){const s=this.request(this.url+"/statistics",{query:{variable:a,f:"json"},signal:e}).then(r=>{var n;return(n=r.data)==null?void 0:n.statistics}),t=this.request(this.url+"/histograms",{query:{variable:a,f:"json"},signal:e}).then(r=>{var n;return(n=r.data)==null?void 0:n.histograms}),i=await Promise.all([s,t]);return i[0]&&i[0].forEach(r=>{r.avg=r.mean,r.stddev=r.standardDeviation}),{statistics:i[0]||null,histograms:i[1]||null}}async computeBestPyramidLevelForLocation(a,e={}){if(!this._tilemapCache)return 0;let s=this.identifyPixelLocation(a,0,e.datumTransformation);if(s===null)return null;let t=0;const{maximumPyramidLevel:i}=this.rasterInfo.storageInfo;let r=i-t+this._levelOffset;const n=s.srcLocation;for(;r>=0;){try{if(await this._tilemapCache.fetchAvailability(r,s.row,s.col,e)==="available")break}catch{}if(r--,t++,s=this.identifyPixelLocation(n,t,e.datumTransformation),s===null)return null}return r===-1||s==null?null:t}async _fetchRasterInfo(a){const e=this.sourceJSON;if(this.tileType==="Map"){const n=e.fullExtent||e.extent,o=Math.ceil((n.xmax-n.xmin)/e.pixelSizeX-.1),l=Math.ceil((n.ymax-n.ymin)/e.pixelSizeY-.1),u=q.fromJSON(e.spatialReference||n.spatialReference),c=new N({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:u});return new ge({width:o,height:l,bandCount:3,extent:H.fromJSON(n),spatialReference:u,pixelSize:c,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:s}=a,t=Bt(this.url,this.sourceJSON,{signal:s,query:this.ioConfig.customFetchParameters}),i=e.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:s}).then(n=>n.data&&n.data.slices).catch(()=>null):null,r=await Promise.all([t,i]);return this._slices=r[1],r[0]}_fixScaleInServiceInfo(){const{sourceJSON:a}=this;a.minScale&&a.minScale<0&&(a.minScale=0),a.maxScale&&a.maxScale<0&&(a.maxScale=0)}_fixGCSShift(a){const{extent:e,spatialReference:s}=a;e.xmin>-1&&e.xmax>181&&(s!=null&&s.wkid)&&s.isGeographic&&(a.nativeExtent=a.extent,a.transform=new Ti,a.extent=a.transform.forwardTransform(e))}_computeMinMaxLOD(a,e){const{pixelSize:s}=a,t=.5/a.width*s.x,{lods:i}=e,r=e.lodAt(Math.max.apply(null,i.map(m=>m.level))),n=e.lodAt(Math.min.apply(null,i.map(m=>m.level))),{tileType:o}=this;if(o==="Map")return this._levelOffset=i[0].level,[r,n];if(o==="Raster")return[i.find(m=>m.resolution===s.x)??r,n];const{minScale:l,maxScale:u}=this.sourceJSON;let c=r;u>0&&(c=i.find(m=>Math.abs(m.scale-u)<t),c||(c=i.filter(m=>m.scale>u).sort((m,h)=>m.scale>h.scale?1:-1)[0]??r));let f=n;return l>0&&(f=i.find(m=>Math.abs(m.scale-l)<t)??n,this._levelOffset=f.level-n.level),[c,f]}};b([v({type:String,json:{write:!0}})],me.prototype,"datasetFormat",void 0),b([v()],me.prototype,"tileType",void 0),me=b([Q("esri.layers.support.rasterDatasets.ImageServerRaster")],me);const Xi=me,Y=new Map;Y.set("Int8","s8"),Y.set("UInt8","u8"),Y.set("Int16","s16"),Y.set("UInt16","u16"),Y.set("Int32","s32"),Y.set("UInt32","u32"),Y.set("Float32","f32"),Y.set("Float64","f32"),Y.set("Double64","f32");const te=new Map;te.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),te.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),te.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),te.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let le=class extends oe{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(a){var g;await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const e=a?a.signal:null,s=await this.request(this.url,{responseType:"xml",signal:e}),{rasterInfo:t,files:i}=this._parseHeader(s.data);if(((g=this.ioConfig.skipExtensions)==null?void 0:g.indexOf("aux.xml"))===-1){const d=await this._fetchAuxiliaryData(a);d!=null&&(t.statistics=d.statistics??t.statistics,t.histograms=d.histograms,d.histograms&&t.statistics==null&&(t.statistics=ze(d.histograms)))}this._set("rasterInfo",t),this._files=i;const r=await this.request(i.index,{responseType:"array-buffer",signal:e});this._storageIndex=this._parseIndex(r.data);const{blockWidth:n,blockHeight:o}=this.rasterInfo.storageInfo,l=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:u,height:c}=this.rasterInfo,f=[],m=this._getBandSegmentCount();let h=0,p=-1;for(;h<this._storageIndex.length;){p++;const d=Math.ceil(u/n/l**p)-1,x=Math.ceil(c/o/l**p)-1;h+=(d+1)*(x+1)*m*4,f.push({maxRow:x,maxCol:d,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=f,p>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=p),this.updateTileInfo()}async fetchRawTile(a,e,s,t={}){const{blockWidth:i,blockHeight:r,blockBoundary:n}=this.rasterInfo.storageInfo,o=n[a];if(!o||o.maxRow<e||o.maxCol<s||o.minRow>e||o.minCol>s)return null;const{bandCount:l,pixelType:u}=this.rasterInfo,{ranges:c,actualTileWidth:f,actualTileHeight:m}=this._getTileLocation(a,e,s);if(!c||c.length===0)return null;if(c[0].from===0&&c[0].to===0){const S=new Uint8Array(i*r);return new ee({width:i,height:r,pixels:null,mask:S,validPixelCount:0})}const{bandIds:h}=this.ioConfig,p=this._getBandSegmentCount(),g=[];let d=0;for(d=0;d<p;d++)h&&!h.includes(d)||g.push(this.request(this._files.data,{range:{from:c[d].from,to:c[d].to},responseType:"array-buffer",signal:t.signal}));const x=await Promise.all(g),y=x.map(S=>S.data.byteLength).reduce((S,M)=>S+M),w=new Uint8Array(y);let I=0;for(d=0;d<p;d++)w.set(new Uint8Array(x[d].data),I),I+=x[d].data.byteLength;const R=te.get(this.rasterInfo.storageInfo.compression).decoderFormat,T=await this.decodePixelBlock(w.buffer,{width:i,height:r,format:R,planes:(h==null?void 0:h.length)||l,pixelType:u});if(T==null)return null;let{noDataValue:F}=this.rasterInfo;if(F!=null&&R!=="lerc"&&!T.mask&&(F=F[0],F!=null)){const S=T.width*T.height,M=new Uint8Array(S);if(Math.abs(F)>1e24)for(d=0;d<S;d++)Math.abs((T.pixels[0][d]-F)/F)>1e-6&&(M[d]=1);else for(d=0;d<S;d++)T.pixels[0][d]!==F&&(M[d]=1);T.mask=M}let k=0,_=0;if(f!==i||m!==r){let S=T.mask;if(S)for(d=0;d<r;d++)if(_=d*i,d<m)for(k=f;k<i;k++)S[_+k]=0;else for(k=0;k<i;k++)S[_+k]=0;else for(S=new Uint8Array(i*r),T.mask=S,d=0;d<m;d++)for(_=d*i,k=0;k<f;k++)S[_+k]=1}return T}_parseIndex(a){if(a.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let e,s,t,i,r,n;if(ei){for(s=new Uint8Array(a),i=new ArrayBuffer(a.byteLength),t=new Uint8Array(i),r=0;r<a.byteLength/4;r++)for(n=0;n<4;n++)t[4*r+n]=s[4*r+3-n];e=new Uint32Array(i)}else e=new Uint32Array(a);return e}_getBandSegmentCount(){return te.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(a,e,s){const{blockWidth:t,blockHeight:i,pyramidScalingFactor:r}=this.rasterInfo.storageInfo,{width:n,height:o}=this.rasterInfo,l=this._getBandSegmentCount();let u,c,f,m=0,h=0;for(f=0;f<a;f++)h=r**f,u=Math.ceil(n/t/h),c=Math.ceil(o/i/h),m+=u*c;h=r**a,u=Math.ceil(n/t/h),c=Math.ceil(o/i/h),m+=e*u+s,m*=4*l;const p=this._storageIndex.subarray(m,m+4*l);let g=0,d=0;const x=[];for(let y=0;y<l;y++)g=p[4*y]*2**32+p[4*y+1],d=g+p[4*y+2]*2**32+p[4*y+3],x.push({from:g,to:d});return{ranges:x,actualTileWidth:s<u-1?t:Math.ceil(n/h)-t*(u-1),actualTileHeight:e<c-1?i:Math.ceil(o/h)-i*(c-1)}}_parseHeader(a){const e=U(a,"MRF_META/Raster");if(!e)throw new P("mrf:open","not a valid MRF format");const s=U(e,"Size"),t=parseInt(s.getAttribute("x"),10),i=parseInt(s.getAttribute("y"),10),r=parseInt(s.getAttribute("c"),10),n=(K(e,"Compression")||"none").toLowerCase();if(!te.has(n))throw new P("mrf:open","currently does not support compression "+n);const o=K(e,"DataType")||"UInt8",l=Y.get(o);if(l==null)throw new P("mrf:open","currently does not support pixel type "+o);const u=U(e,"PageSize"),c=parseInt(u.getAttribute("x"),10),f=parseInt(u.getAttribute("y"),10),m=U(e,"DataValues");let h,p;if(m&&(p=m.getAttribute("NoData"),p!=null&&(h=p.trim().split(" ").map(M=>parseFloat(M)))),U(a,"MRF_META/CachedSource"))throw new P("mrf:open","currently does not support MRF referencing other data files");const g=U(a,"MRF_META/GeoTags"),d=U(g,"BoundingBox");let x,y=!1;if(d!=null){const M=parseFloat(d.getAttribute("minx")),$=parseFloat(d.getAttribute("miny")),D=parseFloat(d.getAttribute("maxx")),O=parseFloat(d.getAttribute("maxy")),C=K(g,"Projection")||"";let E=q.WGS84;if(C!=="LOCAL_CS[]")if(C.toLowerCase().startsWith("epsg:")){const J=Number(C.slice(5));isNaN(J)||J===0||(E=new q({wkid:J}))}else E=ve(C)??q.WGS84;else y=!0,E=new q({wkid:3857});x=new H(M,$,D,O),x.spatialReference=E}else y=!0,x=new H({xmin:-.5,ymin:.5-i,xmax:t-.5,ymax:.5,spatialReference:new q({wkid:3857})});const w=U(a,"MRF_META/Rsets"),I=parseInt(w&&w.getAttribute("scale")||"2",10),R=x.spatialReference,T=new ye({origin:new N({x:x.xmin,y:x.ymax,spatialReference:R}),blockWidth:c,blockHeight:f,pyramidBlockWidth:c,pyramidBlockHeight:f,compression:n,pyramidScalingFactor:I}),F=new N({x:x.width/t,y:x.height/i,spatialReference:R}),k=new ge({width:t,height:i,extent:x,isPseudoSpatialReference:y,spatialReference:R,bandCount:r,pixelType:l,pixelSize:F,noDataValue:h,storageInfo:T}),_=K(a,"datafile"),S=K(a,"IndexFile");return{rasterInfo:k,files:{mrf:this.url,index:S||this.url.replace(".mrf",".idx"),data:_||this.url.replace(".mrf",te.get(n).blobExtension)}}}async _fetchAuxiliaryData(a){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:a==null?void 0:a.signal});return Ne(e)}catch{return null}}};b([v()],le.prototype,"_files",void 0),b([v()],le.prototype,"_storageIndex",void 0),b([v({type:String,json:{write:!0}})],le.prototype,"datasetFormat",void 0),le=b([Q("esri.layers.support.rasterIO.MRFRaster")],le);const Yi=le,Me=(a,e)=>{var s;return(s=a.get(e))==null?void 0:s.values},ue=(a,e)=>{var s,t;return(t=(s=a.get(e))==null?void 0:s.values)==null?void 0:t[0]};let ne=class extends oe{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(a){await this.init();const e=a?a.signal:null,{data:s}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:e});if(!s)throw new P("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:t,firstIFDPos:i,isBigTiff:r}=ti(s),n=[];await this._readIFDs(n,s,t,i,0,r?8:4,e);const{imageInfo:o,rasterInfo:l}=this._parseIFDs(n),u=ii(n),c=si(n);if(this._headerInfo={littleEndian:t,isBigTiff:r,ifds:n,pyramidIFDs:u,maskIFDs:c,...o},this._set("rasterInfo",l),!o.isSupported)throw new P("tiffraster:open","this tiff is not supported: "+o.message);if(!o.tileWidth)throw new P("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");const{skipExtensions:f=[]}=this.ioConfig;if(!f.includes("aux.xml")){const m=await this._fetchAuxiliaryMetaData(a);m!=null&&this._processPAMInfo(m,l)}f.includes("vat.dbf")||l.bandCount!==1||l.pixelType!=="u8"||(l.attributeTable=await this._fetchAuxiliaryTable(a),l.attributeTable!=null&&(l.keyProperties.DataType="thematic")),this.updateTileInfo()}async fetchRawTile(a,e,s,t={}){var r;if(!((r=this._headerInfo)!=null&&r.isSupported)||this.isBlockOutside(a,e,s))return null;const i=await this._fetchRawTiffTile(a,e,s,!1,t);if(i!=null&&this._headerInfo.hasMaskBand){const n=await this._fetchRawTiffTile(a,e,s,!0,t);n!=null&&n.pixels[0]instanceof Uint8Array&&(i.mask=n.pixels[0])}return i}_parseIFDs(a){var $,D;const e=ri(a),{width:s,height:t,tileWidth:i,tileHeight:r,planes:n,pixelType:o,compression:l,firstPyramidLevel:u,maximumPyramidLevel:c,pyramidBlockWidth:f,pyramidBlockHeight:m,tileBoundary:h,affine:p,metadata:g}=e,d=(($=e.extent.spatialReference)==null?void 0:$.wkt)||((D=e.extent.spatialReference)==null?void 0:D.wkid);let x=ve(d),y=!!e.isPseudoGeographic;x==null&&(y=!0,x=new q({wkid:3857}));const w=new H({...e.extent,spatialReference:x}),I=new N(w?{x:w.xmin,y:w.ymax,spatialReference:x}:{x:0,y:0}),R=new ye({blockWidth:i,blockHeight:r,pyramidBlockWidth:f,pyramidBlockHeight:m,compression:l,origin:I,firstPyramidLevel:u,maximumPyramidLevel:c,blockBoundary:h}),T=new N({x:(w.xmax-w.xmin)/s,y:(w.ymax-w.ymin)/t,spatialReference:x}),F=g?{BandProperties:g.bandProperties,DataType:g.dataType}:{};let k=null;const _=ue(a[0],"PHOTOMETRICINTERPRETATION"),S=Me(a[0],"COLORMAP");if(_<=3&&(S==null?void 0:S.length)>3&&S.length%3==0){k=[];const O=S.length/3;for(let C=0;C<O;C++)k.push([C,S[C]>>>8,S[C+O]>>>8,S[C+2*O]>>>8])}const M=new ge({width:s,height:t,bandCount:n,pixelType:o,pixelSize:T,storageInfo:R,spatialReference:x,isPseudoSpatialReference:y,keyProperties:F,extent:w,colormap:k,statistics:g?g.statistics:null});return p!=null&&p.length&&(M.nativeExtent=new H({xmin:-.5,ymin:.5-t,xmax:s-.5,ymax:.5,spatialReference:x}),M.transform=new Je({polynomialOrder:1,forwardCoefficients:[p[2]+p[0]/2,p[5]-p[3]/2,p[0],p[3],-p[1],-p[4]]}),M.extent=M.transform.forwardTransform(M.nativeExtent),M.pixelSize=new N({x:(w.xmax-w.xmin)/s,y:(w.ymax-w.ymin)/t,spatialReference:x}),R.origin.x=-.5,R.origin.y=.5),{imageInfo:e,rasterInfo:M}}_processPAMInfo(a,e){if(e.statistics=a.statistics??e.statistics,e.histograms=a.histograms,a.histograms&&e.statistics==null&&(e.statistics=ze(a.histograms)),a.transform&&e.transform==null){e.transform=a.transform,e.nativeExtent=e.extent;const s=e.transform.forwardTransform(e.nativeExtent);e.pixelSize=new N({x:(s.xmax-s.xmin)/e.width,y:(s.ymax-s.ymin)/e.height,spatialReference:e.spatialReference}),e.extent=s}e.isPseudoSpatialReference&&a.spatialReference&&(e.spatialReference=a.spatialReference,e.extent.spatialReference=e.nativeExtent.spatialReference=e.storageInfo.origin.spatialReference=e.spatialReference)}async _readIFDs(a,e,s,t,i,r=4,n){if(!t)return null;(t>=e.byteLength||t<0)&&(e=(await this.request(this.url,{range:{from:t+i,to:t+i+this._bufferSize},responseType:"array-buffer",signal:n})).data,i=t+i,t=0);const o=await this._readIFD(e,s,t,i,xe.TIFF_TAGS,r,n);if(a.push(o.ifd),!o.nextIFD)return null;await this._readIFDs(a,e,s,o.nextIFD-i,i,r,n)}async _readIFD(a,e,s,t,i=xe.TIFF_TAGS,r=4,n){var l,u;if(!a)return null;const o=ni(a,e,s,t,i,r);if(o.success){const c=[];if((l=o.ifd)==null||l.forEach(f=>{f.values||c.push(f)}),c.length>0){const f=c.map(h=>h.offlineOffsetSize).filter(Ce),m=Math.min.apply(null,f.map(h=>h[0]));if(Math.min.apply(null,f.map(h=>h[0]+h[1]))-m<=this._bufferSize){const{data:h}=await this.request(this.url,{range:{from:m,to:m+this._bufferSize},responseType:"array-buffer",signal:n});a=h,t=m,c.forEach(p=>ai(a,e,p,t))}}if((u=o.ifd)!=null&&u.has("GEOKEYDIRECTORY")){const f=o.ifd.get("GEOKEYDIRECTORY"),m=f==null?void 0:f.values;if(m&&m.length>4){const h=m[0]+"."+m[1]+"."+m[2],p=await this._readIFD(a,e,f.valueOffset+6-t,t,xe.GEO_KEYS,2,n);f.data=p.ifd,f.data&&f.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[h]})}}return o}if(o.requiredBufferSize&&o.requiredBufferSize!==a.byteLength)return(a=(await this.request(this.url,{range:{from:t,to:t+o.requiredBufferSize+4},responseType:"array-buffer",signal:n})).data).byteLength<o.requiredBufferSize?null:this._readIFD(a,e,0,t,xe.TIFF_TAGS,4,n)}async _fetchRawTiffTile(a,e,s,t,i={}){const r=this._getTileLocation(a,e,s,t);if(!r)return null;const{ranges:n,actualTileWidth:o,actualTileHeight:l,ifd:u}=r,c=n.map(T=>this.request(this.url,{range:T,responseType:"array-buffer",signal:i.signal})),f=await Promise.all(c),m=f.map(T=>T.data.byteLength).reduce((T,F)=>T+F),h=f.length===1?f[0].data:new ArrayBuffer(m),p=[0],g=[0];if(f.length>1){const T=new Uint8Array(h);for(let F=0,k=0;F<f.length;F++){const _=f[F].data;T.set(new Uint8Array(_),k),p[F]=k,k+=_.byteLength,g[F]=_.byteLength}}const{blockWidth:d,blockHeight:x}=this.getBlockWidthHeight(a),y=await this.decodePixelBlock(h,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:u,offsets:p,sizes:g},width:d,height:x,planes:null,pixelType:null});if(y==null)return null;let w,I,R;if(o!==d||l!==x){let T=y.mask;if(T)for(w=0;w<x;w++)if(R=w*d,w<l)for(I=o;I<d;I++)T[R+I]=0;else for(I=0;I<d;I++)T[R+I]=0;else for(T=new Uint8Array(d*x),y.mask=T,w=0;w<l;w++)for(R=w*d,I=0;I<o;I++)T[R+I]=1}return y}_getTileLocation(a,e,s,t=!1){const{firstPyramidLevel:i,blockBoundary:r}=this.rasterInfo.storageInfo,n=a===0?0:a-(i-1),{_headerInfo:o}=this;if(!o)return null;const l=t?o.maskIFDs[n]:n===0?o==null?void 0:o.ifds[0]:o==null?void 0:o.pyramidIFDs[n-1];if(!l)return null;const u=oi(l,o),c=Me(l,"TILEOFFSETS");if(c===void 0)return null;const f=Me(l,"TILEBYTECOUNTS"),{minRow:m,minCol:h,maxRow:p,maxCol:g}=r[n];if(e>p||s>g||e<m||s<h)return null;const d=ue(l,"IMAGEWIDTH"),x=ue(l,"IMAGELENGTH"),y=ue(l,"TILEWIDTH"),w=ue(l,"TILELENGTH"),I=u?this.rasterInfo.bandCount:1,R=I*e*(g+1)+s,T=[{from:c[R],to:c[R+I-1]+f[R+I-1]-1}];if(u){let _=!0;for(let S=0;S<I;S++)if(c[R+S]+f[R+S]!==c[R+S+1]){_=!1;break}if(!_)for(let S=0;S<I;S++)T[S]={from:c[R+S],to:c[R+S]+f[R+S]-1}}const F=c[R],k=f[R];return F==null||k==null?null:{ranges:T,ifd:l,actualTileWidth:s===g&&d%y||y,actualTileHeight:e===p&&x%w||w}}async _fetchAuxiliaryMetaData(a){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:a==null?void 0:a.signal});return Ne(e)}catch{return null}}async _fetchAuxiliaryTable(a){try{const{data:e}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:a==null?void 0:a.signal}),s=ft.parse(e);return s!=null&&s.recordSet?ht.fromJSON(s.recordSet):null}catch{return null}}};b([v()],ne.prototype,"_files",void 0),b([v()],ne.prototype,"_headerInfo",void 0),b([v()],ne.prototype,"_bufferSize",void 0),b([v({type:String,json:{write:!0}})],ne.prototype,"datasetFormat",void 0),ne=b([Q("esri.layers.support.rasterDatasets.TIFFRaster")],ne);const Ki=ne,W=new Map;W.set("CRF",{desc:"Cloud Raster Format",constructor:qi}),W.set("MRF",{desc:"Meta Raster Format",constructor:Yi}),W.set("TIFF",{desc:"GeoTIFF",constructor:Ki}),W.set("RasterTileServer",{desc:"Raster Tile Server",constructor:Xi}),W.set("JPG",{desc:"JPG Raster Format",constructor:be}),W.set("PNG",{desc:"PNG Raster Format",constructor:be}),W.set("GIF",{desc:"GIF Raster Format",constructor:be}),W.set("BMP",{desc:"BMP Raster Format",constructor:be});class Qi{static get supportedFormats(){const e=new Set;return W.forEach((s,t)=>e.add(t)),e}static async open(e){const{url:s,ioConfig:t,sourceJSON:i}=e;let r=e.datasetFormat;r==null&&s.lastIndexOf(".")&&(r=s.slice(s.lastIndexOf(".")+1).toUpperCase()),r==="OVR"||r==="TIF"?r="TIFF":r!=="JPG"&&r!=="JPEG"&&r!=="JFIF"||(r="JPG"),s.toLowerCase().includes("/imageserver")&&!s.toLowerCase().includes("/wcsserver")&&(r="RasterTileServer");const n={url:s,sourceJSON:i,datasetFormat:r,ioConfig:t??{bandIds:null,sampling:null}};let o,l;if(r&&this.supportedFormats.has(r)){if(r==="CRF"&&!(t!=null&&t.enableCRF))throw new P("rasterfactory:open",`cannot open raster: ${s}`);return o=W.get(r).constructor,l=new o(n),await l.open({signal:e.signal}),l}if(r)throw new P("rasterfactory:open","not a supported format "+r);const u=Array.from(W.keys());let c=0;const f=()=>(r=u[c++],r&&(r!=="CRF"||t!=null&&t.enableCRF)?(o=W.get(r).constructor,l=new o(n),l.open({signal:e.signal}).then(()=>l).catch(()=>f())):null);return f()}static register(e,s,t){W.has(e.toUpperCase())||W.set(e.toUpperCase(),{desc:s,constructor:t})}}let z=class extends At(Ci(ki(Fi(Lt(Li(Pi(Ht(Mi(Nt(Mt)))))))))){constructor(...a){super(...a),this._primaryRasters=null,this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null}normalizeCtorArgs(a,e){return typeof a=="string"?{url:a,...e}:a}load(a){const e=a!=null?a.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},a).catch(Rt).then(()=>this._openRaster(e))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){var o;let a=[new de({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"})];const{rasterInfo:e}=this,s=e==null?void 0:e.attributeTable,t=s!=null?s.fields:null,i="Raster.";if(t){const l=t.filter(u=>u.type!=="oid"&&u.name.toLowerCase()!=="value").map(u=>{const c=u.clone();return c.name=i+u.name,c});a=a.concat(l)}const r=e==null?void 0:e.dataType,n=e==null?void 0:e.multidimensionalInfo;if((r==="vector-magdir"||r==="vector-uv")&&n!=null){const l=(o=n.variables[0].unit)==null?void 0:o.trim(),u="Magnitude"+(l?` (${l})`:"");a.push(new de({name:"Raster.Magnitude",alias:u,domain:null,editable:!1,type:"double"})),a.push(new de({name:"Raster.Direction",alias:"Direction (°)",domain:null,editable:!1,type:"double"}))}return a}set renderer(a){this._set("renderer",a),this.updateRenderer()}readRenderer(a,e,s){const t=e&&e.layerDefinition&&e.layerDefinition.drawingInfo&&e.layerDefinition.drawingInfo.renderer,i=Et(t,s)||void 0;if(i!=null)return i}createPopupTemplate(a){return Oi({fields:this.rasterFields,title:this.title},a)}async generateRasterInfo(a,e){if(!(a=Ee(Pe,a)))return this._primaryRasters[0].rasterInfo;try{const s={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach(r=>s[r.url]=r);const t=De(a.toJSON(),s),i=new Oe({rasterFunction:t});return await i.open(e),i.rasterInfo}catch{return null}}write(a,e){const{raster:s}=this;if(this.loaded?s.datasetFormat==="RasterTileServer"&&(s.tileType==="Raster"||s.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(a,e);if(e&&e.messages){const t=`${e.origin}/${e.layerContainerType||"operational-layers"}`;e.messages.push(new P("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${t}'`,{layer:this}))}return null}async _openRaster(a){let e=!1;if(this.raster)this.raster.rasterInfo||await this.raster.open(),this.raster.datasetFormat==="Function"?(e=!0,this._primaryRasters=this.raster.primaryRasters.rasters):this._primaryRasters=[this.raster],this.url=this.raster.url;else{const{rasterFunction:t}=this,i=[this.url];t&&_i(t.toJSON(),i);const r=await Promise.all(i.map(o=>Qi.open({url:o,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:a}))),n=r.findIndex(o=>o==null);if(n>-1)throw new P("imagery-tile-layer:open",`cannot open raster: ${i[n]}`);if(this._primaryRasters=r,t){const o={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach(c=>o[c.url]=c);const l=De(t.rasterFunctionDefinition??t.toJSON(),o),u=new Oe({rasterFunction:l});try{await u.open(),this.raster=u}catch(c){const f=Be.getLogger(this.declaredClass);c instanceof P&&f.error("imagery-tile-layer:open",c.message),f.warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=r[0]}}else this.raster=r[0]}const s=this.raster.rasterInfo;if(!s)throw new P("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("rasterInfo",e?s:this._primaryRasters[0].rasterInfo),this._set("spatialReference",s.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null){const t=this.raster.tileType==="Map"&&this.sourceJSON.minLOD!=null&&this.sourceJSON.maxLOD!=null?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(t,{origin:"service"})}this.title||(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(vt(()=>this.customParameters,t=>{this.raster&&(this.raster.ioConfig.customFetchParameters=t)}))}};b([v()],z.prototype,"_primaryRasters",void 0),b([v({type:[Tt],json:{write:{overridePolicy(){var a;return{enabled:!this.loaded||this.raster.tileType==="Raster"||((a=this.bandIds)==null?void 0:a.join(","))!=="0,1,2"}}}}})],z.prototype,"bandIds",void 0),b([v({json:{write:{overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"||this.interpolation!=="bilinear"}}}}}),_t(zt)],z.prototype,"interpolation",void 0),b([v(Wt)],z.prototype,"legendEnabled",void 0),b([v({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],z.prototype,"isReference",void 0),b([v({type:["show","hide"]})],z.prototype,"listMode",void 0),b([v({json:{read:!0,write:!0}})],z.prototype,"blendMode",void 0),b([v()],z.prototype,"sourceJSON",void 0),b([v({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],z.prototype,"version",void 0),b([v({readOnly:!0,json:{read:!1}})],z.prototype,"type",void 0),b([v({type:["ArcGISTiledImageServiceLayer"]})],z.prototype,"operationalLayerType",void 0),b([v({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(a,e)=>!e.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(a,e,s){e[s]=!a}}}})],z.prototype,"popupEnabled",void 0),b([v({type:kt,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],z.prototype,"popupTemplate",void 0),b([v({readOnly:!0})],z.prototype,"defaultPopupTemplate",null),b([v({readOnly:!0,type:[de]})],z.prototype,"fields",void 0),b([v({readOnly:!0,type:[de]})],z.prototype,"rasterFields",null),b([v({types:at,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){var e;const a=((e=this.renderer)==null?void 0:e.type)==="raster-stretch"&&this.renderer.stretchType==="none"&&!this.renderer.useGamma;return{enabled:!this.loaded||this.raster.tileType==="Raster"||!a}}},origins:{"web-scene":{types:Jt,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:a=>({enabled:a&&a.type!=="vector-field"&&a.type!=="flow"})}}}}})],z.prototype,"renderer",null),b([Ft("renderer")],z.prototype,"readRenderer",null),z=b([Q("esri.layers.ImageryTileLayer")],z);const Ys=z;export{Ys as default};
