import{b6 as a,K as o,e as r,y as l,a as n}from"./index-0b6846a6.js";import{n as p}from"./LayerView3D-c9d7b31e.js";import{n as h}from"./TiledLayerView3D-566fa078.js";import{d as u}from"./LayerView-4bb15203.js";import{i as m}from"./RefreshableLayerView-d9864e69.js";import{S as f,U as g}from"./MapServiceLayerViewHelper-99bd9524.js";import{r as d}from"./drapedUtils-b843b884.js";import"./floorFilterUtils-080a7cd2.js";import"./normalizeUtils-671b6bae.js";import"./normalizeUtilsCommon-dd4bd041.js";import"./sql-6bd3f59b.js";import"./sublayerUtils-fc3e791f.js";import"./popupUtils-d0cff994.js";let i=class extends m(h(p(u))){constructor(){super(...arguments),this.type="tile-3d",this._popupHighlightHelper=null}get imageFormatIsOpaque(){return this.layer.tileInfo.format==="jpg"}get hasMixedImageFormats(){return this.layer.tileInfo.format==="mixed"}get tileInfo(){return this.layer.tileInfo}get dataLevelRange(){if(this.tileInfo){const e=this.tileInfo.lods,t=e[0].scale,s=e[e.length-1].scale;return this.levelRangeFromScaleRange(t,s)}return{minLevel:0,maxLevel:0}}initialize(){if(this.layer.type==="web-tile"){const e=this.layer.get("fullExtent.spatialReference"),t=this.layer.get("tileInfo.spatialReference");if(e==null||t==null||!a(e,t)){const s=this.layer.originOf("fullExtent")==="defaults"||this.layer.fullExtent==null?"SceneView requires fullExtent to be specified by the user on WebTileLayer":"SceneView requires fullExtent to be specified in the same spatial reference as tileInfo on WebTileLayer";this.addResolvingPromise(Promise.reject(new o("layerview:incompatible-fullextent",s)))}}f(this,this.layer)&&(this._popupHighlightHelper=new g({createFetchPopupFeaturesQueryGeometry:(e,t)=>d(e,t,this.view),layerView:this,updatingHandles:this.updatingHandles})),this._addTilingSchemeMatchPromise()}destroy(){var e;(e=this._popupHighlightHelper)==null||e.destroy()}async fetchPopupFeatures(e,t){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(e,t):[]}async doRefresh(){this.suspended||this.emit("data-changed")}};r([l()],i.prototype,"imageFormatIsOpaque",null),r([l()],i.prototype,"hasMixedImageFormats",null),r([l()],i.prototype,"layer",void 0),r([l()],i.prototype,"tileInfo",null),r([l()],i.prototype,"dataLevelRange",null),i=r([n("esri.views.3d.layers.TileLayerView3D")],i);const E=i;export{E as default};
