import{ae as r,af as i,ai as h,ep as w,be as S,bf as b,ct as O,m as F,bF as _,hx as I,ff as C,bt as N,Z as q,du as L,E as y}from"./index-a9c4c008.js";import j from"./FeatureLayer-b3255eac.js";import{F as J}from"./FeatureSet-bb4ca057.js";import{d as P}from"./clientSideDefaults-0d467496.js";import{Q as u}from"./Query-d0047f01.js";import"./UniqueValueRenderer-612cb004.js";import"./LegendOptions-2499ed1a.js";import"./diffUtils-abe9f3bb.js";import"./SizeVariable-21c037cb.js";import"./colorRamps-a8ae4226.js";import"./sizeVariableUtils-2914222a.js";import"./lengthUtils-73ca5ae7.js";import"./ColorStop-3619cfe4.js";import"./jsonUtils-b329e9d4.js";import"./styleUtils-514bbf43.js";import"./featureFlags-a86437c8.js";import"./jsonUtils-bd0bdc00.js";import"./DictionaryLoader-d0105348.js";import"./LRUCache-9a513454.js";import"./MemCache-75bedf1f.js";import"./FieldsIndex-58671a99.js";import"./heatmapUtils-dfe044d0.js";import"./vec4-3dd523e8.js";import"./vec4f64-efdcb593.js";import"./MultiOriginJSONSupport-196fcb0e.js";import"./sql-4d7dca2e.js";import"./FeatureLayerBase-48864b87.js";import"./Field-b1d8a9b1.js";import"./fieldType-ca53e87a.js";import"./commonProperties-683e532f.js";import"./ElevationInfo-c5dc6698.js";import"./AttachmentQuery-671eea20.js";import"./RelationshipQuery-ec67eec9.js";import"./serviceCapabilitiesUtils-ac150fd2.js";import"./editsZScale-e481307c.js";import"./queryZScale-471b0dc8.js";import"./APIKeyMixin-cc81d0ae.js";import"./ArcGISService-005a73dc.js";import"./BlendLayer-09dd0b47.js";import"./jsonUtils-7f75d4eb.js";import"./parser-e1ff8548.js";import"./_commonjsHelpers-725317a4.js";import"./CustomParametersMixin-e393829c.js";import"./EditBusLayer-c4aa75bb.js";import"./FeatureReductionLayer-93fe1e80.js";import"./FeatureEffect-f33db1b4.js";import"./clusterUtils-223e1cf4.js";import"./labelingInfo-0a4a299a.js";import"./labelUtils-d32d5ce0.js";import"./defaultsJSON-b396ba80.js";import"./OperationalLayer-58eaf5ba.js";import"./OrderedLayer-e3e3401b.js";import"./PortalLayer-235cd1fe.js";import"./portalItemUtils-6670776d.js";import"./RefreshableLayer-1c8a9fe5.js";import"./ScaleRangeLayer-10088de5.js";import"./TemporalLayer-442d9ff7.js";import"./FeatureTemplate-8216f4af.js";import"./FeatureType-f065aa3e.js";import"./fieldProperties-8f8e4177.js";import"./versionUtils-7295a12b.js";import"./styleUtils-afa5cc7a.js";import"./TopFeaturesQuery-cd80eee2.js";import"./popupUtils-d7e116e7.js";import"./QueryEngineCapabilities-60118ddb.js";let n=class extends w{constructor(e){super(e),this.type="csv",this.refresh=S(async t=>{await this.load();const{extent:a,timeExtent:s}=await this._connection.invoke("refresh",t);return a&&(this.sourceJSON.extent=a),s&&(this.sourceJSON.timeInfo.timeExtent=[s.start,s.end]),{dataChanged:!0,updates:{extent:this.sourceJSON.extent,timeInfo:this.sourceJSON.timeInfo}}})}load(e){const t=e!=null?e.signal:null;return this.addResolvingPromise(this._startWorker(t)),Promise.resolve(this)}destroy(){var e;(e=this._connection)==null||e.close(),this._connection=null}async openPorts(){return await this.load(),this._connection.openPorts()}async queryFeatures(e,t={}){await this.load(t);const a=await this._connection.invoke("queryFeatures",e?e.toJSON():null,t);return J.fromJSON(a)}async queryFeaturesJSON(e,t={}){return await this.load(t),this._connection.invoke("queryFeatures",e?e.toJSON():null,t)}async queryFeatureCount(e,t={}){return await this.load(t),this._connection.invoke("queryFeatureCount",e?e.toJSON():null,t)}async queryObjectIds(e,t={}){return await this.load(t),this._connection.invoke("queryObjectIds",e?e.toJSON():null,t)}async queryExtent(e,t={}){await this.load(t);const a=await this._connection.invoke("queryExtent",e?e.toJSON():null,t);return{count:a.count,extent:b.fromJSON(a.extent)}}async querySnapping(e,t={}){return await this.load(t),this._connection.invoke("querySnapping",e,t)}async _startWorker(e){this._connection=await O("CSVSourceWorker",{strategy:F("feature-layers-workers")?"dedicated":"local",signal:e});const{url:t,delimiter:a,fields:s,latitudeField:f,longitudeField:g,spatialReference:p,timeInfo:d}=this.loadOptions,c=await this._connection.invoke("load",{url:t,customParameters:this.customParameters,parsingOptions:{delimiter:a,fields:s==null?void 0:s.map(v=>v.toJSON()),latitudeField:f,longitudeField:g,spatialReference:p==null?void 0:p.toJSON(),timeInfo:d==null?void 0:d.toJSON()}},{signal:e});this.locationInfo=c.locationInfo,this.sourceJSON=c.layerDefinition,this.delimiter=c.delimiter}};r([i()],n.prototype,"type",void 0);r([i()],n.prototype,"loadOptions",void 0);r([i()],n.prototype,"customParameters",void 0);r([i()],n.prototype,"locationInfo",void 0);r([i()],n.prototype,"sourceJSON",void 0);r([i()],n.prototype,"delimiter",void 0);n=r([h("esri.layers.graphics.sources.CSVSource")],n);function m(l,e){throw new y(e,`CSVLayer (title: ${l.title}, id: ${l.id}) cannot be saved to a portal item`)}let o=class extends j{constructor(...e){super(...e),this.geometryType="point",this.capabilities=P(!1,!1),this.delimiter=null,this.editingEnabled=!1,this.fields=null,this.latitudeField=null,this.locationType="coordinates",this.longitudeField=null,this.operationalLayerType="CSV",this.outFields=["*"],this.path=null,this.spatialReference=N.WGS84,this.source=null,this.type="csv"}normalizeCtorArgs(e,t){return typeof e=="string"?{url:e,...t}:e}load(e){const t=e!=null?e.signal:null,a=this.loadFromPortal({supportedTypes:["CSV"],supportsData:!1},e).catch(q).then(async()=>this.initLayerProperties(await this.createGraphicsSource(t)));return this.addResolvingPromise(a),Promise.resolve(this)}get isTable(){return this.loaded&&this.geometryType==null}readWebMapLabelsVisible(e,t){return t.showLabels!=null?t.showLabels:!!(t.layerDefinition&&t.layerDefinition.drawingInfo&&t.layerDefinition.drawingInfo.labelingInfo)}set url(e){if(!e){this._set("url",e);return}const t=L(e);this._set("url",t.path),t.query&&(this.customParameters={...this.customParameters,...t.query})}async createGraphicsSource(e){const t=new n({loadOptions:{delimiter:this.delimiter,fields:this.fields,latitudeField:this.latitudeField??void 0,longitudeField:this.longitudeField??void 0,spatialReference:this.spatialReference??void 0,timeInfo:this.timeInfo??void 0,url:this.url},customParameters:this.customParameters??void 0});return this._set("source",t),await t.load({signal:e}),this.read({locationInfo:t.locationInfo,columnDelimiter:t.delimiter},{origin:"service",url:this.parsedUrl}),t}queryFeatures(e,t){return this.load().then(()=>this.source.queryFeatures(u.from(e)||this.createQuery())).then(a=>{if(a!=null&&a.features)for(const s of a.features)s.layer=s.sourceLayer=this;return a})}queryObjectIds(e,t){return this.load().then(()=>this.source.queryObjectIds(u.from(e)||this.createQuery()))}queryFeatureCount(e,t){return this.load().then(()=>this.source.queryFeatureCount(u.from(e)||this.createQuery()))}queryExtent(e,t){return this.load().then(()=>this.source.queryExtent(u.from(e)||this.createQuery()))}read(e,t){super.read(e,t),t&&t.origin==="service"&&this.revert(["latitudeField","longitudeField"],"service")}write(e,t){return super.write(e,{...t,writeLayerSchema:!0})}clone(){throw new y("csv-layer:clone",`CSVLayer (title: ${this.title}, id: ${this.id}) cannot be cloned`)}async save(e){return m(this,"csv-layer:save")}async saveAs(e,t){return m(this,"csv-layer:save-as")}async hasDataChanged(){try{const{dataChanged:e,updates:t}=await this.source.refresh(this.customParameters);return t!=null&&this.read(t,{origin:"service",url:this.parsedUrl,ignoreDefaults:!0}),e}catch{}return!1}_verifyFields(){}_verifySource(){}_hasMemorySource(){return!1}};r([i({readOnly:!0,json:{read:!1,write:!1}})],o.prototype,"capabilities",void 0);r([i({type:[","," ",";","|","	"],json:{read:{source:"columnDelimiter"},write:{target:"columnDelimiter",ignoreOrigin:!0}}})],o.prototype,"delimiter",void 0);r([i({readOnly:!0,type:Boolean,json:{origins:{"web-scene":{read:!1,write:!1}}}})],o.prototype,"editingEnabled",void 0);r([i({json:{read:{source:"layerDefinition.fields"},write:{target:"layerDefinition.fields"}}})],o.prototype,"fields",void 0);r([i({type:Boolean,readOnly:!0})],o.prototype,"isTable",null);r([_("web-map","labelsVisible",["layerDefinition.drawingInfo.labelingInfo","showLabels"])],o.prototype,"readWebMapLabelsVisible",null);r([i({type:String,json:{read:{source:"locationInfo.latitudeFieldName"},write:{target:"locationInfo.latitudeFieldName",ignoreOrigin:!0}}})],o.prototype,"latitudeField",void 0);r([i({type:["show","hide"]})],o.prototype,"listMode",void 0);r([i({type:["coordinates"],json:{read:{source:"locationInfo.locationType"},write:{target:"locationInfo.locationType",ignoreOrigin:!0,isRequired:!0}}})],o.prototype,"locationType",void 0);r([i({type:String,json:{read:{source:"locationInfo.longitudeFieldName"},write:{target:"locationInfo.longitudeFieldName",ignoreOrigin:!0}}})],o.prototype,"longitudeField",void 0);r([i({type:["CSV"]})],o.prototype,"operationalLayerType",void 0);r([i()],o.prototype,"outFields",void 0);r([i({type:String,json:{origins:{"web-scene":{read:!1,write:!1}},read:!1,write:!1}})],o.prototype,"path",void 0);r([i({json:{read:!1},cast:null,type:n,readOnly:!0})],o.prototype,"source",void 0);r([i({json:{read:!1},value:"csv",readOnly:!0})],o.prototype,"type",void 0);r([i({json:{read:I,write:{isRequired:!0,ignoreOrigin:!0,writer:C}}})],o.prototype,"url",null);o=r([h("esri.layers.CSVLayer")],o);const Be=o;export{Be as default};
