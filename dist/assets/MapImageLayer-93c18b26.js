import{au as w,Z as I,e_ as b,eW as f,L as g,bj as $,bG as O,hO as T,s as v,d as E,ae as s,af as p,f2 as x,bJ as M,bK as R,ai as L,b3 as P,e0 as j}from"./index-65afe59f.js";import{O as F}from"./MultiOriginJSONSupport-94ddedfa.js";import{i as J}from"./scaleUtils-97cba7b2.js";import{i as N}from"./APIKeyMixin-a73b4a94.js";import{E as q,y as U,Y as k}from"./SublayersOwner-b2e051ec.js";import{l as A}from"./ArcGISService-d205da9a.js";import{a as _}from"./BlendLayer-bf12370f.js";import{o as V}from"./CustomParametersMixin-c6bdaa0b.js";import{c as z}from"./OperationalLayer-87798fca.js";import{j as G}from"./PortalLayer-22d5b96f.js";import{p as K}from"./RefreshableLayer-25a5ecc8.js";import{t as W}from"./ScaleRangeLayer-bcba2562.js";import{a as B}from"./TemporalLayer-2faea16c.js";import{f as C}from"./commonProperties-605b6017.js";import{m as D}from"./ExportImageParameters-2d3b4b61.js";import{t as H}from"./imageBitmapUtils-cfa11501.js";import{e as S}from"./sublayerUtils-d3893455.js";import{e as Y}from"./versionUtils-87e003f4.js";import"./Version-aebc6820.js";import"./UniqueValueRenderer-c45fa812.js";import"./LegendOptions-d5bf6b73.js";import"./diffUtils-0f0e8cfe.js";import"./SizeVariable-e7f3c0e2.js";import"./colorRamps-08b57831.js";import"./sizeVariableUtils-d4870b0d.js";import"./lengthUtils-00939dab.js";import"./ColorStop-03954883.js";import"./jsonUtils-15c906c8.js";import"./styleUtils-00c8d6d5.js";import"./featureFlags-acda3469.js";import"./jsonUtils-cf75a5b6.js";import"./DictionaryLoader-b3115f22.js";import"./LRUCache-fba88a6d.js";import"./MemCache-b8f96232.js";import"./FieldsIndex-6df00c0a.js";import"./heatmapUtils-1ed1bbca.js";import"./vec4f64-aa64c7e9.js";import"./sql-c4c85944.js";import"./QueryTask-2b11ffcf.js";import"./infoFor3D-1eaade9a.js";import"./Query-380d10a1.js";import"./Field-f17f32a3.js";import"./fieldType-d8edb871.js";import"./executeForIds-a7c5782c.js";import"./query-3d2830b1.js";import"./normalizeUtils-678d9dd1.js";import"./normalizeUtilsCommon-2b774e39.js";import"./pbfQueryUtils-91e4521c.js";import"./pbf-5511d482.js";import"./OptimizedGeometry-33b2eb0d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./queryZScale-2ed7be3c.js";import"./executeQueryJSON-7789df5f.js";import"./FeatureSet-725ad5ad.js";import"./featureConversionUtils-a232f677.js";import"./FeatureType-cefa53ac.js";import"./FeatureTemplate-e720f0c6.js";import"./labelingInfo-a25619a7.js";import"./labelUtils-ec59d2a3.js";import"./defaultsJSON-b087dd4d.js";import"./serviceCapabilitiesUtils-722c1e48.js";import"./AttachmentQuery-02a78654.js";import"./popupUtils-15651f00.js";import"./jsonUtils-7e0542f0.js";import"./parser-8554880e.js";import"./portalItemUtils-44900d59.js";import"./ElevationInfo-926fbbdf.js";import"./floorFilterUtils-080a7cd2.js";let i=class extends _(B(W(q(U(A(z(G(F(K(N(V(w(P))))))))))))){constructor(...e){super(...e),this.dateFieldsTimeReference=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeReference=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,o){return typeof e=="string"?{url:e,...o}:e}load(e){const o=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(I).then(()=>this._fetchService(o))),Promise.resolve(this)}readImageFormat(e,o){const n=o.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(e,o,n,t){var h;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:r})=>r&&r.toArray().reverse()).toArray();let m=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((h=this.capabilities.exportMap)!=null&&h.supportsDynamicLayers)){const r=b(t.origin);if(r===f.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;m=S(a,c,f.SERVICE)}else if(r>f.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");m=S(a,c.sublayers,b(c.origin))}}const l=[],d={writeSublayerStructure:m,...t};let y=m;a.forEach(r=>{const c=r.write({},d);l.push(c),y=y||r.originOf("visible")==="user"}),l.some(r=>Object.keys(r).length>1)&&(o.layers=l),y&&(o.visibleLayers=a.filter(r=>r.visible).map(r=>r.id))}createExportImageParameters(e,o,n,t){const a=t&&t.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const m=new D({layer:this,floors:t==null?void 0:t.floors,scale:J({extent:e,width:o})*a}),l=m.toJSON();m.destroy();const d=!t||!t.rotation||this.version<10.3?{}:{rotation:-t.rotation},y=e&&e.spatialReference,h=y.wkid||JSON.stringify(y.toJSON());l.dpi*=a;const r={};if(t!=null&&t.timeExtent){const{start:c,end:u}=t.timeExtent.toJSON();r.time=c&&u&&c===u?""+c:`${c??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(r.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:h,imageSR:h,size:o+","+n,...l,...d,...r}}async fetchImage(e,o,n,t){const{data:a}=await this._fetchImage("image",e,o,n,t);return a}async fetchImageBitmap(e,o,n,t){const{data:a,url:m}=await this._fetchImage("blob",e,o,n,t);return H(a,m,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const o={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await g(this.url,o),{extent:t,fullExtent:a,timeExtent:m}=n,l=t||a;return{fullExtent:l&&$.fromJSON(l),timeExtent:m&&O.fromJSON({start:m[0],end:m[1]})}}loadAll(){return T(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return Y(this,e)}async _fetchImage(e,o,n,t,a){var d,y,h;const m={responseType:e,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(o,n,t,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(((d=m.query)==null?void 0:d.dynamicLayers)!=null&&!((h=(y=this.capabilities)==null?void 0:y.exportMap)!=null&&h.supportsDynamicLayers))throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:m.query});try{const{data:r}=await g(l,m);return{data:r,url:l}}catch(r){throw E(r)?r:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:r})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:o,ssl:n}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=o,this.read(o,{origin:"service",url:this.parsedUrl})}};s([p({type:x})],i.prototype,"dateFieldsTimeReference",void 0),s([p({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),s([p()],i.prototype,"dpi",void 0),s([p()],i.prototype,"gdbVersion",void 0),s([p()],i.prototype,"imageFormat",void 0),s([M("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),s([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),s([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),s([p()],i.prototype,"imageTransparency",void 0),s([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),s([p({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),s([p({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),s([p({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),s([p({type:x})],i.prototype,"preferredTimeReference",void 0),s([p()],i.prototype,"sourceJSON",void 0),s([p({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),s([R("sublayers",{layers:{type:[k]},visibleLayers:{type:[j]}})],i.prototype,"writeSublayers",null),s([p({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),s([p({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),s([p(C)],i.prototype,"url",void 0),i=s([L("esri.layers.MapImageLayer")],i);const ct=i;export{ct as default};
