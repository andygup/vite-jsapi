import{a as i,s as p,j9 as $,L as d,ez as f,N as E,j8 as N}from"./index-6eb28d6b.js";import{m as D,N as U,a as y,i as m,g as x}from"./External-3a9a3d83.js";import{e as w,r as h,u as A}from"./infoFor3D-5881142c.js";async function M(a,e,t){return a.length?Promise.all(a.map(s=>S(s,e,t))):[]}async function S(a,{layer:e,ongoingUploads:t},s){const n=t.get(a);if(n)return n;if(!G(e))throw new i(`${e.type}-layer:upload-failure`,"Layer does not support asset uploads.",new Error);if(j(a,e))return a;const r=L(a,e,s);t.set(a,r);try{await r}finally{t.delete(a)}return a}function j(a,e){const{parsedUrl:t}=e;return t!=null&&a.metadata.externalSources.some(s=>D(s,t))}async function L(a,e,t){const{metadata:s}=a,{displaySource:n}=s,r=g(n==null?void 0:n.source,e),o=!!r,u=s.externalSources.length>0,l=o&&r.length===1&&w(r[0].assetType,e.infoFor3D.supportedFormats)==="model/gltf-binary"?v(r,e,t):u?B(a,e,t):I(a,e,t),c=await l;return p(t),a.addExternalSources([c]),a}async function v(a,e,t){return{source:await T(a,e,t)}}async function B(a,e,t){const s=F(e),{externalSources:n}=a.metadata,r=H(n,e);if(!r)throw new i(`${e.type}-layer:upload-failure`,"Could not find an external source that is supported by the service.",new Error);const o=await T(r,e,t);return{source:await C(o,e,s)}}async function I(a,e,t){const s=R(a,e,t);return{source:await b([s],e,t),extent:a.extent.clone()}}async function R(a,e,t){const s=F(e),n=await a.load(t),r=await n.toBinaryGLTF({ignoreLocalTransform:!0});p(t);const o=await r.buffer();return p(t),{blob:new Blob([o.data],{type:o.type}),assetName:`${$()}.glb`,assetType:s}}function H(a,e){for(const t of a){const s=g(t.source,e);if(s)return s}return null}function g(a,e){if(!a)return null;const{infoFor3D:{supportedFormats:t,editFormats:s}}=e,n=x(a),r=new Array;let o=!1;for(let u=0;u<n.length;++u){const l=q(n[u],t);if(!l)return null;s.includes(l.assetType)&&(o=!0),r.push(l)}return o?r:null}function q(a,e){const t=U(a,e);return t?{asset:a,assetType:t}:null}async function T(a,e,t){return b(a.map(s=>J(s,t)),e,t)}async function b(a,e,t){const s=await Promise.all(a.map(async r=>{const o=O(await r,e,t);return p(t),o}));p(t);const{uploadResults:n}=await P(s.map(({item:r})=>r),e,t);return p(t),a.map((r,o)=>z(s[o],n[o],e))}async function J(a,e){const{asset:t,assetType:s}=a;if(t instanceof File)return{blob:t,assetName:t.name,assetType:s};const n=await t.toBlob(e);return p(e),{blob:n,assetName:t.assetName,assetType:s}}async function O(a,e,t){const{blob:s,assetType:n,assetName:r}=a;let o=null;try{const u=new FormData;u.append("f","json"),u.append("file",s,`${r}`);const{data:l}=await d(f(e.url,"uploads/upload"),{timeout:0,body:u,method:"post",responseType:"json"});if(p(t),!l.success)throw E.getLogger("esri.layers.graphics.sources.support.uploadAssets").warnOnce(`Service ${e.url} does not support the REST Uploads API.`),new i(`${e.type}-layer:upload-failure`,"Expected upload to be successful.",new Error);o={assetType:n,assetUploadId:l.item.itemID}}catch{o=null}if(!o){const u=await N(s);if(p(t),!u.isBase64)throw new i(`${e.type}-layer:uploadAssets-failure`,"Expected gltf data in base64 format after conversion.",new Error);o={assetType:n,assetData:u.data}}if(!o)throw new i(`${e.type}-layer:uploadAssets-failure`,"Unable to prepare uploadAsset request options.",new Error);return{item:o,assetName:r}}async function P(a,e,t){const s=await d(f(e.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(a)},method:"post",responseType:"json"});if(p(t),s.data.uploadResults.length!==a.length)throw new i(`${e.type}-layer:uploadAssets-failure`,`Bad response. Uploaded ${a.length} items and received ${s.data.uploadResults.length} results.`,new Error);return s.data}function z(a,e,t){const{success:s}=e;if(!s){const{error:c}=e;throw new i(`${t.type}-layer:upload-failure`,`Failed to upload mesh file ${a.assetName}. Error code: ${c.code}. Error message: ${c.messages}`,new Error)}const{assetHash:n}=e,{assetName:r,item:{assetType:o}}=a,{infoFor3D:{supportedFormats:u}}=t,l=w(o,u);if(!l)throw new i(`${t.type}-layer:upload-failure`,`The service allowed us to upload an asset of FormatID ${o}, but it does not list it in its supported formats.`,new Error);return new y(r,l,[new m(`${t.parsedUrl.path}/assets/${n}`,n)])}async function C(a,e,t){const s=a.map(({assetName:o,parts:u})=>({assetName:o,assetHash:u[0].partHash})),n=(await d(f(e.parsedUrl.path,"convert3D"),{query:{f:"json",assets:JSON.stringify(s),transportType:"esriTransportTypeUrl",targetFormat:t},responseType:"json",timeout:0})).data,{infoFor3D:{supportedFormats:r}}=e;return n.assets.map(o=>{const u=h(o.contentType,r);if(!u)throw new i(`${e.type}-layer:upload-failure`,`The service allowed us to upload an asset of FormatID ${u}, but it does not list it in its supported formats.`,new Error);return new y(o.assetName,o.contentType,[new m(o.assetURL,o.assetHash)])})}function G(a){return!!a.infoFor3D}function F(a){const{infoFor3D:e}=a,t=h("model/gltf-binary",e.supportedFormats)??A("glb",e.supportedFormats);if(!t)throw new i(`${a.type}-layer:upload-failure`,"Layer does not support glb.",new Error);return t}export{M as uploadAssets};
