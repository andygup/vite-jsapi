import{av as _,$ as S,bt as v,dC as T,L as m,bx as b,hR as w,a as h,eC as O,fn as $,eq as R,g7 as L,af as s,ag as a,bF as W,bG as U,ah as j,aj as P,a$ as C}from"./index-6eb28d6b.js";import{O as A}from"./MultiOriginJSONSupport-12c5c93c.js";import{i as B}from"./APIKeyMixin-e31d187b.js";import{p as M}from"./ArcGISCachedService-1e932cac.js";import{E as N,f as k,Y as I}from"./SublayersOwner-4d537fe2.js";import{l as D}from"./ArcGISService-6bc3de28.js";import{a as J}from"./BlendLayer-8cb2f026.js";import{o as q}from"./CustomParametersMixin-e2086895.js";import{c as G}from"./OperationalLayer-8766a006.js";import{j as E}from"./PortalLayer-5a19a8b1.js";import{p as V}from"./RefreshableLayer-a314122a.js";import{t as x}from"./ScaleRangeLayer-a3b20e36.js";import{f as F}from"./commonProperties-71c0550b.js";import{o as y}from"./imageBitmapUtils-63dea51a.js";import"./TileInfoTilemapCache-6adb609c.js";import"./TilemapCache-9e93f158.js";import"./ByteSizeUnit-d4757d40.js";import"./LRUCache-c5294c76.js";import"./Version-fd75b892.js";import"./portalItemUtils-c64fb6e5.js";import"./UniqueValueRenderer-96d9835c.js";import"./LegendOptions-8b5a4dff.js";import"./diffUtils-e501908d.js";import"./SizeVariable-d56771ee.js";import"./colorRamps-991e13c0.js";import"./sizeVariableUtils-d4870b0d.js";import"./lengthUtils-d204db2e.js";import"./ColorStop-57d23cae.js";import"./featureFlags-825f837d.js";import"./styleUtils-4cbc1c81.js";import"./jsonUtils-4ca2381c.js";import"./DictionaryLoader-d4fe8fed.js";import"./FieldsIndex-b55fecf3.js";import"./heatmapUtils-b8fab62d.js";import"./vec4f64-aa64c7e9.js";import"./sql-1e6265ed.js";import"./QueryTask-42457493.js";import"./infoFor3D-5881142c.js";import"./Query-2a94894d.js";import"./Field-3c7d8d62.js";import"./fieldType-df6f400c.js";import"./executeForIds-6d34cdd2.js";import"./query-98ad19ee.js";import"./normalizeUtils-1bb4e48e.js";import"./normalizeUtilsCommon-b44b6ad4.js";import"./pbfQueryUtils-8764c56c.js";import"./pbf-b8eb8f86.js";import"./OptimizedGeometry-33b2eb0d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./queryZScale-3f7733ad.js";import"./executeQueryJSON-f193075e.js";import"./FeatureSet-af928f6b.js";import"./featureConversionUtils-98810c3c.js";import"./FeatureType-798c0e0e.js";import"./FeatureTemplate-a8671a32.js";import"./labelingInfo-e90eb8c8.js";import"./labelUtils-01c8275b.js";import"./defaultsJSON-b087dd4d.js";import"./serviceCapabilitiesUtils-e523e545.js";import"./AttachmentQuery-e71b7522.js";import"./popupUtils-fa63b933.js";import"./sublayerUtils-54328294.js";import"./jsonUtils-4e3a5483.js";import"./parser-aaaca3ad.js";import"./ElevationInfo-6810683d.js";var d;const f=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let i=d=class extends J(x(N(M(k(G(E(D(A(_(V(B(q(C))))))))))))){constructor(...e){super(...e),this.listMode="show",this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(S).then(()=>this._fetchService(r))),Promise.resolve(this)}get attributionDataUrl(){var r;const e=(r=this.parsedUrl)==null?void 0:r.path.toLowerCase();return e?this._getDefaultAttribution(this._getMapName(e)):null}readSpatialReference(e,r){return(e=e||r.tileInfo&&r.tileInfo.spatialReference)&&v.fromJSON(e)}writeSublayers(e,r,t,o){if(!this.loaded||!e)return;const p=e.slice().reverse().flatten(({sublayers:l})=>l&&l.toArray().reverse()).toArray(),n=[],c={writeSublayerStructure:!1,...o};p.forEach(l=>{const u=l.write({},c);n.push(u)}),n.some(l=>Object.keys(l).length>1)&&(r.layers=n)}get tileServers(){var e;return this._getDefaultTileServers((e=this.parsedUrl)==null?void 0:e.path)}castTileServers(e){return Array.isArray(e)?e.map(r=>T(r).path):null}fetchTile(e,r,t,o={}){const{signal:p}=o,n=this.getTileUrl(e,r,t),c={responseType:"image",signal:p,query:{...this.refreshParameters}};return m(n,c).then(l=>l.data)}async fetchImageBitmapTile(e,r,t,o={}){const{signal:p}=o;if(this.fetchTile!==d.prototype.fetchTile){const u=await this.fetchTile(e,r,t,o);return y(u,e,r,t,p)}const n=this.getTileUrl(e,r,t),c={responseType:"blob",signal:p,query:{...this.refreshParameters}},{data:l}=await m(n,c);return y(l,e,r,t,p)}getTileUrl(e,r,t){var c,l;const o=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,p=b({...(c=this.parsedUrl)==null?void 0:c.query,blankTile:!o&&null,...this.customParameters,token:this.apiKey}),n=this.tileServers;return`${n&&n.length?n[r%n.length]:(l=this.parsedUrl)==null?void 0:l.path}/tile/${e}/${r}/${t}${p?"?"+p:""}`}loadAll(){return w(this,e=>{e(this.allSublayers)})}_fetchService(e){return new Promise((r,t)=>{if(this.sourceJSON){if(this.sourceJSON.bandCount!=null&&this.sourceJSON.pixelSizeX!=null)throw new h("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void r({data:this.sourceJSON})}if(!this.parsedUrl)throw new h("tile-layer:undefined-url","layer's url is not defined");const o=O(this.parsedUrl.path);if(o!=null&&o.serverType==="ImageServer")throw new h("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");m(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(r,t)}).then(r=>{let t=this.url;if(r.ssl&&(t=this.url=t.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),this.version===10.1&&!$(t))return this._fetchServerVersion(t,e).then(o=>{this.read({currentVersion:o})}).catch(()=>{})})}_fetchServerVersion(e,r){if(!R(e))return Promise.reject();const t=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return m(t,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:r}).then(o=>{if(o.data&&o.data.currentVersion)return o.data.currentVersion;throw new h("tile-layer:version-not-available")})}_getMapName(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);return r?r[2]:void 0}_getDefaultAttribution(e){if(e==null)return null;let r;e=e.toLowerCase();for(let t=0,o=f.length;t<o;t++)if(r=f[t],r.toLowerCase().includes(e))return L("//static.arcgis.com/attribution/"+r);return null}_getDefaultTileServers(e){if(e==null)return[];const r=e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i)!==-1,t=e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i)!==-1;return r||t?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return!this.fetchTile[g]}};s([a({readOnly:!0})],i.prototype,"attributionDataUrl",null),s([a({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),s([a({json:{read:!0,write:!0}})],i.prototype,"blendMode",void 0),s([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),s([a({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),s([a({type:Boolean})],i.prototype,"resampling",void 0),s([a()],i.prototype,"sourceJSON",void 0),s([a({type:v})],i.prototype,"spatialReference",void 0),s([W("spatialReference",["spatialReference","tileInfo"])],i.prototype,"readSpatialReference",null),s([a({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],i.prototype,"path",void 0),s([a({readOnly:!0})],i.prototype,"sublayers",void 0),s([U("sublayers",{layers:{type:[I]}})],i.prototype,"writeSublayers",null),s([a({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),s([a()],i.prototype,"tileServers",null),s([j("tileServers")],i.prototype,"castTileServers",null),s([a({readOnly:!0,json:{read:!1}})],i.prototype,"type",void 0),s([a(F)],i.prototype,"url",void 0),i=d=s([P("esri.layers.TileLayer")],i);const g=Symbol("default-fetch-tile");i.prototype.fetchTile[g]=!0;const or=i;export{or as default};
