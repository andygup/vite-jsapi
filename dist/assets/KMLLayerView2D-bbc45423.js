import{e as x,y as f,n as O}from"./cast-daef7652.js";import{U as z,a as F,d as U,g as W}from"./request-c2b0ab45.js";import{j as Y}from"./Collection-e2259e32.js";import{r as S,t as H}from"./typedArrayUtil-2bcf3cee.js";import{l as K}from"./reactiveUtils-3c1b281e.js";import"./ensureType-fa162cfc.js";import{w as A,a as L,k as j}from"./Extent-7f29a1bb.js";import{r as T,t as J}from"./projection-33a6cba9.js";import{b as C,g as Q,d as X}from"./kmlUtils-7c5bcfd1.js";import{f as Z}from"./normalizeUtils-d322ac85.js";import{i as I}from"./GraphicsCollection-e2a7679b.js";import{S as tt,T as it,R as et}from"./Bitmap-7ed1290a.js";import{a as rt}from"./BitmapContainer-2d0c98d2.js";import{y as ot,u as at}from"./LayerView-8f28f320.js";import{i as D}from"./GraphicContainer-98f52808.js";import{o as R}from"./BaseGraphicContainer-996bdb9a.js";import{C as st,$ as nt}from"./rasterProjectionHelper-0bcfa8ae.js";import{a as pt,e as lt}from"./WGLContainer-db0ff963.js";import{y as mt,o as ht}from"./RenderingContext-7629f78b.js";import{P as M,G as P,D as q,L as $,Y as ct,V as dt,f as G}from"./enums-64ab819c.js";import{x as gt}from"./VertexArrayObject-8a5c7580.js";import{E as N}from"./Texture-6f3336a0.js";import"./string-3d0ebcd3.js";import"./Error-bd05b442.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-29120e0a.js";import"./preload-helper-101896b7.js";import"./Evented-d8fc77f0.js";import"./SimpleObservable-7c382d01.js";import"./mathUtils-daf59e84.js";import"./common-701a4199.js";import"./unitUtils-43365914.js";import"./jsonMap-a9c94baf.js";import"./mat4-62d5e6a4.js";import"./Polyline-c56eca9b.js";import"./assets-4cb15247.js";import"./zscale-a508c8e5.js";import"./PopupTemplate-343851b8.js";import"./Clonable-f249bc0f.js";import"./fieldUtils-021fea8a.js";import"./arcadeOnDemand-87969052.js";import"./geometry-4b789d90.js";import"./typeUtils-d7b057b5.js";import"./enumeration-e46f3fd4.js";import"./number-53937715.js";import"./locale-30120714.js";import"./Identifiable-e3a09883.js";import"./aaBoundingBox-6fbd5972.js";import"./jsonUtils-9c255ec7.js";import"./UniqueValueRenderer-83bbe8b7.js";import"./symbols-fce921a6.js";import"./CIMSymbol-d0e12b74.js";import"./Symbol-f45dc441.js";import"./Color-2245b966.js";import"./colorUtils-639f4d25.js";import"./screenUtils-7afeb41c.js";import"./opacityUtils-94fd2faa.js";import"./persistableUrlUtils-7e525def.js";import"./collectionUtils-09289d8f.js";import"./Portal-ac0dca24.js";import"./Loadable-7c89bd10.js";import"./Promise-088a0e17.js";import"./PortalGroup-f3dee6d8.js";import"./PortalUser-cdb4116b.js";import"./LegendOptions-54bbb61a.js";import"./diffUtils-58fbd195.js";import"./colorRamps-3439e132.js";import"./sizeVariableUtils-d4870b0d.js";import"./Graphic-cf98a91a.js";import"./jsonUtils-8bd548d9.js";import"./compilerUtils-06ced1a6.js";import"./lengthUtils-5215af35.js";import"./jsonUtils-f34afef9.js";import"./styleUtils-84c98663.js";import"./DictionaryLoader-d07ab55e.js";import"./LRUCache-36379339.js";import"./MemCache-5bd66e9c.js";import"./deprecate-99da8bee.js";import"./heatmapUtils-90a13d85.js";import"./vec4f64-018b3fa6.js";import"./FeatureSet-9ea00c01.js";import"./Field-0ac3c9d2.js";import"./fieldType-4ec45634.js";import"./HandleOwner-78d35324.js";import"./mat3-45e3f2eb.js";import"./mat3f32-d3d088e8.js";import"./vec2f32-461e65a9.js";import"./utils-6c2afd8b.js";import"./parser-e6166e34.js";import"./enums-4ca4641f.js";import"./MaterialKey-b4e71fc3.js";import"./Utils-c2939f8d.js";import"./enums-8bf08d0c.js";import"./VertexElementDescriptor-2925c6af.js";import"./context-util-cb6895d7.js";import"./ExpandedCIM-f5d9de07.js";import"./BidiEngine-836b7ef6.js";import"./aaBoundingRect-45a7fe45.js";import"./mat2d-80bd93af.js";import"./vec2-f978aef8.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-72167b00.js";import"./GeometryUtils-eebff0a0.js";import"./floatRGBA-305df8f3.js";import"./normalizeUtilsSync-ae16ab2d.js";import"./projectionSupport-1035a977.js";import"./json-48e3ea08.js";import"./labelingInfo-f1d3ed98.js";import"./labelUtils-4072dca9.js";import"./defaultsJSON-b087dd4d.js";import"./FeatureContainer-7a24e5ff.js";import"./TileContainer-e69647a1.js";import"./TileKey-ab325718.js";import"./Queue-e839cb6a.js";import"./visualVariablesUtils-7af1d739.js";import"./visualVariablesUtils-b572c1c3.js";import"./capabilities-320386e9.js";import"./Matcher-41d9c6c0.js";import"./TileStrategy-a62d1e84.js";import"./TileStore-4c0c3140.js";import"./rbush-8e36784a.js";import"./quickselect-322ec8e1.js";import"./Query-e996b56b.js";import"./TimeExtent-84882adb.js";import"./tileUtils-d9c533ae.js";import"./TileClipper-eed3813b.js";import"./Geometry-daada628.js";import"./GeometryUtils-c093d234.js";import"./featureConversionUtils-7c9ea581.js";import"./OptimizedFeature-9345d11b.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./earcut-58237617.js";import"./devEnvironmentUtils-5002a058.js";import"./schemaUtils-24d4fed0.js";import"./LayerFloorInfo-689deffc.js";import"./createSymbolSchema-deb469a5.js";import"./rendererUtils-2abcd901.js";import"./FeatureReductionLayer-d7ad3b5e.js";import"./BlendLayer-1b58b599.js";import"./OperationalLayer-7b681a2a.js";import"./ElevationInfo-4e7fad68.js";import"./util-7859c103.js";import"./ComputedAttributeStorage-1f3c802c.js";import"./FeatureSetReader-22887d5b.js";import"./centroid-de776b3b.js";import"./FieldsIndex-394de0a1.js";import"./vec3f32-4322908d.js";import"./pixelUtils-5f39bd45.js";import"./vec2f64-e0301652.js";import"./ProgramTemplate-66c62c24.js";import"./StyleDefinition-3c6a4c69.js";import"./config-1337d16e.js";import"./programUtils-663da5ee.js";import"./OrderIndependentTransparency-602f26c2.js";class m{constructor(t){if(t)this._ownsRctx=!1,this._rctx=t;else{if(m._instance)return m._instanceRefCount++,m._instance;m._instanceRefCount=1,m._instance=this,this._ownsRctx=!0;const e=document.createElement("canvas").getContext("webgl");e.getExtension("OES_texture_float"),this._rctx=new mt(e,{})}const r={applyProjection:!0,bilinear:!1,bicubic:!1},a=ht("raster/reproject","raster/reproject",new Map([["a_position",0]]),r);this._program=this._rctx.programCache.acquire(a.shaders.vertexShader,a.shaders.fragmentShader,a.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new pt(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,r,a=!1){const e=T(t.extent,r),o=new A({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:s,y:h}=st(o,r,t.extent);let l=(s+h)/2;const n=Math.round((e.xmax-e.xmin)/l),c=Math.round((e.ymax-e.ymin)/l);l=(e.width/n+e.height/c)/2;const b=new A({x:l,y:l,spatialReference:e.spatialReference}),w=nt({projectedExtent:e,srcBufferExtent:t.extent,pixelSize:b,hasWrapAround:!0,spacing:[16,16]}),y=lt(this._rctx,w),g=new N(this._rctx,{width:n,height:c,pixelFormat:M.RGBA,dataType:P.UNSIGNED_BYTE,wrapMode:q.CLAMP_TO_EDGE,samplingMode:$.LINEAR,hasMipmap:!1}),p=new gt(this._rctx,{colorTarget:ct.TEXTURE,depthStencilTarget:dt.NONE,width:n,height:c},g);if(this._rctx.bindFramebuffer(p),this._rctx.setViewport(0,0,n,c),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(y,1),this._quad.bind(),this._program.setUniform2f("u_srcImageSize",t.texture.descriptor.width,t.texture.descriptor.height),this._program.setUniform2fv("u_transformSpacing",w.spacing),this._program.setUniform2fv("u_transformGridSize",w.size),this._program.setUniform2f("u_targetImageSize",n,c),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),y.dispose(),a){const u=new ImageData(p.descriptor.width,p.descriptor.height);return p.readPixels(0,0,p.descriptor.width,p.descriptor.height,M.RGBA,P.UNSIGNED_BYTE,u.data),p.detachColorTexture(G.COLOR_ATTACHMENT0),p.dispose(),{texture:g,extent:e,imageData:u}}return p.detachColorTexture(G.COLOR_ATTACHMENT0),p.dispose(),{texture:g,extent:e}}reprojectBitmapData(t,r){const a=tt(t.bitmapData)?it(t.bitmapData):t.bitmapData,e=new N(this._rctx,{width:t.bitmapData.width,height:t.bitmapData.height,pixelFormat:M.RGBA,dataType:P.UNSIGNED_BYTE,wrapMode:q.CLAMP_TO_EDGE,samplingMode:$.LINEAR,hasMipmap:!1},a),o=this.reprojectTexture({texture:e,extent:t.extent},r,!0);o.texture.dispose();const s=document.createElement("canvas");return s.width=o.imageData.width,s.height=o.imageData.height,s.getContext("2d").putImageData(o.imageData,0,0),{bitmapData:s,extent:o.extent}}async loadAndReprojectBitmapData(t,r,a){const e=(await z(t,{responseType:"image"})).data,o=document.createElement("canvas");o.width=e.width,o.height=e.height;const s=o.getContext("2d");s.drawImage(e,0,0);const h=s.getImageData(0,0,o.width,o.height);if(r.spatialReference.equals(a))return{bitmapData:h,extent:r};const l=this.reprojectBitmapData({bitmapData:h,extent:r},a);return{bitmapData:l.bitmapData,extent:l.extent}}destroy(){this._ownsRctx?(m._instanceRefCount--,m._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),m._instance=null)):(this._quad.dispose(),this._program.dispose())}}m._instanceRefCount=0;class B{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let d=class extends ot(at){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new rt,this._kmlVisualData=new B,this.allVisiblePoints=new I,this.allVisiblePolylines=new I,this.allVisiblePolygons=new I,this.allVisibleMapImages=new Y}async hitTest(i,t){var a,e,o;const r=this.layer;return[(a=this._pointsView)==null?void 0:a.hitTest(i),(e=this._polylinesView)==null?void 0:e.hitTest(i),(o=this._polygonsView)==null?void 0:o.hitTest(i)].flat().filter(Boolean).map(s=>(s.layer=r,s.sourceLayer=r,{type:"graphic",graphic:s,layer:r,mapPoint:i}))}update(i){this._polygonsView&&this._polygonsView.processUpdate(i),this._polylinesView&&this._polylinesView.processUpdate(i),this._pointsView&&this._pointsView.processUpdate(i)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new R({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new D(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new R({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new D(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new R({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new D(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.handles.add([this.allVisibleMapImages.on("change",i=>{i.added.forEach(t=>this._addMapImage(t)),i.removed.forEach(t=>this._removeMapImage(t))}),K(()=>this.layer.visibleSublayers,i=>{for(const[t,r]of this._kmlVisualData.allSublayers)r.visibility=0;for(const t of i){const r=this._kmlVisualData.allSublayers.get(t.id);r&&(r.visibility=1)}this._refreshCollections()})]),this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new m}detach(){this._fetchController.abort(),this._fetchController=null,this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView&&(this._polygonsView.destroy(),this._polygonsView=null),this._polylinesView&&(this._polylinesView.destroy(),this._polylinesView=null),this._pointsView&&(this._pointsView.destroy(),this._pointsView=null),this._imageReprojector&&(this._imageReprojector.destroy(),this._imageReprojector=null)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(i){(this.view.spatialReference.isWGS84||this.view.spatialReference.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(i.href,L.fromJSON(i.extent),this.view.spatialReference).then(t=>{const r=new et(t.bitmapData,{immutable:!1,requestRenderOnSourceChangedEnabled:!0});r.x=t.extent.xmin,r.y=t.extent.ymax,r.resolution=t.extent.width/t.bitmapData.width,r.rotation=i.rotation,this._mapImageContainer.addChild(r),this._bitmapIndex.set(i,r)})}async _getViewDependentUrl(i,t){const{viewFormat:r,viewBoundScale:a,httpQuery:e}=i;if(S(r)){if(H(t))throw new Error("Loading this network link requires a view state.");let o;if(await J(),S(a)&&a!==1){const _=new L(t.extent);_.expand(a),o=_}else o=t.extent;o=T(o,j.WGS84);const s=T(o,j.WebMercator),h=o.xmin,l=o.xmax,n=o.ymin,c=o.ymax,b=t.size[0]*t.pixelRatio,w=t.size[1]*t.pixelRatio,y=Math.max(s.width,s.height),g={"[bboxWest]":h.toString(),"[bboxEast]":l.toString(),"[bboxSouth]":n.toString(),"[bboxNorth]":c.toString(),"[lookatLon]":o.center.x.toString(),"[lookatLat]":o.center.y.toString(),"[lookatRange]":y.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":o.center.x.toString(),"[lookatTerrainLat]":o.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":o.center.x.toString(),"[cameraLat]":o.center.y.toString(),"[cameraAlt]":y.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":b.toString(),"[vertPixels]":w.toString(),"[terrainEnabled]":"0","[clientVersion]":F,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},p=_=>{for(const E in _)for(const k in g)_[E]=_[E].replace(k,g[k])},u=U(r);p(u);let V={};S(e)&&(V=U(e),p(V));const v=Z(i.href);return v.query={...v.query,...u,...V},`${v.path}?${W(u)}`}return i.href}async _fetchService(i){const t=new B;await this._loadVisualData(this.layer.url,t,i),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i))}_isSublayerVisible(i){const t=this._kmlVisualData.allSublayers.get(i);return!!t.visibility&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(i,t,r){return this._fetchParsedKML(i,r).then(async a=>{for(const e of a.sublayers){t.allSublayers.set(e.id,e);const o=e.points?await C(e.points):[],s=e.polylines?await C(e.polylines):[],h=e.polygons?await C(e.polygons):[],l=e.mapImages||[];if(t.allPoints.push(...o.map(n=>({item:n,sublayerId:e.id}))),t.allPolylines.push(...s.map(n=>({item:n,sublayerId:e.id}))),t.allPolygons.push(...h.map(n=>({item:n,sublayerId:e.id}))),t.allMapImages.push(...l.map(n=>({item:n,sublayerId:e.id}))),e.networkLink){const n=await this._getViewDependentUrl(e.networkLink,this.view.state);await this._loadVisualData(n,t,r)}}})}_fetchParsedKML(i,t){return Q(i,this.layer.spatialReference,this.layer.refreshInterval,t).then(r=>X(r.data))}_removeMapImage(i){const t=this._bitmapIndex.get(i);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(i))}};x([f()],d.prototype,"_pointsView",void 0),x([f()],d.prototype,"_polylinesView",void 0),x([f()],d.prototype,"_polygonsView",void 0),x([f()],d.prototype,"updating",void 0),d=x([O("esri.views.2d.layers.KMLLayerView2D")],d);const nr=d;export{nr as default};
