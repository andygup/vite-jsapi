import{e as n,y as l,a as R,K as w,B as S,b3 as z,k$ as F,l0 as L}from"./index-0b6846a6.js";import{n as O}from"./LayerView3D-c9d7b31e.js";import{n as P}from"./TiledLayerView3D-566fa078.js";import{b as j}from"./commonProperties-b6e563c7.js";import{T as I,q as _}from"./rasterProjectionHelper-a41a2be2.js";import{d as G}from"./popupUtils-d0cff994.js";import{d as $}from"./LayerView-4bb15203.js";import{i as k}from"./RefreshableLayerView-d9864e69.js";import{r as M}from"./drapedUtils-b843b884.js";import"./ElevationInfo-c6327af8.js";const A=i=>{let e=class extends i{constructor(){super(...arguments),this._rasterFieldPrefix="Raster.",this.layer=null,this.view=null,this.tileInfo=null}get fullExtent(){return this._getfullExtent()}_getfullExtent(){return this.projectFullExtent(this.view.spatialReference)}get hasTilingEffects(){return!!(this.layer.renderer&&"dynamicRangeAdjustment"in this.layer.renderer&&this.layer.renderer.dynamicRangeAdjustment)}get datumTransformation(){return I(this.layer.fullExtent,this.view.spatialReference,!0)}supportsSpatialReference(t){return!!this.projectFullExtent(t)}projectFullExtent(t){const a=this.layer.fullExtent,r=I(a,t,!1);return _(a,t,r)}async fetchPopupFeatures(t,a){const{layer:r}=this;if(!t)throw new w("imageryTileLayerView:fetchPopupFeatures","Nothing to fetch without area",{layer:r});const{popupEnabled:u}=r,y=G(r,a);if(!u||y==null)throw new w("imageryTileLayerView:fetchPopupFeatures","Missing required popupTemplate or popupEnabled",{popupEnabled:u,popupTemplate:y});const p=[],{value:o,magdirValue:s}=await r.identify(t,{timeExtent:this.timeExtent});let g="";if(o&&o.length){g=r.type==="imagery-tile"&&r.hasStandardTime()&&o[0]!=null?o.map(b=>r.getStandardTimeValue(b)).join(", "):o.join(", ");const d={ObjectId:0};d["Raster.ServicePixelValue"]=g;const v=r.rasterInfo.attributeTable;if(v!=null){const{fields:b,features:E}=v,x=b.find(({name:m})=>m.toLowerCase()==="value"),f=x?E.find(m=>String(m.attributes[x.name])===g):null;if(f)for(const m in f.attributes)f.attributes.hasOwnProperty(m)&&(d[this._rasterFieldPrefix+m]=f.attributes[m])}const T=r.rasterInfo.dataType;T!=="vector-magdir"&&T!=="vector-uv"||(d["Raster.Magnitude"]=s==null?void 0:s[0],d["Raster.Direction"]=s==null?void 0:s[1]);const c=new S(this.fullExtent.clone(),null,d);c.layer=r,c.sourceLayer=c.layer,p.push(c)}return p}};return n([l()],e.prototype,"layer",void 0),n([l(j)],e.prototype,"timeExtent",void 0),n([l()],e.prototype,"view",void 0),n([l()],e.prototype,"fullExtent",null),n([l()],e.prototype,"tileInfo",void 0),n([l({readOnly:!0})],e.prototype,"hasTilingEffects",null),n([l()],e.prototype,"datumTransformation",null),e=n([R("esri.views.layers.ImageryTileLayerView")],e),e};let h=class extends A(k(P(O($)))){constructor(){super(...arguments),this.type="imagery-tile-3d",this.isAlignedMapTile=!0}initialize(){this.layer.increaseRasterJobHandlerUsage(),this.fullExtent==null&&this.addResolvingPromise(Promise.reject(new w("layerview:spatial-reference-incompatible","The layer extent cannot be projected to the view's spatial reference",{layer:this.layer})));const i=z(()=>{var e,t;return(t=(e=this.view)==null?void 0:e.basemapTerrain)==null?void 0:t.tilingSchemeLocked}).then(()=>{const e=this.view.basemapTerrain.tilingScheme,t=this.layer.tileInfo,a=["png","png24","png32","jpg","mixed"].includes(t.format)&&e.compatibleWith(t);this.isAlignedMapTile=a;const r=a?t:e.toTileInfo();this.tileInfo=r,this.updatingHandles.add(()=>[this.layer.renderer,this.layer.interpolation,this.layer.bandIds,this.layer.multidimensionalDefinition,this.layer.multidimensionalSubset,this.layer.rasterFunction,this.timeExtent],()=>this.refresh())});this.addResolvingPromise(i)}destroy(){this.layer.decreaseRasterJobHandlerUsage(),this.view=null}get _blankTile(){const i=document.createElement("canvas"),e=i.getContext("2d"),[t,a]=this.tileInfo.size;return i.width=t,i.height=a,e.clearRect(0,0,t,a),e.getImageData(0,0,t,a)}get imageFormatIsOpaque(){return this.layer.tileInfo.format==="jpg"}get hasMixedImageFormats(){return this.layer.tileInfo.format==="mixed"}get dataLevelRange(){const i=this.tileInfo.lods,e=this.layer.tileInfo.lods,t=i[0].scale,a=e[e.length-1].scale;return this.levelRangeFromScaleRange(t,a)}_getfullExtent(){return this.projectFullExtent(this.view.basemapTerrain&&this.view.basemapTerrain.spatialReference!=null?this.view.basemapTerrain.spatialReference:this.view.spatialReference)}async fetchTile(i,e,t,a){const r=this.tileInfo,u=this._canSymbolizeInWebGL(),y={tileInfo:r,requestRawData:u,signal:a.signal,timeExtent:this.timeExtent,requestAsImageElement:this.isAlignedMapTile},p=await this.layer.fetchTile(i,e,t,y);if(p instanceof HTMLImageElement)return p;let o=p&&p.pixelBlock;if(o==null)return this._blankTile;if(!u&&(o=await this.layer.applyRenderer(p),o==null))return this._blankTile;const s=new F([i,e,t],o,r.size[0],r.size[1]);return u?(s.symbolizerRenderer=this.layer.symbolizer.rendererJSON,s.symbolizerParameters=this.layer.symbolizer.generateWebGLParameters(this._getSymbolizerOptions(i)),s.transformGrid=p.transformGrid):s.isRendereredSource=!0,s.interpolation=this.layer.interpolation,s.bandIds=this.layer.bandIds,s}_getSymbolizerOptions(i){const e=this.tileInfo.lodAt(i).resolution;return{pixelBlock:null,isGCS:this.view.basemapTerrain&&this.view.basemapTerrain.spatialReference!=null?this.view.basemapTerrain.spatialReference.isGeographic:this.view.spatialReference.isGeographic,resolution:{x:e,y:e},bandIds:this.layer.bandIds}}ensureSymbolizerParameters(i){this._canSymbolizeInWebGL()&&JSON.stringify(i.symbolizerRenderer)!==JSON.stringify(this.layer.symbolizer.rendererJSON)&&(i.symbolizerParameters=this.layer.symbolizer.generateWebGLParameters(this._getSymbolizerOptions(i.lij[0])))}createFetchPopupFeaturesQueryGeometry(i,e){return M(i,e,this.view)}refresh(){this.emit("data-changed")}async doRefresh(){this.suspended||this.emit("data-changed")}_canSymbolizeInWebGL(){return L("3d").supportsTextureFloat&&this.layer.symbolizer.canRenderInWebGL}};n([l({readOnly:!0})],h.prototype,"_blankTile",null),n([l({readOnly:!0})],h.prototype,"imageFormatIsOpaque",null),n([l({readOnly:!0})],h.prototype,"hasMixedImageFormats",null),n([l({readOnly:!0})],h.prototype,"dataLevelRange",null),h=n([R("esri.views.3d.layers.ImageryTileLayerView3D")],h);const K=h;export{K as default};
