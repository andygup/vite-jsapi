import{d as C,de as P,ax as I,J as b,L as _,a9 as L,s as R,fl as v,fm as N}from"./index-d00ae83f.js";import{e as T}from"./LRUCache-042aa9cd.js";import{r as x}from"./FieldsIndex-a1eb524c.js";import"./MemCache-5adf4213.js";const S="esri.renderers.support.DictionaryLoader",F={type:"CIMSimpleLineCallout",lineSymbol:{type:"CIMLineSymbol",symbolLayers:[{type:"CIMSolidStroke",width:.5,color:[0,0,0,255]}]}};class U{constructor(t,i,e){this.config=null,this.fieldMap=null,this.url=null,this._ongoingRequests=new Map,this._symbolCache=new T(100),this._fieldIndex=null,this._dictionaryPromise=null,this.url=t,this.config=i,this.fieldMap=e}getSymbolFields(){return this._symbolFields}async getSymbolAsync(t,i){let e;this._dictionaryPromise||(this._dictionaryPromise=this.fetchResources(i));try{e=await this._dictionaryPromise}catch(n){if(C(n))return this._dictionaryPromise=null,null}const s={};if(this.fieldMap)for(const n of this._symbolFields){const f=this._getFieldName(this.fieldMap[n]);s[n]=f?""+t.attributes[f]:""}let o=null;try{o=e==null?void 0:e(s,i)}catch{return null}if(!o||typeof o!="string")return null;const l=P(o).toString(),c=this._symbolCache.get(l);if(c)return c.catch(()=>{this._symbolCache.pop(l)}),c;const h=o.split(";"),r=[],a=[];for(const n of h)if(n)if(n.includes("po:")){const f=n.substr(3).split("|");if(f.length===3){const w=f[0],g=f[1];let u=f[2];if(g==="DashTemplate")u=u.split(" ").map(d=>Number(d));else if(g==="Color"){const d=new I(u).toRgba();u=[d[0],d[1],d[2],255*d[3]]}else u=Number(u);a.push({primitiveName:w,propertyName:g,value:u})}}else if(n.includes("|")){for(const f of n.split("|"))if(this._itemNames.has(f)){r.push(f);break}}else this._itemNames.has(n)&&r.push(n);const y=t.geometry==null||!t.geometry.hasZ&&t.geometry.type==="point",m=this._cimPartsToCIMSymbol(r,a,y,i);return this._symbolCache.put(l,m,1),m}async fetchResources(t){if(this._dictionaryPromise)return this._dictionaryPromise;if(!this.url)return void b.getLogger(S).error("no valid URL!");const i=_(this.url+"/resources/styles/dictionary-info.json",{responseType:"json",query:{f:"json"},signal:t!=null?t.signal:null}),[{data:e}]=await Promise.all([i,L()]);if(!e)throw this._dictionaryPromise=null,new R("esri.renderers.DictionaryRenderer","Bad dictionary data!");const s=e.expression,o=e.authoringInfo;this._refSymbolUrlTemplate=this.url+"/"+e.cimRefTemplateUrl,this._itemNames=new Set(e.itemsNames),this._symbolFields=o.symbol;const l={};if(this.config){const r=this.config;for(const a in r)l[a]=r[a]}if(o.configuration)for(const r of o.configuration)l.hasOwnProperty(r.name)||(l[r.name]=r.value);const c=[];if(t!=null&&t.fields&&this.fieldMap)for(const r of this._symbolFields){const a=this.fieldMap[r],y=t.fields.filter(m=>m.name.toLowerCase()===(a==null?void 0:a.toLowerCase()));y.length>0&&c.push({...y[0],type:"esriFieldTypeString"})}c.length>0&&(this._fieldIndex=new x(c));const h=v(s,t!=null?t.spatialReference:null,c,l).then(r=>{const a={scale:0};return(y,m)=>{if(r==null)return null;const n=r.repurposeFeature({geometry:null,attributes:y});return a.scale=m!=null?m.scale??void 0:void 0,r.evaluate({$feature:n,$view:a})}}).catch(r=>(b.getLogger(S).error("Creating dictinoary expression failed:",r),null));return this._dictionaryPromise=h,h}async _cimPartsToCIMSymbol(t,i,e,s){const o=new Array(t.length);for(let h=0;h<t.length;h++)o[h]=this._getSymbolPart(t[h],s);const l=await Promise.all(o),c=this.fieldMap;if(c)for(const h of l)M(h,c);return new N({data:this._combineSymbolParts(l,i,e)})}async _getSymbolPart(t,i){if(this._ongoingRequests.has(t))return this._ongoingRequests.get(t).then(o=>o.data);const e=this._refSymbolUrlTemplate.replace(/\{itemName\}/gi,t),s=_(e,{responseType:"json",query:{f:"json"},...i});this._ongoingRequests.set(t,s);try{return(await s).data}catch(o){throw this._ongoingRequests.delete(t),o}}_combineSymbolParts(t,i,e){if(!t||t.length===0)return null;const s={...t[0]};if(t.length>1){s.symbolLayers=[];for(const o of t){const l=o;s.symbolLayers.unshift(...l.symbolLayers)}}return e&&(s.callout=F),{type:"CIMSymbolReference",symbol:s,primitiveOverrides:i}}_getFieldName(t){if(this._fieldIndex!==null){const i=this._fieldIndex.get(t);return i?i.name:t}return t}}function M(p,t){if(!p)return;const i=p.symbolLayers;if(!i)return;let e=i.length;for(;e--;){const s=i[e];s&&s.enable!==!1&&s.type==="CIMVectorMarker"&&$(s,t)}}function $(p,t){const i=p.markerGraphics;if(i)for(const e of i){if(!e)continue;const s=e.symbol;if(s)switch(s.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":M(s,t);break;case"CIMTextSymbol":s.fieldMap=t}}}export{U as DictionaryLoader};
