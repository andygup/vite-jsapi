import{E as l,t as p,iQ as S,r as d,es as f,L as F,iP as E}from"./index-fb3bdf4f.js";import{e as $,a as v}from"./External-b242d32b.js";import{a as w,m as b,f as I}from"./infoFor3D-91dff30a.js";async function k(e,t,s){return e.length?Promise.all(e.map(o=>D(o,t,s))):[]}async function D(e,{layer:t,ongoingUploads:s},r){const o=s.get(e);if(o)return o;if(!J(t))throw new l(`${t.type}-layer:upload-failure`,"Layer does not support asset uploads.",new Error);if(x(e,t))return e;const a=P(e,t,r);s.set(e,a);try{await a}finally{s.delete(e)}return e}function x(e,t){const{parsedUrl:s}=t;return s!=null&&e.metadata.externalSources.some(r=>$(r,s))}async function P(e,t,s){const{metadata:r}=e,{displaySource:o}=r,a=h(o==null?void 0:o.source,t),n=!!a,i=r.externalSources.length>0,y=await(n&&a.length===1&&w(a[0].assetType,t.infoFor3D.supportedFormats)==="model/gltf-binary"?U(a,t,s):i?N(e,t,s):L(e,t,s));return p(s),e.addExternalSources([y]),e}async function U(e,t,s){const r=await g(e,t,s);return{source:m(r)}}async function N(e,t,s){const r=A(t),{externalSources:o}=e.metadata,a=B(o,t);if(!a)throw new l(`${t.type}-layer:upload-failure`,"Could not find an external source that is supported by the service.",new Error);const n=await g(a,t,s),i=await C(n,t,r);return{source:m(i)}}async function L(e,t,s){const r=M(e,t,s),o=await T([r],t,s);return{source:m(o),extent:e.extent.clone()}}async function M(e,t,s){const r=A(t),a=await(await e.load(s)).toBinaryGLTF({ignoreLocalTransform:!0});p(s);const n=await a.buffer();return p(s),{blob:new Blob([n.data],{type:n.type}),assetName:`${S()}.glb`,assetType:r}}function B(e,t){for(const s of e){const r=h(s.source,t);if(r)return r}return null}function h(e,t){if(!e)return null;const{infoFor3D:{supportedFormats:s,editFormats:r}}=t,o=H(e),a=new Array;let n=!1;for(let i=0;i<o.length;++i){const u=o[i],c=O(u,s);if(!c)return null;r.includes(c.assetType)&&(n=!0),a.push(c)}return n?a:null}function O(e,t){const s=v(e,t);return s?{asset:e,assetType:s}:null}async function g(e,t,s){const r=e.map(o=>j(o,s));return T(r,t,s)}async function T(e,t,s){const r=await Promise.all(e.map(async a=>{const n=q(await a,t,s);return p(s),n}));p(s);const{uploadResults:o}=await R(r.map(({item:a})=>a),t,s);return p(s),e.map((a,n)=>G(r[n],o[n],t))}async function j(e,t){const{asset:s,assetType:r}=e;if(s instanceof File)return{blob:s,assetName:s.name,assetType:r};const{data:o}=await d(s.assetUrl,{responseType:"blob"});return p(t),{blob:o,assetName:s.assetName,assetType:r}}async function q(e,t,s){const{blob:r,assetType:o,assetName:a}=e;let n=null;try{const i=new FormData;i.append("f","json"),i.append("file",r,`${a}`);const u={body:i,method:"post",responseType:"json"},{data:c}=await d(f(t.url,"uploads/upload"),u);if(p(s),!c.success)throw F.getLogger("esri.layers.graphics.sources.support.uploadAssets").warnOnce(`Service ${t.url} does not support the REST Uploads API.`),new l(`${t.type}-layer:upload-failure`,"Expected upload to be successful.",new Error);n={assetType:o,assetUploadId:c.item.itemID}}catch{n=null}if(!n){const i=await E(r);if(p(s),!i.isBase64)throw new l(`${t.type}-layer:uploadAssets-failure`,"Expected gltf data in base64 format after conversion.",new Error);n={assetType:o,assetData:i.data}}if(!n)throw new l(`${t.type}-layer:uploadAssets-failure`,"Unable to prepare uploadAsset request options.",new Error);return{assetName:a,item:n}}async function R(e,t,s){const r={query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"},o=await d(f(t.parsedUrl.path,"uploadAssets"),r);if(p(s),o.data.uploadResults.length!==e.length)throw new l(`${t.type}-layer:uploadAssets-failure`,`Bad response. Uploaded ${e.length} items and received ${o.data.uploadResults.length} results.`,new Error);return o.data}function G(e,t,s){const{success:r}=t;if(!r){const{error:c}=t;throw new l(`${s.type}-layer:upload-failure`,`Failed to upload mesh file ${e.assetName}. Error code: ${c.code}. Error message: ${c.messages}`,new Error)}const{assetHash:o}=t,{assetName:a,item:{assetType:n}}=e,{infoFor3D:{supportedFormats:i}}=s,u=w(n,i);if(!u)throw new l(`${s.type}-layer:upload-failure`,`The service allowed us to upload an asset of FormatID ${n}, but it does not list it in its supported formats.`,new Error);return{assetUrl:`${s.parsedUrl.path}/assets/${o}`,assetName:a,assetHash:o,assetMimeType:u}}async function C(e,t,s){const r=e.map(({assetName:i,assetHash:u})=>({assetName:i,assetHash:u})),o={query:{f:"json",assets:JSON.stringify(r),transportType:"esriTransportTypeUrl",targetFormat:s},responseType:"json"},a=(await d(f(t.parsedUrl.path,"convert3D"),o)).data,{infoFor3D:{supportedFormats:n}}=t;return a.assets.map(i=>{const u=b(i.contentType,n);if(!u)throw new l(`${t.type}-layer:upload-failure`,`The service allowed us to upload an asset of FormatID ${u}, but it does not list it in its supported formats.`,new Error);return{assetUrl:i.assetURL,assetName:i.assetName,assetHash:i.assetHash,assetMimeType:i.contentType,assetType:u}})}function H(e){return Array.isArray(e)?e:e instanceof File?[e]:[e]}function m(e){return Array.isArray(e)&&e.length===1?e[0]:e}function J(e){return!!e.infoFor3D}function A(e){const{infoFor3D:t}=e,s=b("model/gltf-binary",t.supportedFormats)??I("glb",t.supportedFormats);if(!s)throw new l(`${e.type}-layer:upload-failure`,"Layer does not support glb.",new Error);return s}export{k as uploadAssets};
