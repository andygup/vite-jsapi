import{K as i,df as p,sf as F,L as d,h7 as f,d as E,se as N}from"./index-ebffac9a.js";import{o as U,l as A}from"./External-12af36db.js";import{e as m,r as w,u as D}from"./infoFor3D-5881142c.js";async function z(e,t,a){return e.length?Promise.all(e.map(s=>$(s,t,a))):[]}async function $(e,{layer:t,ongoingUploads:a},s){const r=a.get(e);if(r)return r;if(!M(t))throw new i(`${t.type}-layer:upload-failure`,"Layer does not support asset uploads.",new Error);if(x(e,t))return e;const o=S(e,t,s);a.set(e,o);try{await o}finally{a.delete(e)}return e}function x(e,t){const{parsedUrl:a}=t;return a!=null&&e.metadata.externalSources.some(s=>U(s,a))}async function S(e,t,a){const{metadata:s}=e,{displaySource:r}=s,o=h(r==null?void 0:r.source,t),n=!!o,u=s.externalSources.length>0,l=n&&o.length===1&&m(o[0].assetType,t.infoFor3D.supportedFormats)==="model/gltf-binary"?L(o,t,a):u?v(e,t,a):H(e,t,a),c=await l;return p(a),e.addExternalSources([c]),e}async function L(e,t,a){return{source:y(await g(e,t,a))}}async function v(e,t,a){const s=b(t),{externalSources:r}=e.metadata,o=I(r,t);if(!o)throw new i(`${t.type}-layer:upload-failure`,"Could not find an external source that is supported by the service.",new Error);const n=await g(o,t,a);return{source:y(await J(n,t,s))}}async function H(e,t,a){const s=j(e,t,a);return{source:y(await T([s],t,a)),extent:e.extent.clone()}}async function j(e,t,a){const s=b(t),r=await e.load(a),o=await r.toBinaryGLTF({ignoreLocalTransform:!0});p(a);const n=await o.buffer();return p(a),{blob:new Blob([n.data],{type:n.type}),assetName:`${F()}.glb`,assetType:s}}function I(e,t){for(const a of e){const s=h(a.source,t);if(s)return s}return null}function h(e,t){if(!e)return null;const{infoFor3D:{supportedFormats:a,editFormats:s}}=t,r=K(e),o=new Array;let n=!1;for(let u=0;u<r.length;++u){const l=R(r[u],a);if(!l)return null;s.includes(l.assetType)&&(n=!0),o.push(l)}return n?o:null}function R(e,t){const a=A(e,t);return a?{asset:e,assetType:a}:null}async function g(e,t,a){return T(e.map(s=>B(s,a)),t,a)}async function T(e,t,a){const s=await Promise.all(e.map(async o=>{const n=q(await o,t,a);return p(a),n}));p(a);const{uploadResults:r}=await O(s.map(({item:o})=>o),t,a);return p(a),e.map((o,n)=>P(s[n],r[n],t))}async function B(e,t){const{asset:a,assetType:s}=e;if(a instanceof File)return{blob:a,assetName:a.name,assetType:s};const{data:r}=await d(a.assetUrl,{responseType:"blob"});return p(t),{blob:r,assetName:a.assetName,assetType:s}}async function q(e,t,a){const{blob:s,assetType:r,assetName:o}=e;let n=null;try{const u=new FormData;u.append("f","json"),u.append("file",s,`${o}`);const l={body:u,method:"post",responseType:"json"},{data:c}=await d(f(t.url,"uploads/upload"),l);if(p(a),!c.success)throw E.getLogger("esri.layers.graphics.sources.support.uploadAssets").warnOnce(`Service ${t.url} does not support the REST Uploads API.`),new i(`${t.type}-layer:upload-failure`,"Expected upload to be successful.",new Error);n={assetType:r,assetUploadId:c.item.itemID}}catch{n=null}if(!n){const u=await N(s);if(p(a),!u.isBase64)throw new i(`${t.type}-layer:uploadAssets-failure`,"Expected gltf data in base64 format after conversion.",new Error);n={assetType:r,assetData:u.data}}if(!n)throw new i(`${t.type}-layer:uploadAssets-failure`,"Unable to prepare uploadAsset request options.",new Error);return{assetName:o,item:n}}async function O(e,t,a){const s={query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"},r=await d(f(t.parsedUrl.path,"uploadAssets"),s);if(p(a),r.data.uploadResults.length!==e.length)throw new i(`${t.type}-layer:uploadAssets-failure`,`Bad response. Uploaded ${e.length} items and received ${r.data.uploadResults.length} results.`,new Error);return r.data}function P(e,t,a){const{success:s}=t;if(!s){const{error:c}=t;throw new i(`${a.type}-layer:upload-failure`,`Failed to upload mesh file ${e.assetName}. Error code: ${c.code}. Error message: ${c.messages}`,new Error)}const{assetHash:r}=t,{assetName:o,item:{assetType:n}}=e,{infoFor3D:{supportedFormats:u}}=a,l=m(n,u);if(!l)throw new i(`${a.type}-layer:upload-failure`,`The service allowed us to upload an asset of FormatID ${n}, but it does not list it in its supported formats.`,new Error);return{assetUrl:`${a.parsedUrl.path}/assets/${r}`,assetName:o,assetHash:r,assetMimeType:l}}async function J(e,t,a){const s=e.map(({assetName:u,assetHash:l})=>({assetName:u,assetHash:l})),r={query:{f:"json",assets:JSON.stringify(s),transportType:"esriTransportTypeUrl",targetFormat:a},responseType:"json"},o=(await d(f(t.parsedUrl.path,"convert3D"),r)).data,{infoFor3D:{supportedFormats:n}}=t;return o.assets.map(u=>{const l=w(u.contentType,n);if(!l)throw new i(`${t.type}-layer:upload-failure`,`The service allowed us to upload an asset of FormatID ${l}, but it does not list it in its supported formats.`,new Error);return{assetUrl:u.assetURL,assetName:u.assetName,assetHash:u.assetHash,assetMimeType:u.contentType,assetType:l}})}function K(e){return Array.isArray(e)?e:[e]}function y(e){return Array.isArray(e)&&e.length===1?e[0]:e}function M(e){return!!e.infoFor3D}function b(e){const{infoFor3D:t}=e,a=w("model/gltf-binary",t.supportedFormats)??D("glb",t.supportedFormats);if(!a)throw new i(`${e.type}-layer:upload-failure`,"Layer does not support glb.",new Error);return a}export{z as uploadAssets};
