import{ae as d,ai as u,A as y,B as h,m as c}from"./index-37fc1c1b.js";import{F as b}from"./FeatureEffect-227c642a.js";import g from"./FeatureLayerView2D-0967700a.js";import"./jsonUtils-85e9bcb0.js";import"./parser-395fa391.js";import"./_commonjsHelpers-725317a4.js";import"./Query-91876b14.js";import"./Field-b21b898d.js";import"./fieldType-60e0d461.js";import"./Container-b9d7ae34.js";import"./definitions-3f56d206.js";import"./enums-08489827.js";import"./TextureDescriptor-b97332df.js";import"./FeatureSet-c0217d0c.js";import"./LayerView-244ae284.js";import"./schemaUtils-5cf89204.js";import"./sql-07ab1f45.js";import"./diffUtils-7b235f3e.js";import"./labelingInfo-7fe41727.js";import"./labelUtils-41a42c6e.js";import"./defaultsJSON-b396ba80.js";import"./jsonUtils-08626db6.js";import"./color-af3426c7.js";import"./enums-eb6e4255.js";import"./VertexElementDescriptor-24e04d97.js";import"./utils-a49cffda.js";import"./MaterialKey-c607442c.js";import"./heatmapUtils-f0d5531e.js";import"./vec4-3dd523e8.js";import"./vec4f64-efdcb593.js";import"./visualVariablesUtils-a6f5685f.js";import"./ExpandedCIM-76d1f105.js";import"./BidiEngine-cdaf024a.js";import"./GeometryUtils-26dde58c.js";import"./Rect-df8ea165.js";import"./quantizationUtils-fa03eddf.js";import"./floatRGBA-392b8860.js";import"./featureFlags-ec64a754.js";import"./clusterUtils-6e1a0568.js";import"./SizeVariable-9c9109a6.js";import"./colorRamps-91762876.js";import"./LegendOptions-bd430cc4.js";import"./sizeVariableUtils-2914222a.js";import"./lengthUtils-03d7ac5d.js";import"./util-df65e226.js";import"./commonProperties-0728d359.js";import"./ElevationInfo-37007c95.js";import"./floorFilterUtils-0e56040f.js";import"./popupUtils-df5166bb.js";import"./RefreshableLayerView-4bca454a.js";function f(o,t){return!o.visible||o.minScale!==0&&t>o.minScale||o.maxScale!==0&&t<o.maxScale}let n=class extends g{initialize(){this.addHandles([y(()=>this.view.scale,()=>this._update(),h)],"constructor")}isUpdating(){var l;const t=this.layer.sublayers.some(m=>m.renderer!=null),e=this._commandsQueue.updating,s=this._updatingRequiredFieldsPromise!=null,r=!this._proxy||!this._proxy.isReady,i=this._pipelineIsUpdating,p=this.tileRenderer==null||((l=this.tileRenderer)==null?void 0:l.updating),a=t&&(e||s||r||i||p);return c("esri-2d-log-updating")&&console.log(`Updating FLV2D: ${a}
  -> hasRenderer ${t}
  -> hasPendingCommand ${e}
  -> updatingRequiredFields ${s}
  -> updatingProxy ${r}
  -> updatingPipeline ${i}
  -> updatingTileRenderer ${p}
`),a}_injectOverrides(t){let e=super._injectOverrides(t);const s=this.view.scale,r=this.layer.sublayers.filter(p=>f(p,s)).map(p=>p.subtypeCode);if(!r.length)return e;e=e??new b().toJSON();const i=`NOT ${this.layer.subtypeField} IN (${r.join(",")})`;return e.where=e.where?`(${e.where}) AND (${i})`:i,e}_setLayersForFeature(t){const e=this.layer.fieldsIndex.get(this.layer.subtypeField),s=t.attributes[e.name],r=this.layer.sublayers.find(i=>i.subtypeCode===s);t.layer=t.sourceLayer=r}_createSchemaConfig(){const t={subtypeField:this.layer.subtypeField,sublayers:Array.from(this.layer.sublayers).map(i=>({featureReduction:null,geometryType:this.layer.geometryType,labelingInfo:i.labelingInfo,labelsVisible:i.labelsVisible,renderer:i.renderer,subtypeCode:i.subtypeCode,orderBy:null}))},e=this.layer.sublayers.map(i=>i.subtypeCode).join(","),s=this.layer.sublayers.length?`${this.layer.subtypeField} IN (${e})`:"1=2";let r=this.layer.definitionExpression?this.layer.definitionExpression+" AND ":"";return r+=s,{...super._createSchemaConfig(),...t,definitionExpression:r}}};n=d([u("esri.views.2d.layers.SubtypeGroupLayerView2D")],n);const be=n;export{be as default};
