import{N as k,m as z,a as d,c as w,bO as L}from"./index-6eb28d6b.js";import{M as T,G as A,U as P,L as g,D,V as y,P as I,f as K}from"./enums-b14466b3.js";const Y=k.getLogger("esri.views.webgl.checkWebGLError");function H(t,e){switch(e){case t.INVALID_ENUM:return"Invalid Enum. An unacceptable value has been specified for an enumerated argument.";case t.INVALID_VALUE:return"Invalid Value. A numeric argument is out of range.";case t.INVALID_OPERATION:return"Invalid Operation. The specified command is not allowed for the current state.";case t.INVALID_FRAMEBUFFER_OPERATION:return"Invalid Framebuffer operation. The currently bound framebuffer is not framebuffer complete when trying to render to or to read from it.";case t.OUT_OF_MEMORY:return"Out of memory. Not enough memory is left to execute the command.";case t.CONTEXT_LOST_WEBGL:return"WebGL context has been lost";default:return"Unknown error"}}const v=!!z("enable-feature:webgl-debug");function q(){return v}function rt(){return v}function M(t){if(q()){const e=t.getError();if(e){const r=H(t,e),i=new Error().stack;Y.error(new d("webgl-error","WebGL error occured",{message:r,stack:i}))}}}class j{constructor(e=0,r=e){this.width=e,this.height=r,this.target=T.TEXTURE_2D,this.pixelFormat=A.RGBA,this.dataType=P.UNSIGNED_BYTE,this.samplingMode=g.LINEAR,this.wrapMode=D.REPEAT,this.maxAnisotropy=1,this.flipped=!1,this.hasMipmap=!1,this.isOpaque=!1,this.unpackAlignment=4,this.preMultiplyAlpha=!1,this.depth=1,this.isImmutable=!1}}class S extends j{constructor(e,r){super(),this.context=e,Object.assign(this,r)}static validate(e,r){return new S(e,r)}}const O=4;let E=class{constructor(t,e=null,r=null){if(this.type="texture",this._glName=null,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._wasImmutablyAllocated=!1,"context"in t)this._descriptor=t,r=e;else{const i=S.validate(t,e);if(!i)throw new d("Texture descriptor invalid");this._descriptor=i}if(this._descriptor.context.instanceCounter.increment(y.Texture,this),this._descriptor.context.type!==w.WEBGL2&&(this._descriptor.isImmutable&&(this._descriptor.isImmutable=!1),f(this._descriptor.target)))throw new d("3D and array textures are not supported in WebGL1");this._descriptor.target===T.TEXTURE_CUBE_MAP?this._setDataCubeMap(r):this.setData(r)}get glName(){return this._glName}get descriptor(){return this._descriptor}get isDirty(){return this._samplingModeDirty||this._wrapModeDirty}dispose(){this._descriptor.context.gl&&this._glName&&(this._descriptor.context.unbindTexture(this),this._descriptor.context.gl.deleteTexture(this._glName),this._glName=null,this._descriptor.context.instanceCounter.decrement(y.Texture,this))}release(){this.dispose()}resize(t,e){const r=this._descriptor;if(r.width!==t||r.height!==e){if(this._wasImmutablyAllocated)throw new d("Immutable textures can't be resized!");r.width=t,r.height=e,this._descriptor.target===T.TEXTURE_CUBE_MAP?this._setDataCubeMap(null):this.setData(null)}}_setDataCubeMap(t=null){for(let e=T.TEXTURE_CUBE_MAP_POSITIVE_X;e<=T.TEXTURE_CUBE_MAP_NEGATIVE_Z;e++)this._setData(t,e)}setData(t){this._setData(t)}_setData(t,e){if(!this._descriptor.context||!this._descriptor.context.gl)return;const r=this._descriptor.context.gl;M(r),this._glName||(this._glName=r.createTexture()),t===void 0&&(t=null);const i=this._descriptor,s=e??i.target,o=f(s);t===null&&(i.width=i.width||O,i.height=i.height||O,o&&(i.depth=i.depth??1));const l=this._descriptor.context.bindTexture(this,E.TEXTURE_UNIT_FOR_UPDATES);this._descriptor.context.setActiveTexture(E.TEXTURE_UNIT_FOR_UPDATES),N(this._descriptor.context,i),this._configurePixelStorage(),M(r);const n=i.pixelFormat;let h=i.internalFormat??this._deriveInternalFormat(n,i.dataType);if(U(t)){let a=t.width,p=t.height;const c=1;t instanceof HTMLVideoElement&&(a=t.videoWidth,p=t.videoHeight),i.width&&i.height,o&&i.depth,i.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(s,h,i.hasMipmap,a,p,c),this._texImage(s,0,h,a,p,c,t),M(r),i.hasMipmap&&this.generateMipmap(),i.width||(i.width=a),i.height||(i.height=p),o&&!i.depth&&(i.depth=c)}else{const{width:a,height:p,depth:c}=i;if(a==null||p==null)throw new d("Width and height must be specified!");if(o&&c==null)throw new d("Depth must be specified!");if(i.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(s,h,i.hasMipmap,a,p,c),r.DEPTH24_STENCIL8&&h===r.DEPTH_STENCIL&&(h=r.DEPTH24_STENCIL8),R(t)){const u=t.levels,m=X(s,a,p,c),_=Math.min(m-1,u.length-1);this._descriptor.context.gl2!=null?r.texParameteri(i.target,this._descriptor.context.gl2.TEXTURE_MAX_LEVEL,_):i.hasMipmap=i.hasMipmap&&m===u.length;const x=h;if(!Q(x))throw new d("Attempting to use compressed data with an uncompressed format!");this._forEachMipmapLevel((b,C,W,B)=>{const V=u[Math.min(b,u.length-1)];this._compressedTexImage(s,b,x,C,W,B,V)},_)}else t!=null?(this._texImage(s,0,h,a,p,c,t),M(r),i.hasMipmap&&this.generateMipmap()):this._forEachMipmapLevel((u,m,_,x)=>{this._texImage(s,u,h,m,_,x,null),M(r)})}F(r,this._descriptor),G(r,this._descriptor),Z(this._descriptor.context,this._descriptor),M(r),this._descriptor.context.bindTexture(l,E.TEXTURE_UNIT_FOR_UPDATES)}updateData(t,e,r,i,s,o,l=0){o||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const n=this._descriptor.context.gl,h=this._descriptor.context.gl2,a=this._descriptor,{pixelFormat:p,dataType:c,target:u,isImmutable:m}=a,_=a.internalFormat??this._deriveInternalFormat(p,c);if(m&&!this._wasImmutablyAllocated)throw new d("Cannot update immutable texture before allocation!");const x=this._descriptor.context.bindTexture(this,E.TEXTURE_UNIT_FOR_UPDATES,!0);if((e<0||r<0||i>a.width||s>a.height||e+i>a.width||r+s>a.height)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage(),l){if(!h)return void console.error("Webgl2 must be enabled to use dataRowOffset!");n.pixelStorei(h.UNPACK_SKIP_ROWS,l)}if(U(o)?h?h.texSubImage2D(u,t,e,r,i,s,p,c,o):n.texSubImage2D(u,t,e,r,p,c,o):R(o)?n.compressedTexSubImage2D(u,t,e,r,i,s,_,o.levels[t]):n.texSubImage2D(u,t,e,r,i,s,p,c,o),l){if(!h)return void console.error("Webgl2 must be enabled to use dataRowOffset!");n.pixelStorei(h.UNPACK_SKIP_ROWS,0)}this._descriptor.context.bindTexture(x,E.TEXTURE_UNIT_FOR_UPDATES)}updateData3D(t,e,r,i,s,o,l,n){n||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const h=this._descriptor.context.gl2;if(h==null)throw new d("3D textures are not supported in WebGL1");const a=this._descriptor,{pixelFormat:p,dataType:c,isImmutable:u,target:m}=a,_=a.internalFormat??this._deriveInternalFormat(p,c);if(u&&!this._wasImmutablyAllocated)throw new d("Cannot update immutable texture before allocation!");f(m)||console.warn("Attempting to set 3D texture data on a non-3D texture");const x=this._descriptor.context.bindTexture(this,E.TEXTURE_UNIT_FOR_UPDATES);if(this._descriptor.context.setActiveTexture(E.TEXTURE_UNIT_FOR_UPDATES),(e<0||r<0||i<0||s>a.width||o>a.height||l>a.depth||e+s>a.width||r+o>a.height||i+l>a.depth)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage(),R(n))n=n.levels[t],h.compressedTexSubImage3D(m,t,e,r,i,s,o,l,_,n);else{const b=n;h.texSubImage3D(m,t,e,r,i,s,o,l,p,c,b)}this._descriptor.context.bindTexture(x,E.TEXTURE_UNIT_FOR_UPDATES)}generateMipmap(){const t=this._descriptor;if(!t.hasMipmap){if(this._wasImmutablyAllocated)throw new d("Cannot add mipmaps to immutable texture after allocation");t.hasMipmap=!0,this._samplingModeDirty=!0,N(this._descriptor.context,t)}t.samplingMode===g.LINEAR?(this._samplingModeDirty=!0,t.samplingMode=g.LINEAR_MIPMAP_NEAREST):t.samplingMode===g.NEAREST&&(this._samplingModeDirty=!0,t.samplingMode=g.NEAREST_MIPMAP_NEAREST);const e=this._descriptor.context.bindTexture(this,E.TEXTURE_UNIT_FOR_UPDATES);this._descriptor.context.setActiveTexture(E.TEXTURE_UNIT_FOR_UPDATES),this._descriptor.context.gl.generateMipmap(t.target),this._descriptor.context.bindTexture(e,E.TEXTURE_UNIT_FOR_UPDATES)}setSamplingMode(t){t!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=t,this._samplingModeDirty=!0)}setWrapMode(t){t!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=t,N(this._descriptor.context,this._descriptor),this._wrapModeDirty=!0)}applyChanges(){const t=this._descriptor.context.gl,e=this._descriptor;this._samplingModeDirty&&(F(t,e),this._samplingModeDirty=!1),this._wrapModeDirty&&(G(t,e),this._wrapModeDirty=!1)}_deriveInternalFormat(t,e){if(this._descriptor.context.type===w.WEBGL1)return t;switch(e){case P.FLOAT:switch(t){case A.RGBA:return I.RGBA32F;case A.RGB:return I.RGB32F;default:throw new d("Unable to derive format")}case P.UNSIGNED_BYTE:switch(t){case A.RGBA:return I.RGBA8;case A.RGB:return I.RGB8}default:return t}}_configurePixelStorage(){const t=this._descriptor.context.gl,{unpackAlignment:e,flipped:r,preMultiplyAlpha:i}=this._descriptor;t.pixelStorei(t.UNPACK_ALIGNMENT,e),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,r?1:0),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i?1:0)}_texStorage(t,e,r,i,s,o){const l=this._descriptor.context.gl2;if(l==null)throw new d("Immutable textures are not supported in WebGL1");if(!J(e))throw new d("Immutable textures must have a sized internal format");if(!this._descriptor.isImmutable)return;const n=r?X(t,i,s,o):1;if(f(t)){if(o==null)throw new d("Missing depth dimension for 3D texture upload");l.texStorage3D(t,n,e,i,s,o)}else l.texStorage2D(t,n,e,i,s);this._wasImmutablyAllocated=!0}_texImage(t,e,r,i,s,o,l){const n=this._descriptor.context.gl,h=f(t),{isImmutable:a,pixelFormat:p,dataType:c}=this._descriptor,u=this._descriptor.context.type===w.WEBGL2,m=u?n:null;if(u||!U(l))if(a){if(l!=null){const _=l;if(h){if(o==null)throw new d("Missing depth dimension for 3D texture upload");m.texSubImage3D(t,e,0,0,0,i,s,o,p,c,_)}else n.texSubImage2D(t,e,0,0,i,s,p,c,_)}}else{const _=l;if(h){if(o==null)throw new d("Missing depth dimension for 3D texture upload");m.texImage3D(t,e,r,i,s,o,0,p,c,_)}else n.texImage2D(t,e,r,i,s,0,p,c,_)}else n.texImage2D(t,0,r,p,c,l)}_compressedTexImage(t,e,r,i,s,o,l){const n=this._descriptor.context.gl;let h=null;const a=f(t),p=this._descriptor.isImmutable;if(a){if(this._descriptor.context.type!==w.WEBGL2)throw new d("3D textures are not supported in WebGL1");h=n}if(p){if(l!=null)if(a){if(o==null)throw new d("Missing depth dimension for 3D texture upload");h.compressedTexSubImage3D(t,e,0,0,0,i,s,o,r,l)}else n.compressedTexSubImage2D(t,e,0,0,i,s,r,l)}else if(a){if(o==null)throw new d("Missing depth dimension for 3D texture upload");h.compressedTexImage3D(t,e,r,i,s,o,0,l)}else n.compressedTexImage2D(t,e,r,i,s,0,l)}_forEachMipmapLevel(t,e=1/0){let{width:r,height:i,depth:s,hasMipmap:o,target:l}=this._descriptor;const n=l===T.TEXTURE_3D;if(r==null||i==null||n&&s==null)throw new d("Missing texture dimensions for mipmap calculation");for(let h=0;t(h,r,i,s),o&&(r!==1||i!==1||n&&s!==1)&&!(h>=e);++h)r=Math.max(1,r>>1),i=Math.max(1,i>>1),n&&(s=Math.max(1,s>>1))}};function N(t,e){(e.width!=null&&e.width<0||e.height!=null&&e.height<0||e.depth!=null&&e.depth<0)&&console.error("Negative dimension parameters are not allowed!");const r=t.type===w.WEBGL2;r||!e.isImmutable&&!f(e.target)||console.error("Immutable and 3D-like textures are not supported in WebGL1!"),!r&&(e.width!=null&&L(e.width)&&e.height!=null&&L(e.height)||(typeof e.wrapMode=="number"?e.wrapMode!==D.CLAMP_TO_EDGE&&console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"):e.wrapMode.s===D.CLAMP_TO_EDGE&&e.wrapMode.t===D.CLAMP_TO_EDGE||console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"),e.hasMipmap&&console.error("Mipmapping requires power-of-two textures!")))}function F(t,e){let r=e.samplingMode,i=e.samplingMode;r===g.LINEAR_MIPMAP_NEAREST||r===g.LINEAR_MIPMAP_LINEAR?(r=g.LINEAR,e.hasMipmap||(i=g.LINEAR)):r!==g.NEAREST_MIPMAP_NEAREST&&r!==g.NEAREST_MIPMAP_LINEAR||(r=g.NEAREST,e.hasMipmap||(i=g.NEAREST)),t.texParameteri(e.target,t.TEXTURE_MAG_FILTER,r),t.texParameteri(e.target,t.TEXTURE_MIN_FILTER,i)}function G(t,e){typeof e.wrapMode=="number"?(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode)):(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode.s),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode.t))}function Z(t,e){const r=t.capabilities.textureFilterAnisotropic;r&&t.gl.texParameterf(e.target,r.TEXTURE_MAX_ANISOTROPY,e.maxAnisotropy??1)}function J(t){return t in I}function Q(t){return t in K}function R(t){return t!=null&&"type"in t&&t.type==="compressed"}function $(t){return t!=null&&"byteLength"in t}function U(t){return t!=null&&!R(t)&&!$(t)}function f(t){return t===T.TEXTURE_3D||t===T.TEXTURE_2D_ARRAY}function X(t,e,r,i=1){let s=Math.max(e,r);return t===T.TEXTURE_3D&&(s=Math.max(s,i)),Math.round(Math.log(s)/Math.LN2)+1}E.TEXTURE_UNIT_FOR_UPDATES=0;export{j as a,q as b,rt as c,M as d,E as u};
