import{h5 as w,aq as $,Y as I,ho as b,hl as f,bv as O,L as g,by as T,bA as E,r5 as M,K as v,k as R,e as s,y as p,hu as x,bD as L,bE as P,a as F,a$ as N,fz as j}from"./index-ebffac9a.js";import{O as q}from"./MultiOriginJSONSupport-8564e0a9.js";import{i as J}from"./APIKeyMixin-578bd2ec.js";import{E as U,f as k,Y as A}from"./SublayersOwner-0613df8b.js";import{l as _}from"./ArcGISService-d99bd511.js";import{a as z}from"./BlendLayer-3c1f048d.js";import{o as V}from"./CustomParametersMixin-935b77ee.js";import{c as D}from"./OperationalLayer-6d575663.js";import{j as K}from"./PortalLayer-9a9f290e.js";import{t as B}from"./ScaleRangeLayer-a374a131.js";import{a as C}from"./TemporalLayer-e1ed1ea4.js";import{f as G}from"./commonProperties-50fc1190.js";import{m as H}from"./ExportImageParameters-0472e4de.js";import{t as W}from"./imageBitmapUtils-fe766489.js";import{e as S}from"./sublayerUtils-4168d3e2.js";import{e as Y}from"./versionUtils-14dabf66.js";import"./portalItemUtils-a90a3682.js";import"./UniqueValueRenderer-1e273e84.js";import"./ColorStop-022cb10b.js";import"./diffUtils-070c5609.js";import"./colorRamps-252dbf2c.js";import"./jsonUtils-2e3cf42f.js";import"./DictionaryLoader-f7a481a0.js";import"./LRUCache-bcacffcf.js";import"./FieldsIndex-ed9267b4.js";import"./heatmapUtils-202eebb3.js";import"./sql-2f93e553.js";import"./QueryTask-66794334.js";import"./infoFor3D-5881142c.js";import"./Query-d081b67e.js";import"./executeForIds-29f4073e.js";import"./query-44ffa5b4.js";import"./normalizeUtils-d72d23be.js";import"./normalizeUtilsCommon-bca31cde.js";import"./pbfQueryUtils-351b2de5.js";import"./pbf-3ba7f9bf.js";import"./queryZScale-29014927.js";import"./executeQueryJSON-c7c23221.js";import"./FeatureSet-4557a301.js";import"./FeatureType-24aebfe0.js";import"./FeatureTemplate-701c82ac.js";import"./labelingInfo-b3e440ff.js";import"./defaults-2d143f10.js";import"./defaultsJSON-59981e75.js";import"./serviceCapabilitiesUtils-5493bd8e.js";import"./AttachmentQuery-8ea2465f.js";import"./popupUtils-d363b49e.js";import"./jsonUtils-cb5066f8.js";import"./ElevationInfo-b2766669.js";import"./floorFilterUtils-080a7cd2.js";let i=class extends z(C(B(U(k(_(D(K(q(w(J(V($(N))))))))))))){constructor(...e){super(...e),this.dateFieldsTimeReference=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeReference=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,o){return typeof e=="string"?{url:e,...o}:e}load(e){const o=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(I).then(()=>this._fetchService(o))),Promise.resolve(this)}readImageFormat(e,o){const m=o.supportedImageFormatTypes;return m&&m.includes("PNG32")?"png32":"png24"}writeSublayers(e,o,m,t){var y;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:r})=>r&&r.toArray().reverse()).toArray();let n=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((y=this.capabilities.exportMap)!=null&&y.supportsDynamicLayers)){const r=b(t.origin);if(r===f.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;n=S(a,c,f.SERVICE)}else if(r>f.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");n=S(a,c.sublayers,b(c.origin))}}const l=[],d={writeSublayerStructure:n,...t};let h=n;a.forEach(r=>{const c=r.write({},d);l.push(c),h=h||r.originOf("visible")==="user"}),l.some(r=>Object.keys(r).length>1)&&(o.layers=l),h&&(o.visibleLayers=a.filter(r=>r.visible).map(r=>r.id))}createExportImageParameters(e,o,m,t){const a=t&&t.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const n=new H({layer:this,floors:t==null?void 0:t.floors,scale:O({extent:e,width:o})*a}),l=n.toJSON();n.destroy();const d=!t||!t.rotation||this.version<10.3?{}:{rotation:-t.rotation},h=e&&e.spatialReference,y=h.wkid||JSON.stringify(h.toJSON());l.dpi*=a;const r={};if(t!=null&&t.timeExtent){const{start:c,end:u}=t.timeExtent.toJSON();r.time=c&&u&&c===u?""+c:`${c??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(r.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:y,imageSR:y,size:o+","+m,...l,...d,...r}}async fetchImage(e,o,m,t){const{data:a}=await this._fetchImage("image",e,o,m,t);return a}async fetchImageBitmap(e,o,m,t){const{data:a,url:n}=await this._fetchImage("blob",e,o,m,t);return W(a,n,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const o={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:m}=await g(this.url,o),{extent:t,fullExtent:a,timeExtent:n}=m,l=t||a;return{fullExtent:l&&T.fromJSON(l),timeExtent:n&&E.fromJSON({start:n[0],end:n[1]})}}loadAll(){return M(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return Y(this,e)}async _fetchImage(e,o,m,t,a){var d,h,y;const n={responseType:e,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(o,m,t,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(((d=n.query)==null?void 0:d.dynamicLayers)!=null&&!((y=(h=this.capabilities)==null?void 0:h.exportMap)!=null&&y.supportsDynamicLayers))throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:n.query});try{const{data:r}=await g(l,n);return{data:r,url:l}}catch(r){throw R(r)?r:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:r})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:o,ssl:m}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});m&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=o,this.read(o,{origin:"service",url:this.parsedUrl})}};s([p({type:x})],i.prototype,"dateFieldsTimeReference",void 0),s([p({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),s([p()],i.prototype,"dpi",void 0),s([p()],i.prototype,"gdbVersion",void 0),s([p()],i.prototype,"imageFormat",void 0),s([L("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),s([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),s([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),s([p()],i.prototype,"imageTransparency",void 0),s([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),s([p({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),s([p({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),s([p({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),s([p({type:x})],i.prototype,"preferredTimeReference",void 0),s([p()],i.prototype,"sourceJSON",void 0),s([p({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),s([P("sublayers",{layers:{type:[A]},visibleLayers:{type:[j]}})],i.prototype,"writeSublayers",null),s([p({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),s([p({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),s([p(G)],i.prototype,"url",void 0),i=s([F("esri.layers.MapImageLayer")],i);const Ge=i;export{Ge as default};
