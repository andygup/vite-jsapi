import{g5 as g,E as _,dC as D,F as v,i as C,L as G,b9 as Q,r as A,bz as x}from"./index-cc043433.js";import{e as P,f as M,h as Z,j as N,v as z}from"./featureConversionUtils-a0b43be6.js";import{F as L}from"./FeatureStore-cf0c37ed.js";import{c as I,p as b}from"./projectionSupport-642d54a8.js";import{Q as J}from"./QueryEngine-0df59e29.js";import{i as V,c as W,v as B}from"./geojson-4017404e.js";import{a as $,b as U,c as H}from"./clientSideDefaults-183fe284.js";import{l as Y,m as E,c as w,a as F,s as S}from"./sourceUtils-35228b77.js";import{F as q}from"./FieldsIndex-a5650eec.js";import{k as K}from"./fieldType-79ae9077.js";import"./OptimizedGeometry-af84d2ad.js";import"./OptimizedFeatureSet-5c82fe5a.js";import"./BoundsStore-ee545c3a.js";import"./PooledRBush-85d04a64.js";import"./centroid-1116d1e7.js";import"./utils-6eff4397.js";import"./normalizeUtils-0017e781.js";import"./normalizeUtilsCommon-f6f02a9c.js";import"./json-9ae8d6f8.js";import"./MemCache-c77a4496.js";import"./QueryEngineResult-bd207f36.js";import"./quantizationUtils-6d24602e.js";import"./ItemCache-1656900b.js";import"./WhereClause-d4acfd16.js";import"./executionError-e2eca390.js";import"./_commonjsHelpers-725317a4.js";import"./utils-ea154b9e.js";import"./generateRendererUtils-22225a9c.js";import"./QueryEngineCapabilities-60118ddb.js";import"./timeSupport-5750f446.js";import"./defaultsJSON-b396ba80.js";const X={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class De{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=this._fieldsIndex=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const r=[];await this._checkProjection(e.spatialReference);let n=null;e.url&&(n=await this._fetch(t==null?void 0:t.signal));const s=V(n,{geometryType:e.geometryType}),a=e.fields||s.fields||[],l=e.hasZ!=null?e.hasZ:s.hasZ,d=s.geometryType;let p=e.objectIdField||s.objectIdFieldName||"__OBJECTID";const h=e.spatialReference||g;let i=e.timeInfo;a===s.fields&&s.unknownFields.length>0&&r.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:s.unknownFields}});let u=new q(a).get(p);u?(u.type!=="esriFieldTypeString"&&(u.type="esriFieldTypeOID"),u.editable=!1,u.nullable=!1,p=u.name):(u={alias:p,name:p,type:s.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},a.unshift(u));const f={};for(const o of a){if(o.name==null&&(o.name=o.alias),o.alias==null&&(o.alias=o.name),!o.name)throw new _("geojson-layer:invalid-field-name","field name is missing",{field:o});if(!K.jsonValues.includes(o.type))throw new _("geojson-layer:invalid-field-type",`invalid type for field "${o.name}"`,{field:o});if(o.name!==u.name){const m=D(o);m!==void 0&&(f[o.name]=m)}}this._fieldsIndex=new q(a);const c=this._fieldsIndex.requiredFields.indexOf(u);if(c>-1&&this._fieldsIndex.requiredFields.splice(c,1),i){if(i.startTimeField){const o=this._fieldsIndex.get(i.startTimeField);o?(i.startTimeField=o.name,o.type="esriFieldTypeDate"):i.startTimeField=null}if(i.endTimeField){const o=this._fieldsIndex.get(i.endTimeField);o?(i.endTimeField=o.name,o.type="esriFieldTypeDate"):i.endTimeField=null}if(i.trackIdField){const o=this._fieldsIndex.get(i.trackIdField);o?i.trackIdField=o.name:(i.trackIdField=null,r.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:i}}))}!i.startTimeField&&!i.endTimeField&&(r.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:i}}),i=null)}const O=d?$(d):void 0,y={warnings:r,featureErrors:[],layerDefinition:{...X,drawingInfo:O??void 0,templates:U(f),extent:void 0,geometryType:d,objectIdField:p,fields:a,hasZ:!!l,timeInfo:i}};this._queryEngine=new J({fields:a,geometryType:d,hasM:!1,hasZ:l,objectIdField:p,spatialReference:h,timeInfo:i,featureStore:new L({geometryType:d,hasM:!1,hasZ:l}),cacheSpatialQueries:!0}),this._createDefaultAttributes=H(f,p);const T=await this._createFeatures(n);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,T);const k=this._normalizeFeatures(T,y.warnings,y.featureErrors);this._queryEngine.featureStore.addMany(k);const{fullExtent:R,timeExtent:j}=await this._queryEngine.fetchRecomputedExtents();if(y.layerDefinition.extent=R,j){const{start:o,end:m}=j;y.layerDefinition.timeInfo.timeExtent=[o,m]}return y}async applyEdits(e){const{spatialReference:t,geometryType:r}=this._queryEngine;return await Promise.all([Y(t,r),I(e.adds,t),I(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){var n;this._loadOptions.customParameters=e,(n=this._snapshotTask)==null||n.abort(),this._snapshotTask=v(this._snapshotFeatures),this._snapshotTask.promise.then(s=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,s);const a=this._normalizeFeatures(s);a&&this._queryEngine.featureStore.addMany(a)},s=>{this._queryEngine.featureStore.clear(),C(s)||G.getLogger("esri.layers.GeoJSONLayer").error(new _("geojson-layer:refresh","An error occurred during refresh",{error:s}))}),await this._waitSnapshotComplete();const{fullExtent:t,timeExtent:r}=await this._queryEngine.fetchRecomputedExtents();return{extent:t,timeExtent:r}}async _createFeatures(e){if(e==null)return[];const{geometryType:t,hasZ:r,objectIdField:n}=this._queryEngine,s=W(e,{geometryType:t,hasZ:r,objectIdField:n});if(!Q(this._queryEngine.spatialReference,g))for(const a of s)a.geometry!=null&&(a.geometry=P(b(M(a.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),g,this._queryEngine.spatialReference)));return s}async _waitSnapshotComplete(){if(!(!this._snapshotTask||this._snapshotTask.finished)){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:r}=this._loadOptions,s=(await A(t,{responseType:"json",query:{...r},signal:e})).data;return await B(s),s}_normalizeFeatures(e,t,r){const{objectIdField:n}=this._queryEngine,s=[];for(const a of e){const l=this._createDefaultAttributes(),d=E(this._fieldsIndex,l,a.attributes,!0,t);d?r==null||r.push(d):(this._assignObjectId(l,a.attributes,!0),a.attributes=l,a.objectId=l[n],s.push(a))}return s}async _applyEdits(e){const{adds:t,updates:r,deletes:n}=e,s={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t&&t.length&&this._applyAddEdits(s,t),r&&r.length&&this._applyUpdateEdits(s,r),n&&n.length){for(const d of n)s.deleteResults.push(w(d));this._queryEngine.featureStore.removeManyById(n)}const{fullExtent:a,timeExtent:l}=await this._queryEngine.fetchRecomputedExtents();return{extent:a,timeExtent:l,featureEditResults:s}}_applyAddEdits(e,t){const{addResults:r}=e,{geometryType:n,hasM:s,hasZ:a,objectIdField:l,spatialReference:d,featureStore:p}=this._queryEngine,h=[];for(const i of t){if(i.geometry&&n!==x(i.geometry)){r.push(F("Incorrect geometry type."));continue}const u=this._createDefaultAttributes(),f=E(this._fieldsIndex,u,i.attributes);if(f){r.push(f);continue}if(this._assignObjectId(u,i.attributes),i.attributes=u,i.uid!=null){const c=i.attributes[l];e.uidToObjectId[i.uid]=c}if(i.geometry!=null){const c=i.geometry.spatialReference??d;i.geometry=b(S(i.geometry,c),c,d)}h.push(i),r.push(w(i.attributes[l]))}p.addMany(Z([],h,n,a,s,l))}_applyUpdateEdits({updateResults:e},t){const{geometryType:r,hasM:n,hasZ:s,objectIdField:a,spatialReference:l,featureStore:d}=this._queryEngine;for(const p of t){const{attributes:h,geometry:i}=p,u=h&&h[a];if(u==null){e.push(F(`Identifier field ${a} missing`));continue}if(!d.has(u)){e.push(F(`Feature with object id ${u} missing`));continue}const f=N(d.getFeature(u),r,s,n);if(i!=null){if(r!==x(i)){e.push(F("Incorrect geometry type."));continue}const c=i.spatialReference??l;f.geometry=b(S(i,c),c,l)}if(h){const c=E(this._fieldsIndex,f.attributes,h);if(c){e.push(c);continue}}d.add(z(f,r,s,n,a)),e.push(w(u))}}_createObjectIdGenerator(e,t){const r=e.fieldsIndex.get(e.objectIdField);if(r.type==="esriFieldTypeString")return()=>r.name+"-"+Date.now().toString(16);let n=Number.NEGATIVE_INFINITY;for(const s of t)s.objectId&&(n=Math.max(n,s.objectId));return n=Math.max(0,n)+1,()=>n++}_assignObjectId(e,t,r=!1){const n=this._queryEngine.objectIdField;!r||!(n in t)?e[n]=this._objectIdGenerator():e[n]=t[n]}async _checkProjection(e){try{await I(g,e)}catch{throw new _("geojson-layer","Projection not supported")}}}export{De as default};
