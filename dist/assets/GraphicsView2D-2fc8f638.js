import{cb as pe,bP as N,O as C,cc as Oe,bz as he,cd as le,ce as Re,cf as ie,cg as Pe,ch as Ue,ci as Ve,cj as je,p as H,aM as ke,ae as b,af as D,ai as Se,m as Ee,au as Ne,bo as qe,A as Ke,t as v,aB as He,ck as Ze,cl as Xe,i as Z,bt as Ye,Z as ye,X as Qe,cm as ge,cn as xe,co as $e,cp as _e,cq as re,aj as We}from"./index-a9c4c008.js";import{f as ve,H as Je,h as et,e as tt}from"./ExpandedCIM-b662abf2.js";import{n as st}from"./normalizeUtilsSync-4555589b.js";import{c as it,p as rt}from"./projectionSupport-45f570d1.js";import{e as nt,a as ot,b as at}from"./labelingInfo-0a4a299a.js";import{F as lt}from"./definitions-3f56d206.js";import{o as ce,p as $,q as de,r as dt,C as ht,t as J,u as ct,v as ut,b as Le}from"./color-314cda1c.js";import{V as ft,B as be}from"./VertexArrayObject-0dfc47a6.js";import{U as mt}from"./enums-08489827.js";import{W as pt,D as yt}from"./AttributeStoreView-b0531df0.js";import{M as gt}from"./MaterialKey-dd7253d3.js";import{W,c as xt,a as _t,b as vt,e as bt,M as Ct}from"./Matcher-81f57da4.js";import{c as Ce,a as Dt,b as Tt}from"./schemaUtils-7534e523.js";import{F as wt,a as Ft,C as Bt,A as It}from"./ComputedAttributeStorage-533cb852.js";import{c as Mt,a as St,g as Lt,q as zt,b as Gt}from"./featureConversionUtils-d43c9f43.js";import{a as At}from"./normalizeUtils-e3f4b3bd.js";import{q as Ot,a as U}from"./quantizationUtils-b95043a5.js";import{O as ze}from"./OptimizedGeometry-af84d2ad.js";const y=-1;class De{constructor(){this._dirties=[{vertexFrom:y,vertexCount:y,indexFrom:y,indexCount:y,allDirty:!1},{vertexFrom:y,vertexCount:y,indexFrom:y,indexCount:y,allDirty:!1},{vertexFrom:y,vertexCount:y,indexFrom:y,indexCount:y,allDirty:!1},{vertexFrom:y,vertexCount:y,indexFrom:y,indexCount:y,allDirty:!1},{vertexFrom:y,vertexCount:y,indexFrom:y,indexCount:y,allDirty:!1}]}hasDirty(){return this._dirties.some(e=>e.indexCount!==y||e.allDirty)}markAllClean(){for(const e of this._dirties)e.indexFrom=y,e.indexCount=y,e.vertexFrom=y,e.vertexCount=y,e.allDirty=!1}markAllDirty(){for(const e of this._dirties)e.allDirty=!0}forEach(e){for(let t=0;t<this._dirties.length;++t){const{indexCount:s,indexFrom:i,vertexCount:r,vertexFrom:n,allDirty:o}=this._dirties[t],a={};let l,c=!1;(o||n!==y&&r>0)&&(a.geometry={count:r,from:n,allDirty:o},c=!0),(o||i!==y&&s>0)&&(l={count:s,from:i,allDirty:o},c=!0),c&&e({indices:l,vertices:a},t)}}markDirtyIndices(e,t,s){const i=this._dirties[e],r=t,n=s;if(!i.allDirty)if(i.indexCount!==y){const o=Math.min(i.indexFrom,r),a=Math.max(i.indexFrom+i.indexCount,r+n)-o;i.indexFrom=o,i.indexCount=a}else i.indexFrom=r,i.indexCount=n}markDirtyVertices(e,t,s,i){const r=this._dirties[e],n=s,o=i;if(!r.allDirty)if(r.vertexCount!==y){const a=Math.min(r.vertexFrom,n),l=Math.max(r.vertexFrom+r.vertexCount,n+o)-a;r.vertexFrom=a,r.vertexCount=l}else r.vertexFrom=n,r.vertexCount=o}}class Rt{get largestRange(){return this._largestRange}constructor(e){this._largestRange=null,this._parent=e,this._updateLargestRange()}rangeCreated(e){(!this._largestRange||e.count>this._largestRange.count)&&(this._largestRange=e)}rangeResized(e,t){e===this._largestRange?e.count<t&&this._updateLargestRange():(!this._largestRange||e.count>this._largestRange.count)&&(this._largestRange=e)}findBestRange(e){let t=this._parent._freeHead,s=null;for(;t!==null;)t.count>=e&&(!s||t.count-e<s.count-e)&&(s=t),t=t.next;return s}findAdjacentRanges(e,t){let s=!0,i=!1,r=null,n=this._parent._freeHead;for(;s&&!i;){const o=r!==null?r.from+r.count:0,a=n!==null?n.from:this._parent._size;e>=o&&e+t<=a?(s=!1,i=!0):n!==null?(r=n,n=n.next):s=!1}return[r,n]}_updateLargestRange(){let e=null,t=this._parent._freeHead;for(;t!==null;)(!e||t.count>e.count)&&(e=t),t=t.next;this._largestRange=e}}class w{constructor(e,t){this._allocated=0,this._size=e,e>0?this._freeHead={from:0,count:e,prev:null,next:null}:this._freeHead=null,this._bookKeeper=t||new Rt(this),this._freeHead&&this._bookKeeper.rangeCreated(this._freeHead)}allocate(e){const t=this._bookKeeper.findBestRange(e);if(t==null)return-1;const s=t.from,i=t.count;if(t.from+=e,t.count-=e,this._bookKeeper.rangeResized(t,s,i),this._allocated+=e,t.count===0){const r=t.prev!==null?this._freeHead:t.next;w._removeRange(t),this._freeHead=r}return s}free(e,t){const[s,i]=this._bookKeeper.findAdjacentRanges(e,t),r={from:e,count:t,prev:s??null,next:i??null};if(s!=null&&(s.next=r),i!=null&&(i.prev=r),this._bookKeeper.rangeCreated(r),this._allocated-=t,i!=null&&r.from+r.count===i.from){const n=r.from,o=r.count;w._fuse(r,i),w._removeRange(i),this._bookKeeper.rangeResized(r,n,o),this._bookKeeper.rangeResized(i,void 0,0)}if(s!=null&&s.from+s.count===r.from){const n=s.from,o=s.count;w._fuse(s,r),w._removeRange(r),this._bookKeeper.rangeResized(s,n,o),this._bookKeeper.rangeResized(r,void 0,0)}this._freeHead=r.prev!==null?this._freeHead:r}get fragmentation(){const e=this._size-this._allocated;return e===0?0:1-this._bookKeeper.largestRange.count/e}static _removeRange(e){e.prev!==null?e.next!==null?(e.prev.next=e.next,e.next.prev=e.prev):e.prev.next=null:e.next!==null&&(e.next.prev=null)}static _fuse(e,t){e.count+=t.count,e.next=t.next,t.from+=t.count,t.count=0,t.next!==null&&(t.next.prev=e)}}const k=["FILL","LINE","MARKER","TEXT","LABEL"];function Pt(u){const e=u.getStrides(),t={};for(let s=0;s<e.length;s++)t[k[s]]=e[s];return t}const Te=.5;class ee{constructor(e,t,s,i){this._strides=e,this._displayList=t,this._freeListsAndStorage={},this._dirtyMap=null,this._dirtyMap=s;for(const r in e){this._freeListsAndStorage[r]={vtxFreeList:i?new w(i):null,idxFreeList:i?new w(i):null,vertexBuffers:{},indexBuffer:i?new Uint32Array(i):null};for(const n in e[r])this._freeListsAndStorage[r].vertexBuffers[n]={data:i?ce(i,e[r][n]):null,stride:e[r][n]}}}static fromTileData(e,t){var a;const s=Pt(e),i=[0,0,0,0,0],r=[0,0,0,0,0];for(const l of e.tileDisplayData.displayObjects)for(const c of l.displayRecords)i[c.geometryType]=Math.max(i[c.geometryType],c.vertexFrom+c.vertexCount),r[c.geometryType]=Math.max(r[c.geometryType],c.indexFrom+c.indexCount);const n=new ee(s,e.tileDisplayData.displayList,t,void 0),o=((a=e.tileBufferData)==null?void 0:a.geometries)??[];for(let l=0;l<o.length;++l){const c=i[l],d=r[l],h=o[l],f=k[l],m=n._storageFor(f),p=o[l].indexBuffer;m.indexBuffer=p,m.idxFreeList=new w(p.length),m.idxFreeList.allocate(d);let g=0;for(const _ in h.vertexBuffer){const x=o[l].vertexBuffer[_];m.vertexBuffers[_].data=x.data,m.vertexBuffers[_].stride=x.stride;const M=$(x.stride),K=x.data.length*M/x.stride;g||(g=K)}m.vtxFreeList=new w(g),m.vtxFreeList.allocate(c)}return n}delete(e){const t=k[e.geometryType];this._freeVertices(t,e.vertexFrom,e.vertexCount),this._freeIndices(t,e.indexFrom,e.indexCount),this._displayList.removeFromList(e),e.vertexFrom=void 0,e.indexFrom=void 0}setMeshData(e,t,s,i,r){const n=k[e.geometryType];e.meshData=null;let o,a;e.vertexFrom===void 0?(a=t.vertexCount,o=this._allocateVertices(n,a)):t.vertexCount>e.vertexCount?(this._freeVertices(n,e.vertexFrom,e.vertexCount),a=t.vertexCount,o=this._allocateVertices(n,a)):t.vertexCount===e.vertexCount?(o=e.vertexFrom,a=e.vertexCount):(this._freeVertices(n,e.vertexFrom+t.vertexCount,e.vertexCount-t.vertexCount),o=e.vertexFrom,a=t.vertexCount);let l=!0,c,d,h;if(e.indexFrom===void 0?(c=r,h=t.indexCount,d=this._allocateIndices(n,h)):t.indexCount>e.indexCount?(c=this._displayList.removeFromList(e),this._freeIndices(n,e.indexFrom,e.indexCount),h=t.indexCount,d=this._allocateIndices(n,h)):t.indexCount===e.indexCount?(l=!1,d=e.indexFrom,h=e.indexCount):(c=this._displayList.removeFromList(e),this._freeIndices(n,e.indexFrom+t.indexCount,e.indexCount-t.indexCount),d=e.indexFrom,h=t.indexCount),o!==-1&&d!==-1){const f=this._storageFor(n);if(de(o,d,f.vertexBuffers,f.indexBuffer,t,s,i),e.vertexFrom=o,e.indexFrom=d,e.vertexCount=t.vertexCount,e.indexCount=t.indexCount,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const m in s)this._dirtyMap.markDirtyVertices(e.geometryType,m,e.vertexFrom,e.vertexCount)}return l&&this._displayList.addToList(e,c),!0}return o!==-1&&this._freeVertices(n,o,a),d!==-1&&this._freeIndices(n,d,h),e.setMeshDataFromBuffers(t,s,i),e.vertexFrom=void 0,e.vertexCount=0,e.indexFrom=void 0,e.indexCount=0,!1}tryAddMeshData(e,t){const s=t.vertexBuffer,i=t.indexBuffer,r=k[e.geometryType],n=this._allocateVertices(r,e.vertexCount);if(n===-1)return this._freeVertices(r,n,e.vertexCount),!1;const o=this._allocateIndices(r,e.indexCount);if(o===-1)return this._freeVertices(r,n,e.vertexCount),this._freeIndices(r,o,e.indexCount),!1;const a=this._storageFor(r);if(de(n,o,a.vertexBuffers,a.indexBuffer,e,s,i),e.vertexFrom=n,e.indexFrom=o,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const l in s)this._dirtyMap.markDirtyVertices(e.geometryType,l,n,e.vertexCount)}return this._displayList.addToList(e),!0}_allocateVertices(e,t){var n,o;const s=this._storageFor(e),i=(n=s.vtxFreeList)==null?void 0:n.allocate(t);if(i==null||i===-1)return-1;const r=(o=s.vtxFreeList)==null?void 0:o.fragmentation;return r==null||r>Te?-1:i}_freeVertices(e,t,s){var r;(r=this._storageFor(e).vtxFreeList)==null||r.free(t,s)}_freeIndices(e,t,s){var r;(r=this._storageFor(e).idxFreeList)==null||r.free(t,s)}_allocateIndices(e,t){var n,o;const s=this._storageFor(e),i=(n=s.idxFreeList)==null?void 0:n.allocate(t);if(i==null||i===-1)return-1;const r=(o=s.idxFreeList)==null?void 0:o.fragmentation;return r==null||r>Te?-1:i}_storageFor(e){return this._freeListsAndStorage[e]}_stridesFor(e,t){return this._strides[e][t]}}class Ut{constructor(e){this.geometryMap=dt(()=>({indexBuffer:be.createIndex(e,mt.STATIC_DRAW),vao:null}),(t,s)=>({vertexBuffer:be.createVertex(e,ht[s])}))}dispose(){for(let e=0;e<5;e++){const t=this.geometryMap[e];if(t){t.data.vao&&t.data.vao.dispose(!1),t.data.indexBuffer&&t.data.indexBuffer.dispose();for(const s in t.buffers)t.buffers[s]&&t.buffers[s].data.vertexBuffer.dispose()}}}get(e){const t=this.geometryMap[e];return{getVAO(s,i,r){if(!t.data.vao){const n={};for(const o in t.buffers)n[o]=t.buffers[o].data.vertexBuffer;t.data.vao=new ft(s,r,i,n,t.data.indexBuffer)}return t.data.vao}}}has(e){return this.geometryMap[e]!=null}upload(e,t){t.forEach((s,i)=>{this._upload(s,i,e)})}_upload(e,t,s){if(e.indices&&(e.indices.allDirty?this._uploadIndices(s,t):e.indices.from!=null&&e.indices.count!=null&&this._uploadIndices(s,t,e.indices.from,e.indices.count)),e.vertices){const i=e.vertices;for(const r in i){const n=i[r];n.allDirty?this._uploadVertices(s,t,r):n.from!=null&&n.count!=null&&this._uploadVertices(s,t,r,n.from,n.count)}}}_uploadVertices(e,t,s,i,r){const n=this.geometryMap[t];if(!n)return;const o=e.geometries[t].vertexBuffer[s];if(!o)return;const{data:a,stride:l}=o;if(n.buffers[s]&&a.length>0){const c=l/a.BYTES_PER_ELEMENT;i!=null&&r!=null?n.buffers[s].data.vertexBuffer.setSubData(a,i*c,i*c,(i+r)*c):n.buffers[s].data.vertexBuffer.setData(a)}}_uploadIndices(e,t,s,i){const r=this.geometryMap[t];if(!r)return;const n=e.geometries[t].indexBuffer;r.data.indexBuffer&&n.length>0&&(s!=null&&i!=null?r.data.indexBuffer.setSubData(n,s,s,s+i):r.data.indexBuffer.setData(n))}}class Vt extends pt{constructor(){super(...arguments),this._data=null,this._displayList=null,this._lastCommitTime=0,this._hasData=!1,this._invalidated=!1,this._wglBuffers=null,this._dirtyMap=new De}destroy(){super.destroy(),this.clear()}get hasData(){return!!this._hasData}get displayObjects(){return this._displayObjects??[]}getGeometry(e){return!this._wglBuffers||!this._wglBuffers.has(e)?null:this._wglBuffers.get(e)}getDisplayList(){return this._displayList}patch(e){var i,r;if(e.clear===!0){this.clear(),this._hasData=!1;return}const t=e.addOrUpdate,s=e.remove;!this._data&&t&&((i=t.tileDisplayData)!=null&&i.displayObjects.length)?(t.tileDisplayData.computeDisplayList(),this._dirtyMap=new De,this._dispRecStore=ee.fromTileData(t,this._dirtyMap),this._data=t,this._dirtyMap.markAllDirty(),this._hasData=!0,e.end&&this.ready()):this._data?t&&((r=t.tileDisplayData)!=null&&r.displayObjects.length)||s.length?this._doPatchData(e):e.end&&this.ready():e.end&&this.ready(),e.end&&!this._data&&this.clear(),this.requestRender(),this.emit("change")}commit(e){e.time&&e.time===this._lastCommitTime||(this._lastCommitTime=e.time,!(!this.visible||!this._data)&&(this._wglBuffers||(this._wglBuffers=new Ut(e.context)),!(!this._dirtyMap.hasDirty()&&!this._invalidated)&&(this._invalidated=!1,this._wglBuffers.upload(this._data.tileBufferData,this._dirtyMap),this._displayList=this._data.tileDisplayData.displayList.clone(),this._displayObjects=this._data.tileDisplayData.displayObjects.slice(),this._dirtyMap.markAllClean())))}clear(){this._data=null,this._displayList=null,this._dispRecStore=null,this._wglBuffers&&(this._wglBuffers.dispose(),this._wglBuffers=null)}_doPatchData(e){this._invalidated=!0,this._patchData(e)||(this._dirtyMap.markAllDirty(),this._data.reshuffle(),this._dispRecStore=ee.fromTileData(this._data,this._dirtyMap)),this.requestRender()}_patchData(e){let t=!0;const s=e.addOrUpdate&&e.addOrUpdate.tileDisplayData&&e.addOrUpdate.tileDisplayData.displayObjects||[],i=(e.remove||[]).slice();for(const o of s)o.insertAfter!=null&&i.push(o.id);let r;i.length>0&&(r=new Set(i));const n=this._data.tileDisplayData;for(const o of i){const a=n.displayObjectRegistry.get(o);if(a){n.displayList.removeFromList(a.displayRecords);for(const l of a.displayRecords)this._dispRecStore.delete(l);n.displayObjectRegistry.delete(o)}}r!=null&&r.size&&(n.displayObjects=n.displayObjects.filter(o=>!r.has(o.id)));for(const o of s){let a=n.displayObjectRegistry.get(o.id),l;if(a){const d=a.displayRecords;a.set(o),a.displayRecords=d;const h=a.displayRecords.length;for(let f=0;f<h;++f){const m=a.displayRecords[f],p=o.displayRecords[f];(f>=o.displayRecords.length||m.geometryType!==p.geometryType||m.symbolLevel!==p.symbolLevel||m.zOrder!==p.zOrder||m.materialKey!==p.materialKey)&&(this._dispRecStore.delete(a.displayRecords[f]),f<o.displayRecords.length&&(a.displayRecords[f]=void 0))}a.displayRecords.length=o.displayRecords.length}else{a=o.copy(),a.displayRecords=[],n.displayObjectRegistry.set(o.id,a);let d;const h=n.displayObjects;if(a.insertAfter!=null)if(l={},a.insertAfter>=0){const f=n.displayObjectRegistry.get(a.insertAfter);f?(d=h.indexOf(f)+1,d<h.length?h.splice(d,0,a):(h.push(a),d=h.length)):(h.push(a),d=h.length)}else h.unshift(a),d=0;else h.push(a),d=h.length;if(l){const f=o.displayRecords.length>0?1:0;let m=0;for(let p=d-1;p>=0&&m<f;--p)for(let g=h[p].displayRecords.length-1;g>=0&&m<f;--g){const _=h[p].displayRecords[g],x=n.displayList.getDPInfoType();l[x]||(l[x]=_,++m)}}}const c=o.displayRecords.length;for(let d=0;d<c;++d){const h=o.displayRecords[d];let f=a.displayRecords[d];f?(f.meshData=h.meshData,f.materialKey=h.materialKey):(f=h.copy(),f.vertexFrom=void 0,f.indexFrom=void 0,a.displayRecords[d]=f);const m=h.geometryType,p=n.displayList.getDPInfoType(),g=e.addOrUpdate.tileBufferData.geometries[m],_=g.vertexBuffer,x=g.indexBuffer;let M;l&&(l[p]?M=n.displayList.splitAfter(l[p]):M=-1),t=this._dispRecStore.setMeshData(f,h,_,x,M)&&t,l&&f.indexFrom!=null&&f.indexFrom!=null&&(l[p]=f)}}return t}}class Ge{constructor(){this._byGeometryType=null}get satisfied(){return!this._byGeometryType}reset(){this._byGeometryType=null}verticesFor(e){return this._byGeometryType?this._byGeometryType[e].vertices:0}indicesFor(e){return this._byGeometryType?this._byGeometryType[e].indices:0}needMore(e,t,s){if(!t&&!s)return;this._byGeometryType||(this._byGeometryType=[{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0}]);const i=this._byGeometryType[e];i.vertices+=t,i.indices+=s}}const ne=5;class G{constructor(){this.geometries=[{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}}]}clone(){const e=new G;for(let t=0;t<this.geometries.length;t++){const s=this.geometries[t],i=e.geometries[t];i.indexBuffer=s.indexBuffer.slice(),i.vertexBuffer={};for(const r in s.vertexBuffer){const{data:n,stride:o}=s.vertexBuffer[r];i.vertexBuffer[r]={data:n.slice(),stride:o}}}return e}static deserialize(e){const t=new G;for(let s=0;s<ne;++s){t.geometries[s].indexBuffer=new Uint32Array(e.geometries[s].indexBuffer),t.geometries[s].vertexBuffer={};for(const i in e.geometries[s].vertexBuffer)t.geometries[s].vertexBuffer[i]={data:J(e.geometries[s].vertexBuffer[i].data,e.geometries[s].vertexBuffer[i].stride),stride:e.geometries[s].vertexBuffer[i].stride}}return t}serialize(){const e={geometries:[{indexBuffer:this.geometries[0].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[1].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[2].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[3].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[4].indexBuffer.buffer,vertexBuffer:{}}]};for(let t=0;t<ne;++t)for(const s in this.geometries[t].vertexBuffer)e.geometries[t].vertexBuffer[s]={data:this.geometries[t].vertexBuffer[s].data.buffer,stride:this.geometries[t].vertexBuffer[s].stride};return e}getBuffers(){const e=[];for(let t=0;t<ne;++t){e.push(this.geometries[t].indexBuffer.buffer);for(const s in this.geometries[t].vertexBuffer)e.push(this.geometries[t].vertexBuffer[s].data.buffer)}return e}}function X(u,e,t,...s){e<u.length?u.splice(e,t,...s):u.push(...s)}class ue{constructor(){this.symbolLevels=[]}replay(e,t,s){for(const i of this.symbolLevels)for(const r of i.zLevels){const o=r.geometryDPInfo.unified;if(o)for(const a of o){const{geometryType:l,materialKey:c,indexFrom:d,indexCount:h}=a,f=gt.load(c).symbologyType,m=e.painter.getBrush(l,f),p=t.getGeometry(l),g={geometryType:l,materialKey:c,indexFrom:d,indexCount:h,target:p};m.prepareState(e),m.drawGeometry(e,t,g,s)}}}get empty(){return!this.symbolLevels||this.symbolLevels.length===0}clear(){this.symbolLevels.length=0}addToList(e,t){if(!Array.isArray(e)){this._addToList(e,t);return}for(const s of e)this._addToList(s,t)}removeFromList(e){Array.isArray(e)||(e=[e]);let t=null;for(const s of e)t=this._removeFromList(s);return t}clone(){const e=new ue;for(const t of this.symbolLevels)e.symbolLevels.push(t.clone());return e}splitAfter(e){const t=this._getDisplayList(e.symbolLevel,e.zOrder),s=t.length,i=e.indexFrom+e.indexCount;for(let r=0;r<s;++r){const n=t[r];if(n.geometryType===e.geometryType&&i>n.indexFrom&&i<=n.indexFrom+n.indexCount){if(i<n.indexFrom+n.indexCount){const o=new E;o.geometryType=n.geometryType,o.materialKey=n.materialKey,o.indexFrom=i,o.indexCount=n.indexFrom+n.indexCount-i,t.splice(r+1,0,o),n.indexCount=i-n.indexFrom}return r}}}_addToList(e,t){const s=e.symbolLevel,i=e.zOrder,r=this._getDisplayList(s,i),n=t??r.length-1,o=n>=0&&n<r.length?r[n]:null;if(o!==null&&o.materialKey===e.materialKey&&o.indexFrom+o.indexCount===e.indexFrom&&o.geometryType===e.geometryType)o.indexCount+=e.indexCount;else{const a=new E;a.indexFrom=e.indexFrom,a.indexCount=e.indexCount,a.materialKey=e.materialKey,a.geometryType=e.geometryType,X(r,n+1,0,a)}}_removeFromList(e){const t=e.symbolLevel,s=e.zOrder,i=this._getDisplayList(t,s),r=i.length;let n;for(let o=0;o<r;++o){const a=i[o];if(e.indexFrom+e.indexCount>a.indexFrom&&e.indexFrom<a.indexFrom+a.indexCount&&a.geometryType===e.geometryType){n=o;break}}if(n!==void 0){const o=i[n];if(e.indexFrom===o.indexFrom)return o.indexCount-=e.indexCount,o.indexFrom+=e.indexCount,o.indexCount===0&&X(i,n,1),n-1;if(e.indexFrom+e.indexCount===o.indexFrom+o.indexCount)return o.indexCount-=e.indexCount,o.indexCount===0?(X(i,n,1),n-1):n;{const a=o.indexFrom,l=e.indexFrom-o.indexFrom,c=e.indexCount,d=o.indexFrom+o.indexCount-(e.indexFrom+e.indexCount);o.indexCount=l;const h=new E;return h.geometryType=o.geometryType,h.materialKey=o.materialKey,h.indexFrom=a+l+c,h.indexCount=d,X(i,n+1,0,h),n}}return null}_getDisplayList(e,t){let s;const i=this.symbolLevels.length;for(let o=0;o<i;o++)if(this.symbolLevels[o].symbolLevel===e){s=this.symbolLevels[o];break}s||(s=new me,s.symbolLevel=e,this.symbolLevels.push(s));let r;const n=s.zLevels.length;for(let o=0;o<n;o++)if(s.zLevels[o].zLevel===t){r=s.zLevels[o];break}return r||(r=new fe,r.geometryDPInfo=new se,r.zLevel=t,s.zLevels.push(r)),r.geometryDPInfo.unified||(r.geometryDPInfo.unified=[]),r.geometryDPInfo.unified}getDPInfoType(){return"unified"}}class E{constructor(){this.materialKey=null,this.indexFrom=0,this.indexCount=0}clone(){const e=new E;return e.geometryType=this.geometryType,e.materialKey=this.materialKey,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e}}class se{constructor(){this.fill=null,this.line=null,this.marker=null,this.text=null,this.label=null,this.unified=null}clone(){const e=new se;return e.fill=this.fill&&this.fill.map(t=>t.clone()),e.line=this.line&&this.line.map(t=>t.clone()),e.marker=this.marker&&this.marker.map(t=>t.clone()),e.text=this.text&&this.text.map(t=>t.clone()),e.label=this.label&&this.label.map(t=>t.clone()),e.unified=this.unified&&this.unified.map(t=>t.clone()),e}}class fe{constructor(){this.geometryDPInfo=new se}clone(){const e=new fe;return e.zLevel=this.zLevel,e.geometryDPInfo=this.geometryDPInfo.clone(),e}}class me{constructor(){this.zLevels=[]}clone(){const e=new me;e.symbolLevel=this.symbolLevel;for(const t of this.zLevels)e.zLevels.push(t.clone());return e}}class we{constructor(){this.vertexData=new Map,this.vertexCount=0,this.indexData=[]}clear(){this.vertexData.clear(),this.vertexCount=0,this.indexData=[]}update(e,t,s){for(const i in e)this.vertexData.set(i,e[i]);for(const i in this.vertexData)e[i]===null&&this.vertexData.delete(i);this.vertexCount=t,this.indexData=s}}class P{constructor(e,t,s,i=0,r=0){this.id=e,this.geometryType=t,this.materialKey=s,this.minZoom=i,this.maxZoom=r,this.meshData=null,this.symbolLevel=0,this.zOrder=0,this.vertexFrom=0,this.vertexCount=0,this.indexFrom=0,this.indexCount=0,this._sortKey=null}get sortKey(){return this._sortKey==null&&this._computeSortKey(),this._sortKey}clone(){return this.copy()}copy(){const e=new P(this.id,this.geometryType,this.materialKey);return e.vertexFrom=this.vertexFrom,e.vertexCount=this.vertexCount,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e.zOrder=this.zOrder,e.symbolLevel=this.symbolLevel,e.meshData=this.meshData,e.minZoom=this.minZoom,e.maxZoom=this.maxZoom,e}setMeshDataFromBuffers(e,t,s){const i=new we;for(const r in t){const n=t[r].stride,o=t[r].data;if(!o)continue;const a=[],l=$(n);for(let c=0;c<n*e.vertexCount/l;++c)a[c]=o[c+n*e.vertexFrom/l];i.vertexData.set(r,a)}i.indexData.length=0;for(let r=0;r<e.indexCount;++r)i.indexData[r]=s[r+e.indexFrom]-e.vertexFrom;i.vertexCount=e.vertexCount,this.meshData=i}readMeshDataFromBuffers(e,t){this.meshData?this.meshData.clear():this.meshData=new we;for(const s in e){const i=e[s].stride,r=e[s].data,n=[],o=$(i);for(let a=0;a<i*this.vertexCount/o;++a)n[a]=r[a+i*this.vertexFrom/o];this.meshData.vertexData.set(s,n)}this.meshData.indexData.length=0;for(let s=0;s<this.indexCount;++s)this.meshData.indexData[s]=t[s+this.indexFrom]-this.vertexFrom;this.meshData.vertexCount=this.vertexCount}writeMeshDataToBuffers(e,t,s,i){if(this.meshData){for(const r in t){const n=t[r].stride,o=this.meshData.vertexData.get(r),a=t[r].data,l=$(n);for(let c=0;c<n*this.meshData.vertexCount/l;++c)a[c+n*e/l]=o[c]}for(let r=0;r<this.meshData.indexData.length;++r)i[r+s]=this.meshData.indexData[r]+e;this.vertexFrom=e,this.vertexCount=this.meshData.vertexCount,this.indexFrom=s,this.indexCount=this.meshData.indexData.length}}static writeAllMeshDataToBuffers(e,t,s){let i=0,r=0;for(const n of e)n.writeMeshDataToBuffers(i,t,r,s),i+=n.vertexCount,r+=n.indexCount}_computeSortKey(){this._sortKey=(this.symbolLevel&31)<<12|(this.zOrder&127)<<4|this.geometryType&7}serialize(e){return e.push(this.geometryType),e.push(this.materialKey),e.push(this.vertexFrom),e.push(this.vertexCount),e.push(this.indexFrom),e.push(this.indexCount),e.push(this.minZoom),e.push(this.maxZoom),e}static deserialize(e,t){const s=e.readInt32(),i=e.readInt32(),r=new P(t.id,s,i);return r.vertexFrom=e.readInt32(),r.vertexCount=e.readInt32(),r.indexFrom=e.readInt32(),r.indexCount=e.readInt32(),r.minZoom=e.readInt32(),r.maxZoom=e.readInt32(),r}}function Ae(u,e){if(e===null){u.push(0);return}u.push(e.length);for(const t of e)t.serialize(u);return u}function jt(u,e,t){const s=u.readInt32(),i=new Array(s);for(let r=0;r<i.length;r++)i[r]=e.deserialize(u,t);return i}class A{constructor(e){this.insertAfter=null,this.id=e,this.displayRecords=[]}copy(){const e=new A(this.id);return e.set(this),e}clone(){const e=new A(this.id);return e.displayRecords=this.displayRecords.map(t=>t.clone()),e.insertAfter=this.insertAfter,e}set(e){this.id=e.id,this.displayRecords=e.displayRecords,this.insertAfter=e.insertAfter}serialize(e){return e.push(this.id),Ae(e,this.displayRecords),e}static deserialize(e){const t=e.readInt32(),s=new A(t),i={id:t};return s.displayRecords=jt(e,P,i)??[],s}}class q{constructor(){this.displayObjects=[],this._displayList=null}get displayObjectRegistry(){if(!this._displayObjectRegistry){this._displayObjectRegistry=new Map;for(const e of this.displayObjects)this._displayObjectRegistry.set(e.id,e)}return this._displayObjectRegistry}get displayList(){return this._displayList}computeDisplayList(){this._displayList=new ue;for(const e of this.displayObjects)for(const t of e.displayRecords)this._displayList.addToList(t)}clone(){const e=new q;return this.displayObjects&&(e.displayObjects=this.displayObjects.map(t=>t.clone())),e}serialize(e){return Ae(e,this.displayObjects),e}_deserializeObjects(e){const t=e.readInt32(),s=new Array(t),i=new Map;for(let r=0;r<s.length;++r){const n=A.deserialize(e);s[r]=n,i.set(n.id,n)}this.displayObjects=s,this._displayList=null,this._displayObjectRegistry=i}static deserialize(e){const t=new q;return t._deserializeObjects(e),t}}class O{constructor(e,t){this.data=e,this.stride=t}static decode(e){const t=J(e.data,e.stride),s=e.stride;return new O(t,s)}static fromVertexVector(e){const t=J(e.data.buffer(),e.stride),s=e.stride;return new O(t,s)}}class R{constructor(e,t,s){this.geometryType=e,this.indexBuffer=new Uint32Array(t),this.namedBuffers=s}static decode(e){const t=e.geometryType,s=e.indexBuffer,i={};for(const r in e.namedBuffers)i[r]=O.decode(e.namedBuffers[r]);return new R(t,s,i)}static fromVertexData(e,t){const s=e.indices,i=J(e.vertices,e.stride),r=e.stride,n={geometry:new O(i,r)};return new R(t,s,n)}static fromVertexVectors(e){const t=e.geometryType,s=e.indexVector.buffer(),i={};let r;for(r in e.namedVectors)i[r]=O.fromVertexVector(e.namedVectors[r]);return new R(t,s,i)}}class kt{get vertexCount(){const e=this.stride/4,t=this.data.length/e;return t!==(t|0)&&console.debug("Corrupted stride"),t}constructor(e,t){this.data=e,this.stride=t}transfer(e,t){const s=this.data.buffer();e.vertexCount=this.vertexCount,e.data=s,e.stride=this.stride,t.push(s)}}class Et{constructor(e,t,s){this.geometryType=e,this.indexVector=new W(Uint32Array,t*6),this.namedVectors={};const i=ct(e,s);for(const r in i){const n=i[r];let o;switch(n%4){case 0:case 2:o=new W(Uint32Array,n*t);break;case 1:case 3:o=new W(Uint8Array,n*t);break}this.namedVectors[r]=new kt(o,n)}}get(e){return this.namedVectors[e].data}getVector(e){return this.namedVectors[e]}transfer(e,t){const s=this.indexVector.buffer(),i={};t.push(s);let r;for(r in this.namedVectors){const n=this.namedVectors[r];i[r]={},n.transfer(i[r],t)}e.geometryType=this.geometryType,e.indexBuffer=s,e.namedBuffers=i,this.destroy()}intoBuffers(){const e=R.fromVertexVectors(this);return this.destroy(),e}destroy(){this.indexVector=null,this.namedVectors=null}}const Y=new Ge,S=new Ge,Nt=5;function qt(u,e){const t={};for(const s in u){const i={data:ce(e,u[s]),stride:u[s]};t[s]=i}return t}function Kt(u){return[u.fill||{},u.line||{},u.icon||{},u.text||{},u.label||{}]}function Ht(u){const e=[[],[],[],[],[]],t=u;for(const s of t)for(const i of s.displayRecords)e[i.geometryType].push(i);return e}class T{constructor(){this.tileDisplayData=null,this.tileBufferData=null}reshuffle(){var n,o,a;if(Y.reset(),!this.tileDisplayData)return;const e=Ht(this.tileDisplayData.displayObjects);for(const l of e)for(const c of l)c&&Y.needMore(c.geometryType,c.meshData?c.meshData.vertexCount:c.vertexCount,c.meshData?c.meshData.indexData.length:c.indexCount);const t=e.length,s=new G;for(let l=0;l<t;++l){s.geometries[l].indexBuffer=new Uint32Array(Math.round(pe*Y.indicesFor(l)));const c=[],d=(n=this.tileBufferData)==null?void 0:n.geometries[l].vertexBuffer;if(!d)continue;for(const p in d)c.push(d[p].stride);const h=T._computeVertexAlignment(c),f=Math.round(pe*Y.verticesFor(l)),m=T._align(f,h);for(const p in d){const g=d[p].stride;s.geometries[l].vertexBuffer[p]={stride:g,data:ce(m,g)}}}S.reset(),(o=this.tileDisplayData.displayList)==null||o.clear();for(let l=0;l<t;++l){const c=e[l];for(const d of c){if(d.meshData)d.writeMeshDataToBuffers(S.verticesFor(l),s.geometries[l].vertexBuffer,S.indicesFor(l),s.geometries[l].indexBuffer),d.meshData=null;else{const h=(a=this.tileBufferData)==null?void 0:a.geometries[l];if(h){const f=h.vertexBuffer,m=h.indexBuffer,p=s.geometries[l].vertexBuffer,g=s.geometries[l].indexBuffer,_=S.verticesFor(l),x=S.indicesFor(l);de(_,x,p,g,d,f,m),d.vertexFrom=_,d.indexFrom=x}}S.needMore(l,d.vertexCount,d.indexCount)}}const{displayList:i,displayObjects:r}=this.tileDisplayData;if(i)for(const l of r)i.addToList(l.displayRecords);this.tileBufferData=s}getStrides(){var s;const e=[],t=(s=this.tileBufferData)==null?void 0:s.geometries;if(!t)return e;for(let i=0;i<t.length;++i){const r=t[i];e[i]={};for(const n in r.vertexBuffer)e[i][n]=r.vertexBuffer[n].stride}return e}clone(){var t,s;const e=new T;return e.tileBufferData=((t=this.tileBufferData)==null?void 0:t.clone())??null,e.tileDisplayData=((s=this.tileDisplayData)==null?void 0:s.clone())??null,e}_guessSize(){var n;const e=((n=this.tileDisplayData)==null?void 0:n.displayObjects)??[],t=Math.min(e.length,4),s=3*4,i=10*4;let r=0;for(let o=0;o<t;o++)r=Math.max(r,e[o].displayRecords.length);return(e.length*s+e.length*r*i)*2}serialize(){const e=this.tileBufferData.serialize(),t=this.tileBufferData.getBuffers(),i=this.tileDisplayData.serialize(new W(Int32Array,this._guessSize())).buffer();return t.push(i),{result:{displayData:i,bufferData:e},transferList:t}}static fromVertexData(e,t){const s={},i=new Map;for(const r of t)i.set(r.id,r);return ut(r=>{const n=e.data[r];if(n!=null){const a=yt.from(n.records).getCursor();for(;a.next();){const l=a.id,c=a.materialKey,d=a.indexFrom,h=a.indexCount,f=a.vertexFrom,m=a.vertexCount,p=i.get(l),g=new P(l,r,c);g.indexFrom=d,g.indexCount=h,g.vertexFrom=f,g.vertexCount=m,p.displayRecords.push(g)}s[r]=R.fromVertexData(n,r)}else s[r]=new Et(r,0,Le.DEFAULT).intoBuffers()}),T.fromMeshData({displayObjects:t,vertexBuffersMap:s})}static fromMeshData(e){const t=new T,s=new q,i=new G;s.displayObjects=e.displayObjects;for(const r in e.vertexBuffersMap){const n=r,o=e.vertexBuffersMap[n];i.geometries[n].indexBuffer=o.indexBuffer,i.geometries[n].vertexBuffer=o.namedBuffers}return t.tileDisplayData=s,t.tileBufferData=i,t}static bind(e,t){const s=new T;return s.tileDisplayData=e,s.tileBufferData=t,s}static create(e,t){const s=new T;s.tileDisplayData=new q,s.tileDisplayData.displayObjects=e;const i=[0,0,0,0,0],r=[0,0,0,0,0],n=[[],[],[],[],[]];for(const l of e)for(const c of l.displayRecords)n[c.geometryType].push(c),i[c.geometryType]+=c.meshData.vertexCount,r[c.geometryType]+=c.meshData.indexData.length;const o=new G,a=Kt(t);for(let l=0;l<Nt;l++){const c=new Uint32Array(r[l]),d=qt(a[l],i[l]);P.writeAllMeshDataToBuffers(n[l],d,c),o.geometries[l]={indexBuffer:c,vertexBuffer:d}}return s.tileBufferData=o,s}static _align(e,t){const s=e%t;return s===0?e:e+(t-s)}static _computeVertexAlignment(e){let t=!1,s=!1;for(const i of e)i%4===2?t=!0:i%4!==0&&(s=!0);return s?4:t?2:1}}const L=512,B=50;function Zt(u,e){const t=N(e);if(!t)return null;const[s,i]=t.valid;return u[2]>i?[C([u[0],u[1],i,u[3]]),C([s,u[1],s+u[2]-i,u[3]])]:u[0]<s?[C([s,u[1],u[2],u[3]]),C([i-(s-u[0]),u[1],i,u[3]])]:null}function Xt(u){return u==="text"||u==="esriTS"}function Yt(u){return u==="simple-marker"||u==="picture-marker"||u==="esriSMS"||u==="esriPMS"}function Fe(u){switch(u.geometry.type){case"point":case"multipoint":return 0;case"polyline":return 1;case"polygon":case"extent":return 2}return 0}function Qt(u){if(!u)return null;const{xmin:e,ymin:t,xmax:s,ymax:i,spatialReference:r}=u;return new Oe({rings:[[[e,t],[e,i],[s,i],[s,t],[e,t]]],spatialReference:r})}class te extends wt{static from(e,t,s){const i=Ft.createInstance(),r=[],n=e.filter(o=>!!o.geometry);for(const o of n){const a=he(o.geometry);Mt(r,[o],a,!1,!1,t)}return new te(i,r,s)}constructor(e,t,s){super(e,t,null),this._transform=s}get geometryType(){const e=this._current;return e?e.geometryType:null}get insertAfter(){return this._current.insertAfter}readGraphic(){return this._current}getCursor(){return this.copy()}copy(){const e=new te(this.instance,this._features,this._transform);return this.copyInto(e),e}}const V=new ze,oe=new ze,Be="esriGeometryPolyline";function Ie(u){u.coords.length=0,u.lengths.length=0}class I{constructor(){this.bounds=C(),this.graphic=null}static acquire(e=null,t,s,i,r){let n;return I._pool.length===0?n=new I:(n=I._pool.pop(),this._set.delete(n)),n.acquire(e,t,s,i,r),n}static release(e){!e||this._set.has(e)||(e.release(),this._pool.push(e),this._set.add(e))}static getCentroidQuantized(e,t){if(le(e.geometry)){const s=e.symbol;if(s==null)return null;if((s==null?void 0:s.layers.length)>0&&s.layers.some(r=>r.type==="text"||r.type==="marker")){const r=Re(e.geometry);return r!==null?Ot(t,{},{x:r[0],y:r[1]},!1,!1):null}}return null}acquire(e=null,t,s,i,r){e&&this.set(e,t,s,i,r)}release(){this.graphic=null,this.symbolResource=null,this.geometry=null}get symbol(){return this.symbolResource.symbol}set(e,t,s,i,r){this.graphic=e,this.geometry=s,this.symbolResource=t,this.bounds=i,r&&(this.size=r)}getGeometryQuantized(e,t,s,i){const r=this.geometry,n=he(r);if(n==null)return null;switch(n){case"esriGeometryPolygon":{const o=r,{rings:a}=o;if(!a||a.length===0)return null;let l;if(a.length===1&&a[0].length===2?l=U(e,{paths:[[a[0][0],a[0][1]]]}):l=U(e,this.geometry),!l){const c={x:a[0][0][0],y:a[0][0][1]};if(l=U(e,c),l){const{x:d,y:h}=l;return{rings:[[[d-1,h],[1,-1],[1,1],[-1,1],[-1,-1]]]}}}return l}case"esriGeometryPolyline":{const o=r;Ie(V),Ie(oe);const a=o.hasZ??!1,l=o.hasM??!1;return St(V,o),Lt(oe,V,a,l,Be,e.scale[0]),zt(V,oe,a,l,Be,e),Gt(V,o.hasZ??!1,o.hasM??!1)}case"esriGeometryMultipoint":{const o=r,a=.5*i*Math.max(Math.abs(this.size[0])+this.size[2]-this.size[0],Math.abs(this.size[1])+this.size[3]-this.size[1]),l=N(s);let c=o.points;if(l){const[d,h]=l.valid,f=h-d;c=c.filter(m=>{if(m[0]+a>h||m[0]-a<d){const p=[...m];return m[0]+a>h?p[0]-=f:p[0]+=f,ie(t,m,a)||ie(t,p,a)}return ie(t,m,a)})}return c.length===0?{points:c}:U(e,{points:c})}}return U(e,this.geometry)}}I._pool=[];I._set=new Set;const j={minX:0,minY:0,maxX:0,maxY:0},z=C(),Me=1e-5;function Q(u,e,t,s,i){return j.minX=e,j.minY=t,j.maxX=s,j.maxY=i,u.search(j)}function $t(u){return{minX:u.bounds[0],minY:u.bounds[1],maxX:u.bounds[2],maxY:u.bounds[3]}}class Wt{constructor(e,t,s,i,r,n,o){this._graphics=i,this._onAdd=r,this._onRemove=n,this._hashToCIM=o,this._index=Pe(9,$t),this._itemByGraphic=new Map,this._inflatedSizeHelper=new ve,this._tileInfoView=e,this._uidFieldName=s;const a=e.getClosestInfoForScale(t);a&&(this._resolution=this._tileInfoView.getTileResolution(a.level))}setResourceManager(e){this._cimResourceManager=e,this._hittestDrawHelper=new Je(e)}hitTest(e,t,s,i,r){var m;e=At(e,this._tileInfoView.spatialReference);const n=.5*i*window.devicePixelRatio*s;z[0]=e-n,z[1]=t-n,z[2]=e+n,z[3]=t+n;const o=.5*i*(s+B),a=Q(this._index,e-o,t-o,e+o,t+o);if(!a||a.length===0)return[];const l=[],c=C(),d=C();for(const p of a){const{geometry:g,symbolResource:_}=p;this._getSymbolBounds(c,_,g,d,r),d[3]=d[2]=d[1]=d[0]=0,Ue(c,z)&&((m=p.graphic)!=null&&m.visible)&&l.push(p)}if(l.length===0)return[];const h=this._hittestDrawHelper,f=[];for(const p of l){const{geometry:g,symbolResource:_}=p,{hash:x,textInfo:M}=_,K=this._hashToCIM.get(x);K&&h.hitTest(z,K.symbol,g,M,r,i)&&f.push(p)}return f.sort(Jt),f.map(p=>p.graphic)}getGraphicsData(e,t,s){const i=this._searchForItems(t);if(i.length===0||s.length===0)return[];i.sort((d,h)=>d.zorder-h.zorder),i[0].insertAfter=-1;for(let d=1;d<i.length;d++)i[d].insertAfter=i[d-1].graphic.uid;i.sort((d,h)=>d.graphic.uid-h.graphic.uid),s.sort((d,h)=>d.uid-h.uid);let r=0,n=0,o;const a=t.resolution,l=[],c={originPosition:"upperLeft",scale:[a,a],translate:[t.bounds[0],t.bounds[3]]};for(const d of s){for(n=-2;r<i.length;)if(o=i[r],r++,d.uid===o.graphic.uid){n=o.insertAfter;break}if(!(o!=null&&o.geometry)||n===-2)continue;const h=o.getGeometryQuantized(c,t.bounds,this._tileInfoView.spatialReference,a),f={...o.graphic.attributes};f[this._uidFieldName]=d.uid,o.groupId==null&&(o.groupId=e.createTemplateGroup(o.symbol,null)),l.push({centroid:I.getCentroidQuantized(o,c),geometry:h,attributes:f,symbol:o.symbol,groupId:o.groupId,insertAfter:n,zorder:o.zorder})}return l.sort((d,h)=>d.zorder-h.zorder),l}queryTileData(e,t){if(this._graphics.length===0)return[];const{bounds:s,resolution:i}=t,r=this._searchForItems(t),n=[];return r.length===0||this._createTileGraphics(n,e,r,{originPosition:"upperLeft",scale:[i,i],translate:[s[0],s[3]]},t),n}has(e){return this._itemByGraphic.has(e)}getBounds(e){const t=this._itemByGraphic.get(e);return t?t.bounds:null}getAllBounds(){return Array.from(this._itemByGraphic.values()).filter(e=>e.graphic.visible).map(e=>e.bounds)}addOrModify(e,t,s){if(!e||t==null)return;this.has(e)&&this.remove(e),this._onAdd(e);const i=[0,0,0,0],r=this._getSymbolBounds(null,t,s,i,0),n=I.acquire(e,t,s,r??null,i);return this._itemByGraphic.set(e,n),s&&this._index.insert(n),n.bounds}remove(e){if(!this._itemByGraphic.has(e))return;this._onRemove(e);const t=this._itemByGraphic.get(e);t!=null&&t.bounds&&this._index.remove(t),this._itemByGraphic.delete(e)}updateZ(){const e=this._graphics.items;let t,s;for(let i=0;i<e.length;i++)s=e[i],t=this._itemByGraphic.get(s),t&&(t.zorder=i)}update(e,t,s){const i=this._itemByGraphic.get(e);i.groupId=null;const r=Ve(i.bounds);this._index.remove(i);const n=this._getSymbolBounds(i.bounds,t,s,i.size,0);return n!=null&&i.set(e,t,s,n,i.size),s&&this._index.insert(i),{oldBounds:r,newBounds:i.bounds}}updateLevel(e){if(this._resolution===e)return;this._resolution=e,this._index.clear();const t=this._itemByGraphic,s=[];for(const[i,r]of t){const n=this._getSymbolBounds(r.bounds,r.symbolResource,r.geometry,r.size,0);r.geometry&&n!=null&&(r.bounds=n,s.push(r))}this._index.load(s)}clear(){this._itemByGraphic.clear(),this._index.clear()}_createTileGraphics(e,t,s,i,r){const n=this._uidFieldName,o=this._tileInfoView.spatialReference,{bounds:a,resolution:l}=r;s.sort((m,p)=>m.zorder-p.zorder);let c,d,h,f;for(let m=0;m<s.length;m++){h=s[m],c=h.graphic,d=h.getGeometryQuantized(i,a,o,l),f=m===0?-1:s[m-1].graphic.uid;const p={...h.graphic.attributes};p[n]=c.uid,h.groupId==null&&(h.groupId=t.createTemplateGroup(h.symbol,null)),e.push({centroid:I.getCentroidQuantized(h,i),geometry:d,attributes:p,symbol:h.symbol,groupId:h.groupId,insertAfter:f,zorder:h.zorder})}}_searchForItems(e){const t=this._tileInfoView.spatialReference,s=e.bounds,i=N(t);if(i&&t.isWrappable){const[r,n]=i.valid,o=Math.abs(s[2]-n)<Me,a=Math.abs(s[0]-r)<Me;if(!(o&&a)&&(o||a)){const l=e.resolution;let c;o?c=C([r,s[1],r+l*B,s[3]]):c=C([n-l*B,s[1],n,s[3]]);const d=Q(this._index,s[0],s[1],s[2],s[3]),h=Q(this._index,c[0],c[1],c[2],c[3]);return[...new Set([...d,...h])]}}return Q(this._index,s[0],s[1],s[2],s[3])}_getSymbolBounds(e,t,s,i,r){if(!t||!t.symbol||!s)return null;if(e||(e=C()),je(e,s),!i||i[0]===0&&i[1]===0&&i[2]===0&&i[3]===0){const{hash:a,textInfo:l}=t,c=this._hashToCIM.get(a);if(!c)return null;i||(i=[0,0,0,0]);const d=this._inflatedSizeHelper.getSymbolInflateSize(i,c.symbol,this._cimResourceManager,r,l);i[0]=H(d[0]),i[1]=H(d[1]),i[2]=H(d[2]),i[3]=H(d[3])}const n=this._resolution,o=ve.safeSize(i);return e[0]-=o*n,e[1]-=o*n,e[2]+=o*n,e[3]+=o*n,e}}const Jt=(u,e)=>{const t=Fe(u.graphic),s=Fe(e.graphic);return t===s?e.zorder-u.zorder:t-s},es=u=>{let e=class extends ke(u){constructor(){super(...arguments),this.graphics=null,this.renderer=null}};return b([D()],e.prototype,"graphics",void 0),b([D()],e.prototype,"renderer",void 0),b([D()],e.prototype,"updating",void 0),b([D()],e.prototype,"view",void 0),e=b([Se("esri.views.layers.GraphicsView")],e),e},ts=Ee("esri-2d-graphic-debug");function ae(u,e,t){let s=t.get(u);return s||(s={tile:e,addedOrModified:[],removed:[]},t.set(u,s)),s}let F=class extends es(Ne(We)){constructor(e){super(e),this._storage=new Bt,this._displayIds=new Map,this._controller=new AbortController,this._tiles=new Map,this._graphicStoreUpdate=!1,this._graphicsSet=new Set,this._matcher=Promise.resolve(null),this._tileUpdateSet=new Set,this._tilesToUpdate=new Map,this._graphicIdToAbortController=new Map,this._attached=!1,this._updatingGraphicsTimer=null,this._hashToExpandedSymbol=new Map,this._hashToExpandedSymbolPromise=new Map,this._hashToCIMSymbolPromise=new Map,this._hashToCIM=new Map,this._processing=!1,this._needsProcessing=!1,this._pendingUpdate={added:new Set,updated:new Set,removed:new Set},this.lastUpdateId=-1,this.updateRequested=!1,this.defaultPointSymbolEnabled=!0,this.graphicUpdateHandler=this.graphicUpdateHandler.bind(this)}destroy(){this._updatingGraphicsTimer&&(clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=null,this.notifyChange("updating")),this._controller.abort(),this.container.destroy(),this._set("graphics",null),this._graphicStore.clear(),this._attributeStore=null,this._hashToExpandedSymbol.clear(),this.view=null,this.renderer=null,this._hashToCIM.clear(),this._hashToCIMSymbolPromise.clear(),this._hashToExpandedSymbolPromise.clear()}_createMatcher(e,t,s){if(e){const i=Ce(e),r=Dt({indexCount:0,fields:{}},"feature",e,i);this._matcher=xt(r,t,null,s)}}_createDisplayId(e){let t=this._displayIds.get(e);return t||(t=this._storage.createDisplayId(),this._displayIds.set(e,t)),t}initialize(){this._attributeStore=new It({type:"local",initialize:r=>Promise.resolve(this.container.attributeView.initialize(r)),update:r=>this.container.attributeView.requestUpdate(r),render:()=>this.container.requestRender()},qe("2d")),this.container.hasHighlight=()=>this._attributeStore.hasHighlight;const e=r=>{this._createDisplayId(r.uid),this._setFilterState(r.uid,r.visible)},t=r=>{const n=this._displayIds.get(r.uid);this._displayIds.delete(r.uid),this._storage.releaseDisplayId(n)},s=new _t(this.container.getMaterialItems.bind(this.container),this.view.featuresTilingScheme.tileInfo);this._graphicStore=new Wt(this.view.featuresTilingScheme,this.view.state.scale,this.uid,this.graphics,e,t,this._hashToCIM),this._meshFactory=new vt(null,this.uid,s),this._templateStore=s,this.handles.add([Ke(()=>this.renderer,r=>{this._createMatcher(r,s,this.container.stage.resourceManager);for(const n of this.graphics)this._pendingUpdate.updated.add(n);this.requestUpdate()}),this.view.graphicsTileStore.on("update",this._onTileUpdate.bind(this)),this.container.on("attach",()=>{ts&&this.container.enableRenderingBounds(()=>this._graphicStore.getAllBounds()),this.graphics.items.length>0&&this._graphicsChangeHandler({target:this.graphics,added:this.graphics.items,removed:[],moved:[]}),this.handles.add(this.graphics.on("change",n=>this._graphicsChangeHandler(n)),"graphics");const r=this.container.stage.resourceManager;this._createMatcher(this.renderer,s,r),this._graphicStore.setResourceManager(r),this._attached=!0,this.notifyChange("updating")})]);const i=this.view.graphicsTileStore.tiles;this._onTileUpdate({added:i,removed:[]})}get updating(){var e;return!this._attached||this._updatingGraphicsTimer!==null||this._pendingUpdate.added.size>0||this._pendingUpdate.removed.size>0||this._pendingUpdate.updated.size>0||this._tileUpdateSet.size>0||this._tilesToUpdate.size>0||((e=this._attributeStore)==null?void 0:e.updatingHandles.updating)||this._processing}hitTest(e){if(!this.view||!this.view.position)return[];const{resolution:t,rotation:s}=this.view.state;return this._graphicStore.hitTest(e.x,e.y,2,t,s)}update(e){v(this._controller.signal);const t=e.state,{resolution:s}=t;if(this._graphicStore.updateLevel(s),this._graphicStoreUpdate=!0,this.updateRequested=!1,this._pendingUpdate.updated.size>0){if(!this._processing){this._updateGraphics();return}this._needsProcessing=!0}}viewChange(){this.requestUpdate()}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.requestUpdateCallback())}processUpdate(e){this.updateRequested&&(this.updateRequested=!1,this.update(e))}graphicUpdateHandler(e){const{graphic:t,property:s}=e;switch(s){case"attributes":case"geometry":case"symbol":this._pendingUpdate.updated.add(t),this.requestUpdate();break;case"visible":this._setFilterState(t.uid,t.visible),this._attributeStore.sendUpdates();break}}setHighlight(e){const t=e.map(s=>this._displayIds.get(s)).filter(He);this._attributeStore.setHighlight(e,t)}_getIntersectingTiles(e){const t=this._graphicStore.getBounds(e);if(!t||Ze(t)===0||Xe(t)===0)return[];const i=Zt(t,this.view.spatialReference);return i!=null?[...new Set([...this.view.graphicsTileStore.boundsIntersections(i[0]),...this.view.graphicsTileStore.boundsIntersections(i[1])])]:this.view.graphicsTileStore.boundsIntersections(t)}async _updateTile(e){v(this._controller.signal);const t=e.tile,s=this._getGraphicsData(this._templateStore,t,e.addedOrModified),i=await this._processGraphics(t,s);return v(this._controller.signal),this._patchTile(t.key,{type:"update",addOrUpdate:i,remove:e.removed,end:!0,clear:!1,sort:!1}),i}_patchTile(e,t){const s=this._tiles.get(e);s&&(this.container.onTileData(s,t),this.container.requestRender())}_graphicsChangeHandler(e){const t=this._pendingUpdate;for(const s of e.added)t.added.add(s);for(const s of e.moved)t.updated.add(s);for(const s of e.removed){if(this._pendingUpdate.added.has(s)){t.added.delete(s);continue}t.removed.add(s)}if(!this._processing){this._updateGraphics();return}this._needsProcessing=!0}_getGraphicsToUpdate(){const e={added:[],removed:[],updated:[]};if(!this.graphics)return e;const t=this._pendingUpdate;for(const s of this.graphics.items)t.added.has(s)?e.added.push(s):t.updated.has(s)&&e.updated.push(s);for(const s of t.removed)this._graphicStore.has(s)&&e.removed.push(s);return t.added.clear(),t.removed.clear(),t.updated.clear(),e}async _updateGraphics(){this._processing=!0;const{added:e,removed:t,updated:s}=this._getGraphicsToUpdate(),i=this._tilesToUpdate;let r;try{if(!this._graphicStoreUpdate){const d=this.view.state,{resolution:h}=d;this._graphicStore.updateLevel(h)}const n=[],o=new Array(e.length+t.length);for(let d=0;d<s.length;d++){const h=s[d],f=this._getIntersectingTiles(h);for(const m of f)r=m.id,ae(r,m,i).removed.push(this._displayIds.get(h.uid));n.push(this._updateGraphic(h,null)),o[d]=h}const a=s.length;for(let d=0;d<e.length;d++){const h=e[d];o[a+d]=h,this._graphicsSet.add(h),n.push(this._addGraphic(h))}for(const d of t){this._abortProcessingGraphic(d.uid);const h=this._getIntersectingTiles(d);for(const f of h)r=f.id,ae(r,f,i).removed.push(this._displayIds.get(d.uid));this._graphicsSet.delete(d),this._graphicStore.remove(d)}this._flipUpdatingGraphics(),await Promise.all(n);let l;for(let d=0;d<o.length;d++){l=o[d];const h=this._getIntersectingTiles(l);for(const f of h)r=f.id,ae(r,f,i).addedOrModified.push(l)}this._graphicStore.updateZ();const c=[];for(const[d,h]of i)c.push(this._updateTile(h));await Promise.all(c)}catch(n){Z(n)}for(const n of t)try{const o=await this._getSymbolForGraphic(n,null);if(o){const a=o.hash();this._hashToExpandedSymbol.delete(a)}}catch(o){Z(o)}i.clear(),this.notifyChange("updating"),this._processing=!1,this._needsProcessing&&(this._needsProcessing=!1,this._updateGraphics())}_getArcadeInfo(e){const s=(e.attributes?Object.keys(e.attributes):[]).map(i=>({name:i,alias:i,type:typeof e.attributes[i]=="string"?"esriFieldTypeString":"esriFieldTypeDouble"}));return e.geometry==null?null:{geometryType:he(e.geometry),spatialReference:Ye.fromJSON(e.geometry.spatialReference),fields:s}}_getSymbolForGraphic(e,t){return v(this._controller.signal),e.symbol!=null?Promise.resolve(e.symbol):this.renderer!=null?this.renderer.getSymbolAsync(e,{scale:this.view.scale,signal:t!=null?t.signal:null}):Promise.resolve(this._getNullSymbol(e))}_getCIMSymbol(e,t,s){let i=this._hashToCIM.get(t);if(i)return Promise.resolve(i);const r=et(e);if(r!=null){if(r.type==="CIMSymbolReference")return i=r,this._hashToCIM.set(t,i),Promise.resolve(i);let n=this._hashToCIMSymbolPromise.get(t);return n||(n=r.fetchCIMSymbol(s).then(o=>(this._hashToCIM.set(t,o.data),this._hashToCIMSymbolPromise.delete(t),o)).catch(o=>(this._hashToCIMSymbolPromise.delete(t),ye(o),null)),this._hashToCIMSymbolPromise.set(t,n),n)}return Promise.resolve(null)}_expandCIMSymbol(e,t,s,i){const r=this._hashToExpandedSymbol.get(s);if(r)return Promise.resolve(r);let n=this._hashToExpandedSymbolPromise.get(s);if(n)return n;const o=this.container.stage,a=this._getArcadeInfo(t),l=Ce(null),c=Tt(e,l);return n=bt(c,a,o.resourceManager,i),this._hashToExpandedSymbolPromise.set(s,n),n.then(d=>(this._hashToExpandedSymbol.set(s,d),this._hashToExpandedSymbolPromise.delete(s),d)),n}async _getSymbolResources(e,t){return v(this._controller.signal),this.container.stage?this._getSymbolForGraphic(e,t).then(i=>{if(!i)return null;const r=i.hash();return this._getCIMSymbol(i,r,t).then(n=>n==null?null:this._expandCIMSymbol(n,e,r,t).then(o=>{const a=o.layers.filter(l=>l.type==="text"&&typeof l.text=="string");if(a&&a.length>0){const l=new Array(a.length);for(let d=0;d<a.length;d++){const h=a[d],f=[],[m]=tt(h.text);h.text=m;for(let p=0;p<m.length;p++)f.push(m.charCodeAt(p));l[d]={symbol:h,id:d,glyphIds:f}}const c=new Map;return this.container.getMaterialItems(l).then(d=>{Qe(d);for(let h=0;h<a.length;h++){const f=a[h];c.set(f.cim,{text:f.text,mosaicItem:d[h].mosaicItem})}return{symbol:o,textInfo:c,hash:r}})}return{symbol:o,hash:r}}))}).catch(i=>(ye(i),null)):null}async _projectAndNormalizeGeometry(e,t){if(v(this._controller.signal),e.geometry==null||e.geometry.type==="mesh")return null;let s=e.geometry;if(le(s)){const n=s.rings;s.rings=n}else if(ge(s)){const n=s.paths;s.paths=n}else if(xe(s)){const n=await this._getSymbolForGraphic(e,t);v(this._controller.signal),n&&(Yt(n.type)||Xt(n.type))?s=s.center:s=Qt(s)}await it(s.spatialReference,this.view.spatialReference);const i=st(s),r=rt(i,s.spatialReference,this.view.spatialReference);return r&&$e(r),r}_onTileUpdate(e){const t=N(this.view.spatialReference);if(e.added&&e.added.length>0)for(const s of e.added)this._addNewTile(s,t);if(e.removed&&e.removed.length>0)for(const s of e.removed)this._removeTile(s.key)}async _addGraphic(e){this._abortProcessingGraphic(e.uid),v(this._controller.signal);const t=new AbortController;this._graphicIdToAbortController.set(e.uid,t);const s={signal:t.signal};try{await this._addOrUpdateGraphic(e,s),v(this._controller.signal),this._graphicIdToAbortController.delete(e.uid)}catch(i){if(this._graphicIdToAbortController.delete(e.uid),!Z(i))throw i}}_updateGraphic(e,t){v(this._controller.signal);const s=this._projectAndNormalizeGeometry(e,t),i=this._getSymbolResources(e,t);return Promise.all([s,i]).then(([r,n])=>{v(this._controller.signal),this._graphicStore.addOrModify(e,n,r)})}_addOrUpdateGraphic(e,t){v(this._controller.signal);const s=this._projectAndNormalizeGeometry(e,t),i=this._getSymbolResources(e,t);return Promise.all([s,i]).then(([r,n])=>{v(this._controller.signal),this._graphicsSet.has(e)&&this._graphicStore.addOrModify(e,n,r)})}_addTile(e){const t=this.view.featuresTilingScheme.getTileBounds(C(),e),s=this.view.featuresTilingScheme.getTileResolution(e.level),i=new Vt(e,s,t[0],t[3]);return this._tiles.set(e,i),this.container.addChild(i),i}async _addNewTile(e,t){const s=this._addTile(e.key),i=this._graphicStore.queryTileData(this._templateStore,e);if(i.length===0)return;if(t){const n=Math.round((t.valid[1]-t.valid[0])/e.resolution);for(const o of i)o.geometry&&(_e(o.geometry)||re(o.geometry))&&this._wrapPoints(o,n)}const r=e.key;this._tileUpdateSet.add(e.key),this.notifyChange("updating");try{const o={type:"update",clear:!1,addOrUpdate:await this._processGraphics(e,i),remove:[],end:!0,sort:!1};s.patch(o),this._tileUpdateSet.delete(r),this.notifyChange("updating")}catch(n){if(this._tileUpdateSet.delete(r),this.notifyChange("updating"),!Z(n))throw n}}_removeTile(e){if(!this._tiles.has(e))return;const t=this._tiles.get(e);this.container.removeChild(t),t.destroy(),this._tiles.delete(e)}_setFilterState(e,t){const s=this._displayIds.get(e),i=this._attributeStore.getHighlightFlag(e);this._attributeStore.setData(s,0,0,i|(t?lt:0))}_getGraphicsData(e,t,s){const i=this.view,r=N(i.spatialReference),n=this._graphicStore.getGraphicsData(e,t,s);if(r){const o=Math.round((r.valid[1]-r.valid[0])/t.resolution);for(const a of n)a.geometry&&(_e(a.geometry)||re(a.geometry))&&this._wrapPoints(a,o)}return n}_wrapPoints(e,t){const s=e.geometry;re(s)?this._wrapMultipoint(s,t):this._wrapPoint(e,t)}_wrapMultipoint(e,t){const s=e.points,i=[];let r=0,n=0;for(const[o,a]of s){if(i.push([o+r,a]),r=0,t===L){const l=5*B;o+n<l?(i.push([t,0]),r=-t):o+n>L-l&&(i.push([-t,0]),r=t)}else o+n<-B?(i.push([t,0]),r=-t):o+n>L+B&&(i.push([-t,0]),r=t);n+=o}e.points=i}_wrapPoint(e,t){const s=e.geometry;if(t===L){const i=5*B;s.x<i?e.geometry={points:[[s.x,s.y],[t,0]]}:s.x>L-i&&(e.geometry={points:[[s.x,s.y],[-t,0]]})}else s.x<-B?e.geometry={points:[[s.x,s.y],[t,0]]}:s.x>L+B&&(e.geometry={points:[[s.x,s.y],[-t,0]]})}_processGraphics(e,t,s){if(!(t&&t.length)||!this._meshFactory)return Promise.resolve(null);const r=te.from(t,this.uid,e.transform),n=this._meshFactory;return this._matcher.then(o=>n.analyzeGraphics(r,this.container.stage.resourceManager,o,null,null,s).then(()=>(this._attributeStore.sendUpdates(),this._processAnalyzedGraphics(e,r))))}_processAnalyzedGraphics(e,t){const s=this._meshFactory,i=t.getSize(),r=t.getCursor(),n={features:i,records:i,metrics:0},o=new Ct(e.key.id,n,Le.DEFAULT,!1,!1),a=[];for(;r.next();){const h=r.readGraphic();h.insertAfter=h.insertAfter===-1?-1:this._displayIds.get(h.insertAfter),h.displayId=this._displayIds.get(h.attributes[this.uid]);const f=new A(h.displayId);f.insertAfter=h.insertAfter,a.push(f),s.writeGraphic(o,r,e.level,this.container.stage.resourceManager)}const l=e.tileInfoView.tileInfo.isWrappable,c=o.serialize(l);if(c.length!==1)return new T;const d=c[0].message;return T.fromVertexData(d,a)}_abortProcessingGraphic(e){var t;(t=this._graphicIdToAbortController.get(e))==null||t.abort()}_getNullSymbol(e){const t=e.geometry;return ge(t)?nt:le(t)||xe(t)?ot:this.defaultPointSymbolEnabled?at:null}_flipUpdatingGraphics(){this._updatingGraphicsTimer&&clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=setTimeout(()=>{this._updatingGraphicsTimer=null,this.notifyChange("updating")},160),this.notifyChange("updating")}};b([D({constructOnly:!0})],F.prototype,"requestUpdateCallback",void 0);b([D()],F.prototype,"container",void 0);b([D({constructOnly:!0})],F.prototype,"graphics",void 0);b([D()],F.prototype,"updating",null);b([D()],F.prototype,"view",void 0);b([D()],F.prototype,"updateRequested",void 0);b([D()],F.prototype,"defaultPointSymbolEnabled",void 0);F=b([Se("esri.views.2d.layers.support.GraphicsView2D")],F);const Cs=F;export{Cs as G};
