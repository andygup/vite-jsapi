import{ah as u,V as f,aB as w,D as h,E as p,an as y,ae as _,ai as V}from"./index-d00ae83f.js";import{h as v}from"./Container-fdc7cbd5.js";import{r as C}from"./GroupContainer-bcc2dfbe.js";import{f as H,d as b}from"./LayerView-0e4aef95.js";import{i as m}from"./GraphicContainer-ce841941.js";import{o as c}from"./GraphicsView2D-ec13433a.js";import"./parser-7c9c1bd9.js";import"./definitions-e9823d3c.js";import"./enums-74e97557.js";import"./TextureDescriptor-bc67ea5f.js";import"./WGLContainer-c9595254.js";import"./VertexArrayObject-4fb3c3fa.js";import"./VertexElementDescriptor-2925c6af.js";import"./color-d08f78cf.js";import"./enums-55085e26.js";import"./ProgramTemplate-84bdd3f6.js";import"./MaterialKey-62cecf1f.js";import"./utils-e7ae84a5.js";import"./heatmapUtils-3d71523d.js";import"./vec4f64-aa64c7e9.js";import"./StyleDefinition-fbc907c2.js";import"./config-1337d16e.js";import"./GeometryUtils-dd03fc25.js";import"./earcut-49c258bd.js";import"./featureConversionUtils-b3dda230.js";import"./OptimizedGeometry-33b2eb0d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./BaseGraphicContainer-566f2afc.js";import"./FeatureContainer-f530ba0e.js";import"./AttributeStoreView-a66d7010.js";import"./TiledDisplayObject-2725afce.js";import"./visualVariablesUtils-ed8b15c7.js";import"./visualVariablesUtils-f114ed1a.js";import"./TileContainer-f76cbe08.js";import"./lengthUtils-2dec3b43.js";import"./vec3f32-ad1dc57f.js";import"./normalizeUtils-d6c32ca7.js";import"./normalizeUtilsCommon-b0b526ae.js";import"./ExpandedCIM-1f74c325.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-53652037.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-192b773d.js";import"./floatRGBA-97d993cb.js";import"./normalizeUtilsSync-cc84e667.js";import"./projectionSupport-d1f13059.js";import"./json-48e3ea08.js";import"./labelingInfo-43612c60.js";import"./labelUtils-a9bce6c2.js";import"./defaultsJSON-b087dd4d.js";import"./jsonUtils-4d233710.js";import"./Matcher-f64f097e.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-e28a710e.js";import"./LRUCache-042aa9cd.js";import"./MemCache-5adf4213.js";import"./devEnvironmentUtils-5002a058.js";import"./styleUtils-27582d54.js";import"./featureFlags-b1d578b1.js";import"./schemaUtils-1bf8366a.js";import"./sql-c44b993b.js";import"./diffUtils-0efc737e.js";import"./clusterUtils-7dcd0e4f.js";import"./SizeVariable-5028aad8.js";import"./colorRamps-a4a56c96.js";import"./LegendOptions-d69220b3.js";import"./sizeVariableUtils-d4870b0d.js";import"./util-ace6137f.js";import"./ComputedAttributeStorage-ec22dc86.js";import"./FieldsIndex-a1eb524c.js";import"./arcadeTimeUtils-823af25e.js";import"./executionError-fb3f283a.js";import"./centroid-8e8cfa47.js";const g="sublayers",n="layerView",T=Object.freeze({remove(){},pause(){},resume(){}});let l=class extends H(b){constructor(){super(...arguments),this._highlightIds=new Map,this.container=new C}async fetchPopupFeatures(i){return Array.from(this.graphicsViews(),t=>t.hitTest(i).filter(e=>!!e.popupTemplate)).flat()}*graphicsViews(){this._graphicsViewsFeatureCollectionMap==null?this._graphicsViews==null?yield*[]:yield*this._graphicsViews:yield*this._graphicsViewsFeatureCollectionMap.keys()}async hitTest(i,t){return Array.from(this.graphicsViews(),e=>{const s=e.hitTest(i);if(this._graphicsViewsFeatureCollectionMap!=null){const o=this._graphicsViewsFeatureCollectionMap.get(e);for(const r of s)!r.popupTemplate&&o.popupTemplate&&(r.popupTemplate=o.popupTemplate),r.sourceLayer=r.layer=this.layer}return s}).flat().map(e=>({type:"graphic",graphic:e,layer:this.layer,mapPoint:i}))}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof u?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(s=>s&&s.uid):f.isCollection(i)&&(t=i.map(s=>s&&s.uid).toArray());const e=t==null?void 0:t.filter(w);return e!=null&&e.length?(this._addHighlight(e),{remove:()=>{this._removeHighlight(e)}}):T}update(i){for(const t of this.graphicsViews())t.processUpdate(i)}attach(){const i=this.view,t=()=>this.requestUpdate(),e=this.layer.featureCollections;if(e!=null&&e.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const s of e){const o=new m(this.view.featuresTilingScheme),r=new c({view:i,graphics:s.source,renderer:s.renderer,requestUpdateCallback:t,container:o});this._graphicsViewsFeatureCollectionMap.set(r,s),this.container.addChild(r.container),this.addHandles([h(()=>s.visible,a=>r.container.visible=a,p),h(()=>r.updating,()=>this.notifyChange("updating"),p)],n)}this._updateHighlight()}else this.layer.sublayers!=null&&this.addHandles(y(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),g)}detach(){this._destroyGraphicsViews(),this.removeHandles(g)}moveStart(){}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.removeHandles(n);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),this.layer.sublayers==null)return;const i=[],t=this.view,e=()=>this.requestUpdate();for(const s of this.layer.sublayers){const o=new v,r=new m(this.view.featuresTilingScheme);r.fadeTransitionEnabled=!0;const a=new c({view:t,graphics:s.graphics,requestUpdateCallback:e,container:r});this.addHandles([s.on("graphic-update",a.graphicUpdateHandler),h(()=>s.visible,d=>a.container.visible=d,p),h(()=>a.updating,()=>this.notifyChange("updating"),p)],n),o.addChild(a.container),this.container.addChild(o),i.push(a)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this.graphicsViews())t.setHighlight(i)}};l=_([V("esri.views.2d.layers.MapNotesLayerView2D")],l);const Ni=l;export{Ni as default};
