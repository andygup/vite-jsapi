import{b5 as w,b6 as y,b7 as I,b8 as V,D as v,b9 as H,d as a,ba as c,J as T,ae as l,af as g,ai as b}from"./index-14d2dda4.js";import"./MagnifierPrograms-9d8373f3.js";import"./Container-6fce2343.js";import"./BufferPool-b76482ff.js";import"./color-a9035b51.js";import"./WGLContainer-84c90ee7.js";import"./enums-74e97557.js";import"./TextureDescriptor-dd8f8170.js";import"./ProgramTemplate-0c010296.js";import"./MaterialKey-cdde707f.js";import"./utils-a443dbbb.js";import"./VertexArrayObject-71a3609d.js";import"./StyleDefinition-fbc907c2.js";import"./enums-fb086c25.js";import"./OrderIndependentTransparency-5b5adc11.js";import"./floatRGBA-8fa6e5fb.js";import{o as q}from"./GraphicsView2D-25879103.js";import"./AttributeStoreView-7e812d36.js";import"./earcut-61df6ad9.js";import"./featureConversionUtils-73950573.js";import"./lengthUtils-db44513a.js";import"./vec3f32-ad1dc57f.js";import"./normalizeUtils-0db2de2e.js";import{t as U,o as f,n as d}from"./imageUtils-b22406f9.js";import{f as Q,d as S}from"./LayerView-95c07669.js";import{n as C}from"./HighlightGraphicContainer-168131b2.js";import{i as k}from"./RefreshableLayerView-8b2d03ad.js";import{G as F,P as G,r as P}from"./drapedUtils-33ffe939.js";import"./ExpandedCIM-3ebf2dc7.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-53652037.js";import"./enums-55085e26.js";import"./definitions-e9823d3c.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-4b26010a.js";import"./rasterizingUtils-0674b438.js";import"./pbf-644916d5.js";import"./GeometryUtils-dd03fc25.js";import"./imageutils-d2bc8b28.js";import"./Matcher-a9427a07.js";import"./visualVariablesUtils-f6d8de80.js";import"./visualVariablesUtils-df5882fe.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-64a9b53c.js";import"./defaultsJSON-b087dd4d.js";import"./OptimizedGeometry-33b2eb0d.js";import"./LRUCache-bef7348b.js";import"./MemCache-a632ad1b.js";import"./devEnvironmentUtils-5002a058.js";import"./styleUtils-b3fbb85d.js";import"./featureFlags-e4b4949b.js";import"./CircularArray-ef508845.js";import"./DisjointTimerQuery-b21930a9.js";import"./throttle-7bf02de9.js";import"./ComputedAttributeStorage-1f98e5b9.js";import"./FieldsIndex-f7fd372c.js";import"./arcadeTimeUtils-ff5087ab.js";import"./executionError-fb3f283a.js";import"./centroid-8e8cfa47.js";import"./diffUtils-e41e7cfb.js";import"./sizeVariableUtils-d4870b0d.js";import"./parser-2b4f8653.js";import"./VertexElementDescriptor-2925c6af.js";import"./config-1337d16e.js";import"./heatmapUtils-9d164d0d.js";import"./vec4f64-aa64c7e9.js";import"./basicInterfaces-4ab7cc6a.js";import"./normalizeUtilsSync-0290515c.js";import"./normalizeUtilsCommon-734d8c45.js";import"./projectionSupport-94381607.js";import"./json-48e3ea08.js";import"./labelingInfo-64f45510.js";import"./labelUtils-5183e23d.js";import"./jsonUtils-735c5a2c.js";import"./schemaUtils-c1ffacf4.js";import"./sql-aad2f0d6.js";import"./clusterUtils-5e65db1a.js";import"./SizeVariable-7117b0a7.js";import"./colorRamps-f76c50ec.js";import"./LegendOptions-eb9bc746.js";import"./util-0c73c60a.js";import"./TiledDisplayObject-fc55a293.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./BitmapTileContainer-8e381dbb.js";import"./Bitmap-2584e46c.js";import"./TileContainer-329e780d.js";import"./BaseGraphicContainer-7e23ebc6.js";import"./FeatureContainer-0fcfce46.js";import"./scaleUtils-1e0ac96c.js";import"./floorFilterUtils-080a7cd2.js";import"./sublayerUtils-45ac5b4e.js";import"./popupUtils-eee489a3.js";const R=[0,0];let h=class extends k(U(Q(S))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}update(t){var i;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(i=this._highlightView)==null||i.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(i,e)=>this.fetchTile(i,e)}),this._tileStrategy=new V({cachePolicy:"keep",resampling:this.resampling,acquireTile:i=>this.acquireTile(i),releaseTile:i=>this.releaseTile(i),tileInfoView:this._tileInfoView}),F(this,this.layer)){const i=this._highlightView=new q({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new C(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new G({createFetchPopupFeaturesQueryGeometry:(e,r)=>P(e,r,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(e,r)=>{i.graphicUpdateHandler({graphic:e,property:r})},layerView:this,updatingHandles:this.updatingHandles})}this.requestUpdate(),this.addAttachHandles(v(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeatures(t,i){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(t,i):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):{remove(){}}}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var i;return H((i=this.layer.tileInfo)==null?void 0:i.spatialReference,t)}async doRefresh(){!this.attached||this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.tiles.forEach(t=>this._enqueueTileFetch(t)))}isUpdating(){var t;return((t=this._fetchQueue)==null?void 0:t.updating)??!1}acquireTile(t){const i=this._bitmapView.createTile(t),e=i.bitmap;return[e.x,e.y]=this._tileInfoView.getTileCoords(R,i.key),e.resolution=this._tileInfoView.getTileResolution(i.key),[e.width,e.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(i),this._bitmapView.addChild(i),this.requestUpdate(),i}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,i={}){const e="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:r,resamplingLevel:m=0}=i;if(!e)try{return await this._fetchImage(t,r)}catch(s){if(!a(s)&&!this.resampling)return f(this._tileInfoView.tileInfo.size);if(m<3){const n=this._tileInfoView.getTileParentId(t.id);if(n){const u=new c(n),_=await this.fetchTile(u,{...i,resamplingLevel:m+1});return d(this._tileInfoView,_,u,t)}}throw s}const p=new c(0,0,0,0);let o;try{if(await e.fetchAvailabilityUpsample(t.level,t.row,t.col,p,{signal:r}),p.level!==t.level&&!this.resampling)return f(this._tileInfoView.tileInfo.size);o=await this._fetchImage(p,r)}catch(s){if(a(s))throw s;o=await this._fetchImage(t,r)}return this.resampling?d(this._tileInfoView,o,p,t):o}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const i=await this._fetchQueue.push(t.key);t.bitmap.source=i,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(i){a(i)||T.getLogger(this.declaredClass).error(i)}this.requestUpdate()}}async _fetchImage(t,i){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:i})}};l([g()],h.prototype,"_fetchQueue",void 0),l([g()],h.prototype,"resampling",null),h=l([b("esri.views.2d.layers.TileLayerView2D")],h);const Ii=h;export{Ii as default};
