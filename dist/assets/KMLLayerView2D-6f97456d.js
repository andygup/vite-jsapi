import{U as T,K as k,L as N,b5 as D,V as B,D as O,C as z,B as S,bf as $,bs as F,bt as E,bu as W,bv as U,bw as H,bx as K,ae as v,af as C,ai as Y}from"./index-d00ae83f.js";import{b as P,g as J,d as X}from"./kmlUtils-87eb57d4.js";import{b as Q,w as Z,S as tt}from"./Bitmap-d9a08b0b.js";import{a as et}from"./BitmapContainer-5bf8e3b3.js";import{f as it,d as at}from"./LayerView-0e4aef95.js";import{i as M}from"./GraphicContainer-ce841941.js";import{o as R}from"./GraphicsView2D-ec13433a.js";import{v as st,$ as rt}from"./rasterProjectionHelper-37637bc9.js";import{n as ot}from"./WGLContainer-c9595254.js";import{M as nt,o as lt}from"./RenderingContext-d179adea.js";import{D as A,Y as pt,X as ht,P as mt,G as ct,f as L}from"./enums-74e97557.js";import{N as dt}from"./VertexArrayObject-4fb3c3fa.js";import{m as ut}from"./rasterUtils-38755b69.js";import{a as q,u as j}from"./TextureDescriptor-bc67ea5f.js";import"./jsonUtils-309774b9.js";import"./UniqueValueRenderer-a2512cc5.js";import"./LegendOptions-d69220b3.js";import"./diffUtils-0efc737e.js";import"./SizeVariable-5028aad8.js";import"./colorRamps-a4a56c96.js";import"./sizeVariableUtils-d4870b0d.js";import"./lengthUtils-2dec3b43.js";import"./ColorStop-b3542d0c.js";import"./jsonUtils-4d233710.js";import"./styleUtils-27582d54.js";import"./featureFlags-b1d578b1.js";import"./DictionaryLoader-ff63cbdf.js";import"./LRUCache-042aa9cd.js";import"./MemCache-5adf4213.js";import"./FieldsIndex-a1eb524c.js";import"./heatmapUtils-3d71523d.js";import"./vec4f64-aa64c7e9.js";import"./FeatureSet-d25574c6.js";import"./Field-e3662015.js";import"./fieldType-6aab583d.js";import"./Container-fdc7cbd5.js";import"./parser-7c9c1bd9.js";import"./definitions-e9823d3c.js";import"./color-d08f78cf.js";import"./enums-55085e26.js";import"./VertexElementDescriptor-2925c6af.js";import"./BaseGraphicContainer-566f2afc.js";import"./FeatureContainer-f530ba0e.js";import"./AttributeStoreView-a66d7010.js";import"./TiledDisplayObject-2725afce.js";import"./visualVariablesUtils-ed8b15c7.js";import"./visualVariablesUtils-f114ed1a.js";import"./TileContainer-f76cbe08.js";import"./utils-e7ae84a5.js";import"./MaterialKey-62cecf1f.js";import"./vec3f32-ad1dc57f.js";import"./normalizeUtils-d6c32ca7.js";import"./normalizeUtilsCommon-b0b526ae.js";import"./ExpandedCIM-1f74c325.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-53652037.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-192b773d.js";import"./floatRGBA-97d993cb.js";import"./normalizeUtilsSync-cc84e667.js";import"./projectionSupport-d1f13059.js";import"./json-48e3ea08.js";import"./labelingInfo-43612c60.js";import"./labelUtils-a9bce6c2.js";import"./defaultsJSON-b087dd4d.js";import"./Matcher-f64f097e.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-e28a710e.js";import"./featureConversionUtils-b3dda230.js";import"./OptimizedGeometry-33b2eb0d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./GeometryUtils-dd03fc25.js";import"./earcut-49c258bd.js";import"./devEnvironmentUtils-5002a058.js";import"./schemaUtils-1bf8366a.js";import"./sql-c44b993b.js";import"./clusterUtils-7dcd0e4f.js";import"./util-ace6137f.js";import"./ComputedAttributeStorage-ec22dc86.js";import"./arcadeTimeUtils-823af25e.js";import"./executionError-fb3f283a.js";import"./centroid-8e8cfa47.js";import"./ProgramTemplate-84bdd3f6.js";import"./StyleDefinition-fbc907c2.js";import"./config-1337d16e.js";import"./programUtils-d864111e.js";import"./NestedMap-1b5db22e.js";import"./OrderIndependentTransparency-5b5adc11.js";import"./basicInterfaces-4ab7cc6a.js";import"./doublePrecisionUtils-e3c3d0d8.js";import"./DisjointTimerQuery-b21930a9.js";class m{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(m._instance)return m._instanceRefCount++,m._instance;m._instanceRefCount=1,m._instance=this,this._ownsRctx=!0;const e=document.createElement("canvas").getContext("webgl");e.getExtension("OES_texture_float"),this._rctx=new nt(e,{})}const a={applyProjection:!0,bilinear:!1,bicubic:!1},r=lt("raster/reproject","raster/reproject",new Map([["a_position",0]]),a);this._program=this._rctx.programCache.acquire(r.shaders.vertexShader,r.shaders.fragmentShader,r.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new ot(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,a,r=!1){const e=T(t.extent,a),s=new k({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:o,y:p}=st(s,a,t.extent);let l=(o+p)/2;const n=Math.round((e.xmax-e.xmin)/l),d=Math.round((e.ymax-e.ymin)/l);l=(e.width/n+e.height/d)/2;const I=new k({x:l,y:l,spatialReference:e.spatialReference}),x=rt({projectedExtent:e,srcBufferExtent:t.extent,pixelSize:I,hasWrapAround:!0,spacing:[16,16]}),y=ut(this._rctx,x),u=new q;u.wrapMode=A.CLAMP_TO_EDGE,u.width=n,u.height=d;const _=new j(this._rctx,u),h=new dt(this._rctx,{colorTarget:pt.TEXTURE,depthStencilTarget:ht.NONE,width:n,height:d},_);this._rctx.bindFramebuffer(h),this._rctx.setViewport(0,0,n,d),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(y,1),this._quad.bind();const{width:f=0,height:b=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",f,b),this._program.setUniform2fv("u_transformSpacing",x.spacing),this._program.setUniform2fv("u_transformGridSize",x.size),this._program.setUniform2f("u_targetImageSize",n,d),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),y.dispose(),r){const{width:c=0,height:V=0}=h.descriptor,w=new ImageData(c,V);return h.readPixels(0,0,c,V,mt.RGBA,ct.UNSIGNED_BYTE,w.data),h.detachColorTexture(L.COLOR_ATTACHMENT0),h.dispose(),{texture:_,extent:e,imageData:w}}return h.detachColorTexture(L.COLOR_ATTACHMENT0),h.dispose(),{texture:_,extent:e}}reprojectBitmapData(t,a){const r=Q(t.bitmapData)?Z(t.bitmapData):t.bitmapData,e=new q;e.wrapMode=A.CLAMP_TO_EDGE,e.width=t.bitmapData.width,e.height=t.bitmapData.height;const s=new j(this._rctx,e,r),o=this.reprojectTexture({texture:s,extent:t.extent},a,!0);o.texture.dispose();const p=document.createElement("canvas"),l=o.imageData;return p.width=l.width,p.height=l.height,p.getContext("2d").putImageData(l,0,0),{bitmapData:p,extent:o.extent}}async loadAndReprojectBitmapData(t,a,r){const e=(await N(t,{responseType:"image"})).data,s=document.createElement("canvas");s.width=e.width,s.height=e.height;const o=s.getContext("2d");o.drawImage(e,0,0);const p=o.getImageData(0,0,s.width,s.height);if(a.spatialReference.equals(r))return{bitmapData:p,extent:a};const l=this.reprojectBitmapData({bitmapData:p,extent:a},r);return{bitmapData:l.bitmapData,extent:l.extent}}destroy(){this._ownsRctx?(m._instanceRefCount--,m._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),m._instance=null)):(this._quad.dispose(),this._program.dispose())}}m._instanceRefCount=0;class G{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let g=class extends it(at){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new et,this._kmlVisualData=new G,this._fetchController=null,this.allVisiblePoints=new D,this.allVisiblePolylines=new D,this.allVisiblePolygons=new D,this.allVisibleMapImages=new B}async hitTest(i,t){var r,e,s;const a=this.layer;return[(r=this._pointsView)==null?void 0:r.hitTest(i),(e=this._polylinesView)==null?void 0:e.hitTest(i),(s=this._polygonsView)==null?void 0:s.hitTest(i)].flat().filter(Boolean).map(o=>(o.layer=a,o.sourceLayer=a,{type:"graphic",graphic:o,layer:a,mapPoint:i}))}update(i){this._polygonsView&&this._polygonsView.processUpdate(i),this._polylinesView&&this._polylinesView.processUpdate(i),this._pointsView&&this._pointsView.processUpdate(i)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new R({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new R({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new R({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",i=>{i.added.forEach(t=>this._addMapImage(t)),i.removed.forEach(t=>this._removeMapImage(t))}),O(()=>this.layer.visibleSublayers,i=>{for(const[t,a]of this._kmlVisualData.allSublayers)a.visibility=0;for(const t of i){const a=this._kmlVisualData.allSublayers.get(t.id);a&&(a.visibility=1)}this._refreshCollections()})]),this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new m}detach(){this._fetchController=z(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=S(this._polygonsView),this._polylinesView=S(this._polylinesView),this._pointsView=S(this._pointsView),this._imageReprojector=S(this._imageReprojector)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(i){var t,a;((t=this.view.spatialReference)!=null&&t.isWGS84||(a=this.view.spatialReference)!=null&&a.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(i.href,$.fromJSON(i.extent),this.view.spatialReference).then(r=>{const e=new tt(r.bitmapData,{immutable:!1,requestRenderOnSourceChangedEnabled:!0});e.x=r.extent.xmin,e.y=r.extent.ymax,e.resolution=r.extent.width/r.bitmapData.width,e.rotation=i.rotation,this._mapImageContainer.addChild(e),this._bitmapIndex.set(i,e)})}async _getViewDependentUrl(i,t){const{viewFormat:a,viewBoundScale:r,httpQuery:e}=i;if(a!=null){if(t==null)throw new Error("Loading this network link requires a view state.");let s;if(await F(),r!=null&&r!==1){const c=new $(t.extent);c.expand(r),s=c}else s=t.extent;s=T(s,E.WGS84);const o=T(s,E.WebMercator),p=s.xmin,l=s.xmax,n=s.ymin,d=s.ymax,I=t.size[0]*t.pixelRatio,x=t.size[1]*t.pixelRatio,y=Math.max(o.width,o.height),u={"[bboxWest]":p.toString(),"[bboxEast]":l.toString(),"[bboxSouth]":n.toString(),"[bboxNorth]":d.toString(),"[lookatLon]":s.center.x.toString(),"[lookatLat]":s.center.y.toString(),"[lookatRange]":y.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":s.center.x.toString(),"[lookatTerrainLat]":s.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":s.center.x.toString(),"[cameraLat]":s.center.y.toString(),"[cameraAlt]":y.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":I.toString(),"[vertPixels]":x.toString(),"[terrainEnabled]":"0","[clientVersion]":W,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},_=c=>{for(const V in c){let w;for(w in u)c[V]=c[V].replace(w,u[w])}},h=U(a);_(h);let f={};e!=null&&(f=U(e),_(f));const b=H(i.href);return b.query={...b.query,...h,...f},`${b.path}?${K(h)}`}return i.href}async _fetchService(i){const t=new G;await this._loadVisualData(this.layer.url,t,i),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i))}_isSublayerVisible(i){const t=this._kmlVisualData.allSublayers.get(i);return!!(t!=null&&t.visibility)&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(i,t,a){return this._fetchParsedKML(i,a).then(async r=>{for(const e of r.sublayers){t.allSublayers.set(e.id,e);const s=e.points?await P(e.points):[],o=e.polylines?await P(e.polylines):[],p=e.polygons?await P(e.polygons):[],l=e.mapImages||[];if(t.allPoints.push(...s.map(n=>({item:n,sublayerId:e.id}))),t.allPolylines.push(...o.map(n=>({item:n,sublayerId:e.id}))),t.allPolygons.push(...p.map(n=>({item:n,sublayerId:e.id}))),t.allMapImages.push(...l.map(n=>({item:n,sublayerId:e.id}))),e.networkLink){const n=await this._getViewDependentUrl(e.networkLink,this.view.state);await this._loadVisualData(n,t,a)}}})}_fetchParsedKML(i,t){return J(i,this.layer.spatialReference,this.layer.refreshInterval,t).then(a=>X(a.data))}_removeMapImage(i){const t=this._bitmapIndex.get(i);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(i))}};v([C()],g.prototype,"_pointsView",void 0),v([C()],g.prototype,"_polylinesView",void 0),v([C()],g.prototype,"_polygonsView",void 0),v([C()],g.prototype,"updating",void 0),g=v([Y("esri.views.2d.layers.KMLLayerView2D")],g);const Qe=g;export{Qe as default};
