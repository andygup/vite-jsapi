import{a as N}from"./Error-bd05b442.js";import{a as S}from"./lazyLayerLoader-2fd997ad.js";import f from"./PortalItem-07c1e88d.js";import{n as s,w as m,b as h,T as I,g}from"./layersLoader-9a31c663.js";import{s as c}from"./portalItemUtils-a26f8af3.js";import"./string-3d0ebcd3.js";import"./typedArrayUtil-2bcf3cee.js";import"./preload-helper-101896b7.js";import"./cast-daef7652.js";import"./ensureType-fa162cfc.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-29120e0a.js";import"./assets-4cb15247.js";import"./request-c2b0ab45.js";import"./Loadable-7c89bd10.js";import"./Promise-088a0e17.js";import"./Extent-7f29a1bb.js";import"./Portal-ac0dca24.js";import"./locale-30120714.js";import"./PortalGroup-f3dee6d8.js";import"./jsonMap-a9c94baf.js";import"./PortalUser-cdb4116b.js";import"./Layer-8a472a77.js";import"./geometry-4b789d90.js";import"./Polyline-c56eca9b.js";import"./typeUtils-d7b057b5.js";import"./Evented-d8fc77f0.js";import"./Identifiable-e3a09883.js";import"./arcgisLayerUrl-269cc7a9.js";import"./persistableUrlUtils-7e525def.js";import"./jsonContext-67f0b88a.js";import"./styleUtils-77b2285b.js";import"./asyncUtils-59234081.js";import"./projection-33a6cba9.js";import"./mathUtils-daf59e84.js";import"./common-701a4199.js";import"./unitUtils-43365914.js";import"./SimpleObservable-7c382d01.js";import"./mat4-62d5e6a4.js";import"./zscale-a508c8e5.js";function Ge(e){return!e.portalItem||e.portalItem instanceof f||(e={...e,portalItem:new f(e.portalItem)}),w(e.portalItem).then(r=>{const t={portalItem:e.portalItem,...r.properties};return new r.constructor(t)})}function w(e){return e.load().then(T).then(M)}function T(e){switch(e.type){case"Map Service":return v(e);case"Feature Service":return C(e);case"Feature Collection":return F(e);case"Scene Service":return G(e);case"Image Service":return P(e);case"Stream Service":return b();case"Vector Tile Service":return $();case"GeoJson":return j();case"CSV":return D();case"KML":return K();case"WFS":return O();case"WMTS":return W();case"WMS":return V();case"Feed":return k();default:return Promise.reject(new N("portal:unknown-item-type","Unknown item type '${type}'",{type:e.type}))}}function M(e){return(0,S[e.className])().then(r=>({constructor:r,properties:e.properties}))}function v(e){return A(e).then(r=>r?{className:"TileLayer"}:{className:"MapImageLayer"})}function C(e){return c(e,"Oriented Imagery Layer")?x(e):L(e).then(r=>{if(typeof r=="object"){const t={};return r.id!=null&&(t.layerId=r.id),{className:r.className||"FeatureLayer",properties:t}}return{className:"GroupLayer"}})}function G(e){return L(e).then(r=>{if(typeof r=="object"){const t={};let a;if(r.id!=null?(t.layerId=r.id,a=`${e.url}/layers/${r.id}`):a=e.url,Array.isArray(e.typeKeywords)&&e.typeKeywords.length>0){const n={IntegratedMesh:"IntegratedMeshLayer","3DObject":"SceneLayer",Point:"SceneLayer",PointCloud:"PointCloudLayer",Building:"BuildingSceneLayer"};for(const o of Object.keys(n))if(e.typeKeywords.includes(o))return{className:n[o]}}return s(a).then(n=>{let o="SceneLayer";const i={Point:"SceneLayer","3DObject":"SceneLayer",IntegratedMesh:"IntegratedMeshLayer",PointCloud:"PointCloudLayer",Building:"BuildingSceneLayer"};return n&&n.layerType&&i[n.layerType]&&(o=i[n.layerType]),{className:o,properties:t}})}return r===!1?s(e.url).then(t=>(t==null?void 0:t.layerType)==="Voxel"?{className:"VoxelLayer"}:{className:"GroupLayer"}):{className:"GroupLayer"}})}async function F(e){await e.load();const r=c(e,"Map Notes"),t=c(e,"Markup");if(r||t)return{className:"MapNotesLayer"};if(c(e,"Route Layer"))return{className:"RouteLayer"};const a=await e.fetchData();return m(a)===1?{className:"FeatureLayer"}:{className:"GroupLayer"}}async function P(e){var i,l,p,y;await e.load();const r=((i=e.typeKeywords)==null?void 0:i.map(d=>d.toLowerCase()))??[];if(r.includes("elevation 3d layer"))return{className:"ElevationLayer"};if(r.includes("tiled imagery"))return{className:"ImageryTileLayer"};const t=(l=await e.fetchData())==null?void 0:l.layerType;if(t==="ArcGISTiledImageServiceLayer")return{className:"ImageryTileLayer"};if(t==="ArcGISImageServiceLayer")return{className:"ImageryLayer"};const a=await s(e.url),n=(p=a.cacheType)==null?void 0:p.toLowerCase(),o=(y=a.capabilities)==null?void 0:y.toLowerCase().includes("tilesonly");return n==="map"||o?{className:"ImageryTileLayer"}:{className:"ImageryLayer"}}function b(){return{className:"StreamLayer"}}function $(){return{className:"VectorTileLayer"}}function j(){return{className:"GeoJSONLayer"}}function D(){return{className:"CSVLayer"}}function K(){return{className:"KMLLayer"}}function O(){return{className:"WFSLayer"}}function V(){return{className:"WMSLayer"}}function W(){return{className:"WMTSLayer"}}function k(){return{className:"StreamLayer"}}function x(e){return e.load().then(()=>e.fetchData()).then(r=>r.coverage?{className:"GroupLayer"}:{className:"OrientedImageryLayer",properties:r})}function A(e){return s(e.url).then(r=>r.tileInfo)}function L(e){return!e.url||e.url.match(/\/\d+$/)?Promise.resolve({}):e.load().then(()=>e.fetchData()).then(async r=>{if(e.type==="Feature Service"){const t=u(await h(r,e.url));if(typeof t=="object"){const a=I(r);t.className=a.includes(t.id)?"SubtypeGroupLayer":"FeatureLayer"}return t}return m(r)>0?u(r):s(e.url).then(u)})}function u(e){return m(e)===1&&{id:g(e)}}export{Ge as fromItem,T as selectLayerClassPath};
