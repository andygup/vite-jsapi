import{ae as p,af as m,ai as d,D as l,s as u,cs as h}from"./index-175d32d0.js";import{g as f}from"./FeatureSet-abad50cc.js";import v from"./FeatureLayerView2D-97232ce8.js";import{e as _}from"./util-63fe79d4.js";import"./Field-b346df3f.js";import"./fieldType-0ef39ec5.js";import"./Container-ca0c82d8.js";import"./parser-be52f54c.js";import"./definitions-e9823d3c.js";import"./enums-74e97557.js";import"./TextureDescriptor-d0f0e66d.js";import"./FeatureEffect-5be74af9.js";import"./jsonUtils-82684178.js";import"./Query-91daeb60.js";import"./LayerView-0bfae0f3.js";import"./schemaUtils-5e91e5e3.js";import"./sql-d95c95ff.js";import"./diffUtils-1e0b45c5.js";import"./labelingInfo-ffafbf0b.js";import"./labelUtils-358af0bc.js";import"./defaultsJSON-b087dd4d.js";import"./jsonUtils-a54641ba.js";import"./color-5599f865.js";import"./enums-55085e26.js";import"./VertexElementDescriptor-2925c6af.js";import"./utils-2b389eab.js";import"./MaterialKey-532bc99f.js";import"./heatmapUtils-4fba0b55.js";import"./vec4f64-aa64c7e9.js";import"./visualVariablesUtils-bc0c668d.js";import"./ExpandedCIM-652d49f1.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-53652037.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-91ef8d14.js";import"./floatRGBA-660570aa.js";import"./featureFlags-a084cf3d.js";import"./clusterUtils-64f88ebd.js";import"./SizeVariable-41a3e64d.js";import"./colorRamps-f4ee9bc5.js";import"./LegendOptions-8e12359c.js";import"./sizeVariableUtils-d4870b0d.js";import"./lengthUtils-349f6f20.js";import"./commonProperties-1c6cac45.js";import"./ElevationInfo-ed295995.js";import"./floorFilterUtils-080a7cd2.js";import"./popupUtils-431feddd.js";import"./RefreshableLayerView-0110a396.js";function y(e,t){if(e==null&&t==null)return null;const r={};return t!=null&&(r.geometry=t.toJSON()),e!=null&&(r.where=e),r}let o=class extends v{constructor(){super(...arguments),this._enabledEventTypes=new Set,this._isUserPaused=!1,this.errorString=null,this.connectionStatus="disconnected"}initialize(){this.addHandles([l(()=>this.layer.customParameters,e=>this._proxy.updateCustomParameters(e)),this.layer.on("send-message-to-socket",e=>this._proxy.sendMessageToSocket(e)),this.layer.on("send-message-to-client",e=>this._proxy.sendMessageToClient(e)),l(()=>this.layer.purgeOptions,()=>this._update()),l(()=>this.suspended,e=>{e?this._proxy.pauseStream():this._isUserPaused||this._proxy.resumeStream()})],"constructor")}get connectionError(){if(this.errorString)return new u("stream-controller",this.errorString)}pause(){this._isUserPaused=!0,this._proxy.pauseStream()}resume(){this._isUserPaused=!1,this._proxy.resumeStream()}on(e,t){if(Array.isArray(e))return h(e.map(n=>this.on(n,t)));const r=["data-received","message-received"].includes(e);r&&(this._enabledEventTypes.add(e),this._proxy.enableEvent(e,!0));const s=super.on(e,t),i=this;return{remove(){s.remove(),r&&(i._proxy.closed||i.hasEventListener(e)||i._proxy.enableEvent(e,!1))}}}queryLatestObservations(e,t){var r,s,i;if(!((r=this.layer.timeInfo)!=null&&r.endField||(s=this.layer.timeInfo)!=null&&s.startField||(i=this.layer.timeInfo)!=null&&i.trackIdField))throw new u("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");return this._proxy.queryLatestObservations(this._cleanUpQuery(e),t).then(n=>{const a=f.fromJSON(n);return a.features.forEach(c=>{c.layer=this.layer,c.sourceLayer=this.layer}),a})}detach(){super.detach(),this.connectionStatus="disconnected"}_createClientOptions(){return{...super._createClientOptions(),setProperty:e=>{this.set(e.propertyName,e.value)}}}_createTileRendererHash(e){const t=`${JSON.stringify(this.layer.purgeOptions)}.${JSON.stringify(y(this.layer.definitionExpression,this.layer.geometryDefinition))})`;return super._createTileRendererHash(e)+t}async _createServiceOptions(){const e=this.layer,{objectIdField:t}=e,r=e.fields.map(a=>a.toJSON()),s=_(e.geometryType),i=e.timeInfo&&e.timeInfo.toJSON()||null,n=e.spatialReference?e.spatialReference.toJSON():null;return{type:"stream",fields:r,geometryType:s,objectIdField:t,timeInfo:i,source:this.layer.parsedUrl,serviceFilter:y(this.layer.definitionExpression,this.layer.geometryDefinition),purgeOptions:this.layer.purgeOptions.toJSON(),enabledEventTypes:Array.from(this._enabledEventTypes.values()),spatialReference:n,maxReconnectionAttempts:this.layer.maxReconnectionAttempts,maxReconnectionInterval:this.layer.maxReconnectionInterval,updateInterval:this.layer.updateInterval,customParameters:e.customParameters}}};p([m()],o.prototype,"errorString",void 0),p([m({readOnly:!0})],o.prototype,"connectionError",null),p([m()],o.prototype,"connectionStatus",void 0),o=p([d("esri.views.2d.layers.StreamLayerView2D")],o);const ye=o;export{ye as default};
