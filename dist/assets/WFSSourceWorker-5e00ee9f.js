import{j as l}from"./asyncUtils-59234081.js";import{a as n,s as g}from"./Error-bd05b442.js";import{r as _,e as f}from"./typedArrayUtil-2bcf3cee.js";import{f as m,j as d}from"./promiseUtils-29120e0a.js";import{E as w,z as p}from"./Extent-7f29a1bb.js";import{n as E,r as q}from"./featureConversionUtils-7c9ea581.js";import{u as F}from"./FeatureStore-ca53cf3a.js";import{g as S,f as T}from"./projectionSupport-1035a977.js";import{Y as x}from"./QueryEngine-f83539f0.js";import{T as j,I}from"./geojson-49325bac.js";import{m as b}from"./sourceUtils-02604baa.js";import{K as C}from"./wfsUtils-8099593f.js";import{r as P}from"./FieldsIndex-394de0a1.js";import"./cast-daef7652.js";import"./string-3d0ebcd3.js";import"./ensureType-fa162cfc.js";import"./nextTick-3ee5a785.js";import"./jsonUtils-8bd548d9.js";import"./Polyline-c56eca9b.js";import"./OptimizedFeature-9345d11b.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./Evented-d8fc77f0.js";import"./aaBoundingBox-6fbd5972.js";import"./mathUtils-daf59e84.js";import"./common-701a4199.js";import"./aaBoundingRect-45a7fe45.js";import"./PooledRBush-4701a012.js";import"./quickselect-322ec8e1.js";import"./centroid-de776b3b.js";import"./projection-33a6cba9.js";import"./preload-helper-101896b7.js";import"./unitUtils-43365914.js";import"./jsonMap-a9c94baf.js";import"./SimpleObservable-7c382d01.js";import"./mat4-62d5e6a4.js";import"./assets-4cb15247.js";import"./request-c2b0ab45.js";import"./zscale-a508c8e5.js";import"./json-48e3ea08.js";import"./MemCache-5bd66e9c.js";import"./normalizeUtils-d322ac85.js";import"./geometry-4b789d90.js";import"./typeUtils-d7b057b5.js";import"./QueryEngineResult-5fac197b.js";import"./quantizationUtils-72167b00.js";import"./ItemCache-9a7b0057.js";import"./WhereClause-fc7e60fe.js";import"./utils-6fdb990e.js";import"./generateRendererUtils-92e71197.js";import"./colorRamps-3439e132.js";import"./Color-2245b966.js";import"./colorUtils-639f4d25.js";import"./enumeration-e46f3fd4.js";import"./Symbol-f45dc441.js";import"./utils-f95dbca3.js";import"./fieldUtils-021fea8a.js";import"./arcadeOnDemand-87969052.js";import"./QueryEngineCapabilities-42e44ded.js";import"./timeSupport-21b6beab.js";import"./Scheduler-74975675.js";import"./reactiveUtils-3c1b281e.js";import"./xmlUtils-444cb4c0.js";import"./Field-0ac3c9d2.js";import"./fieldType-4ec45634.js";class At{constructor(){this._queryEngine=null,this._customParameters=null,this._snapshotFeatures=async t=>{const{objectIdField:e}=this._queryEngine,i=await C(this._getFeatureUrl??"",this._featureType.typeName,this._getFeatureOutputFormat,{customParameters:this._customParameters,dateFields:this._queryEngine.fieldsIndex.dateFields.map(r=>r.name),signal:t});await j(i),m(t);const o=I(i,{geometryType:this._queryEngine.geometryType,hasZ:!1,objectIdField:e});if(!w(this._queryEngine.spatialReference,p))for(const r of o)_(r.geometry)&&(r.geometry=E(S(q(r.geometry,this._queryEngine.geometryType,!1,!1),p,this._queryEngine.spatialReference)));let a=1;for(const r of o){const s={};b(this._fieldsIndex,s,r.attributes,!0),r.attributes=s,r.attributes[e]==null&&(r.objectId=r.attributes[e]=a++)}return o}}destroy(){var t;(t=this._queryEngine)==null||t.destroy(),this._queryEngine=null}async load(t,e){const{getFeatureUrl:i,getFeatureOutputFormat:o,spatialReference:a,fields:r,geometryType:s,featureType:u,objectIdField:h,customParameters:y}=t;this._featureType=u,this._customParameters=y,this._getFeatureUrl=i,this._getFeatureOutputFormat=o,this._fieldsIndex=new P(r),await this._checkProjection(a),m(e),this._queryEngine=new x({fields:r,geometryType:s,hasM:!1,hasZ:!1,objectIdField:h,spatialReference:a,timeInfo:null,featureStore:new F({geometryType:s,hasM:!1,hasZ:!1})});const c=await this._snapshotFeatures(f(e.signal));return this._queryEngine.featureStore.addMany(c),{extent:this._queryEngine.fullExtent}}async applyEdits(){throw new n("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(t,e.signal)}async queryFeatureCount(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(t,e.signal)}async queryObjectIds(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(t,e.signal)}async queryExtent(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(t,e.signal)}async querySnapping(t,e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(t,e.signal)}async refresh(t){var e;return this._customParameters=t,(e=this._snapshotTask)==null||e.abort(),this._snapshotTask=l(this._snapshotFeatures),this._snapshotTask.promise.then(i=>{this._queryEngine.featureStore.clear(),i&&this._queryEngine.featureStore.addMany(i)},i=>{this._queryEngine.featureStore.clear(),d(i)||g.getLogger("esri.layers.WFSLayer").error(new n("wfs-layer:getfeature-error","An error occurred during the GetFeature request",{error:i}))}),await this._waitSnapshotComplete(),{extent:this._queryEngine.fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _checkProjection(t){try{await T(p,t)}catch{throw new n("unsupported-projection","Projection not supported",{spatialReference:t})}}}export{At as default};
