import{ah as u,J as f,aB as w,A as h,B as p,an as y,ae as V,ai as _}from"./index-37fc1c1b.js";import{C}from"./Container-b9d7ae34.js";import{G as v}from"./GroupContainer-9cbb2c61.js";import{L as H,a as b}from"./LayerView-244ae284.js";import{G as c}from"./GraphicContainer-9429a885.js";import{G as m}from"./GraphicsView2D-e40131ab.js";import"./parser-395fa391.js";import"./_commonjsHelpers-725317a4.js";import"./definitions-3f56d206.js";import"./enums-08489827.js";import"./TextureDescriptor-b97332df.js";import"./WGLContainer-5594e30e.js";import"./VertexArrayObject-cf9dc3e5.js";import"./VertexElementDescriptor-24e04d97.js";import"./color-af3426c7.js";import"./enums-eb6e4255.js";import"./ProgramTemplate-24b15970.js";import"./MaterialKey-c607442c.js";import"./utils-a49cffda.js";import"./heatmapUtils-f0d5531e.js";import"./vec4-3dd523e8.js";import"./vec4f64-efdcb593.js";import"./StyleDefinition-edaaf36e.js";import"./config-c06e4a6d.js";import"./GeometryUtils-0ab64fac.js";import"./earcut-db592379.js";import"./featureConversionUtils-482c0b58.js";import"./OptimizedGeometry-af84d2ad.js";import"./OptimizedFeatureSet-5c82fe5a.js";import"./BaseGraphicContainer-f556a6d1.js";import"./FeatureContainer-be89bc5c.js";import"./AttributeStoreView-4869011b.js";import"./TiledDisplayObject-9518a62d.js";import"./visualVariablesUtils-bd68aa7d.js";import"./visualVariablesUtils-a6f5685f.js";import"./TileContainer-1e407596.js";import"./lengthUtils-03d7ac5d.js";import"./vec3f32-ec4c3c20.js";import"./normalizeUtils-e8b8b395.js";import"./normalizeUtilsCommon-e9d0815c.js";import"./ExpandedCIM-76d1f105.js";import"./BidiEngine-cdaf024a.js";import"./GeometryUtils-26dde58c.js";import"./Rect-df8ea165.js";import"./quantizationUtils-fa03eddf.js";import"./floatRGBA-392b8860.js";import"./normalizeUtilsSync-5221a545.js";import"./projectionSupport-35bf5dae.js";import"./json-9ae8d6f8.js";import"./labelingInfo-7fe41727.js";import"./labelUtils-41a42c6e.js";import"./defaultsJSON-b396ba80.js";import"./jsonUtils-08626db6.js";import"./Matcher-23440edb.js";import"./tileUtils-fdb57ff2.js";import"./TurboLine-2785dd63.js";import"./LRUCache-50b8fe4e.js";import"./MemCache-88779bec.js";import"./devEnvironmentUtils-e2e22b53.js";import"./styleUtils-1f72c3eb.js";import"./featureFlags-ec64a754.js";import"./schemaUtils-5cf89204.js";import"./sql-07ab1f45.js";import"./diffUtils-7b235f3e.js";import"./clusterUtils-6e1a0568.js";import"./SizeVariable-9c9109a6.js";import"./colorRamps-91762876.js";import"./LegendOptions-bd430cc4.js";import"./sizeVariableUtils-2914222a.js";import"./util-df65e226.js";import"./ComputedAttributeStorage-8bc6fd29.js";import"./FieldsIndex-bb94d0b9.js";import"./arcadeTimeUtils-ebce6a3b.js";import"./executionError-e2eca390.js";import"./centroid-1116d1e7.js";const g="sublayers",n="layerView",L=Object.freeze({remove(){},pause(){},resume(){}});let l=class extends H(b){constructor(){super(...arguments),this._highlightIds=new Map,this.container=new v}async fetchPopupFeatures(i){return Array.from(this.graphicsViews(),t=>t.hitTest(i).filter(e=>!!e.popupTemplate)).flat()}*graphicsViews(){if(this._graphicsViewsFeatureCollectionMap!=null){yield*this._graphicsViewsFeatureCollectionMap.keys();return}if(this._graphicsViews!=null){yield*this._graphicsViews;return}yield*[]}async hitTest(i,t){return Array.from(this.graphicsViews(),s=>{const a=s.hitTest(i);if(this._graphicsViewsFeatureCollectionMap!=null){const o=this._graphicsViewsFeatureCollectionMap.get(s);for(const r of a)!r.popupTemplate&&o.popupTemplate&&(r.popupTemplate=o.popupTemplate),r.sourceLayer=r.layer=this.layer}return a}).flat().map(s=>({type:"graphic",graphic:s,layer:this.layer,mapPoint:i}))}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof u?t=[i.uid]:Array.isArray(i)&&i.length>0?typeof i[0]=="number"?t=i:t=i.map(s=>s&&s.uid):f.isCollection(i)&&(t=i.map(s=>s&&s.uid).toArray());const e=t==null?void 0:t.filter(w);return e!=null&&e.length?(this._addHighlight(e),{remove:()=>{this._removeHighlight(e)}}):L}update(i){for(const t of this.graphicsViews())t.processUpdate(i)}attach(){const i=this.view,t=()=>this.requestUpdate(),e=this.layer.featureCollections;if(e!=null&&e.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const s of e){const a=new c(this.view.featuresTilingScheme),o=new m({view:i,graphics:s.source,renderer:s.renderer,requestUpdateCallback:t,container:a});this._graphicsViewsFeatureCollectionMap.set(o,s),this.container.addChild(o.container),this.addHandles([h(()=>s.visible,r=>o.container.visible=r,p),h(()=>o.updating,()=>this.notifyChange("updating"),p)],n)}this._updateHighlight()}else this.layer.sublayers!=null&&this.addHandles(y(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),g)}detach(){this._destroyGraphicsViews(),this.removeHandles(g)}moveStart(){}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.removeHandles(n);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),this.layer.sublayers==null)return;const i=[],t=this.view,e=()=>this.requestUpdate();for(const s of this.layer.sublayers){const a=new C,o=new c(this.view.featuresTilingScheme);o.fadeTransitionEnabled=!0;const r=new m({view:t,graphics:s.graphics,requestUpdateCallback:e,container:o});this.addHandles([s.on("graphic-update",r.graphicUpdateHandler),h(()=>s.visible,d=>r.container.visible=d,p),h(()=>r.updating,()=>this.notifyChange("updating"),p)],n),a.addChild(r.container),this.container.addChild(a),i.push(r)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this.graphicsViews())t.setHighlight(i)}};l=V([_("esri.views.2d.layers.MapNotesLayerView2D")],l);const Ki=l;export{Ki as default};
