import{a as h}from"./mathUtils-daf59e84.js";class s{constructor(i,t){this.min=i,this.max=t,this.range=t-i}ndiff(i,t=0){return Math.ceil((i-t)/this.range)*this.range+t}_normalize(i,t,n,r=0,e=!1){return(n-=r)<i?n+=this.ndiff(i-n):n>t&&(n-=this.ndiff(n-t)),e&&n===t&&(n=i),n+r}normalize(i,t=0,n=!1){return this._normalize(this.min,this.max,i,t,n)}clamp(i,t=0){return h(i-t,this.min,this.max)+t}monotonic(i,t,n){return i<t?t:t+this.ndiff(i-t,n)}minimalMonotonic(i,t,n){return this._normalize(i,i+this.range,t,n)}center(i,t,n){return t=this.monotonic(i,t,n),this.normalize((i+t)/2,n)}diff(i,t,n){return this.monotonic(i,t,n)-i}shortestSignedDiff(i,t){i=this.normalize(i);const n=(t=this.normalize(t))-i,r=t<i?this.minimalMonotonic(i,t)-i:t-this.minimalMonotonic(t,i);return Math.abs(n)<Math.abs(r)?n:r}contains(i,t,n){return t=this.minimalMonotonic(i,t),(n=this.minimalMonotonic(i,n))>i&&n<t}}function a(o){for(const i in o){const t=o[i];t instanceof Function&&(o[i]=t.bind(o))}return o}a(new s(0,2*Math.PI));a(new s(-Math.PI,Math.PI));const c=a(new s(0,360));export{c as s};
