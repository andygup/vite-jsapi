import{B as s,ah as o,V as a,aB as m,ae as p,af as g,ai as l}from"./index-65afe59f.js";import{f as c,d as n}from"./LayerView-c66ee5b5.js";import{i as d}from"./GraphicContainer-c1db9433.js";import{o as u}from"./GraphicsView2D-550446cc.js";import"./Container-e8893995.js";import"./parser-8554880e.js";import"./definitions-e9823d3c.js";import"./enums-74e97557.js";import"./TextureDescriptor-9f6b1d53.js";import"./color-0ea5ee36.js";import"./enums-55085e26.js";import"./VertexElementDescriptor-2925c6af.js";import"./BaseGraphicContainer-e3c4bee3.js";import"./FeatureContainer-c0f53321.js";import"./AttributeStoreView-d1776232.js";import"./TiledDisplayObject-d9916bb7.js";import"./visualVariablesUtils-a3fa934f.js";import"./visualVariablesUtils-79328d8b.js";import"./VertexArrayObject-eb5e0ff5.js";import"./TileContainer-74f018b1.js";import"./WGLContainer-50657b8c.js";import"./ProgramTemplate-d6438cda.js";import"./MaterialKey-d4d21a67.js";import"./utils-e7939558.js";import"./heatmapUtils-1ed1bbca.js";import"./vec4f64-aa64c7e9.js";import"./StyleDefinition-fbc907c2.js";import"./config-1337d16e.js";import"./GeometryUtils-dd03fc25.js";import"./earcut-0147fc3d.js";import"./featureConversionUtils-a232f677.js";import"./OptimizedGeometry-33b2eb0d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./lengthUtils-00939dab.js";import"./vec3f32-ad1dc57f.js";import"./normalizeUtils-678d9dd1.js";import"./normalizeUtilsCommon-2b774e39.js";import"./ExpandedCIM-04e76692.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-53652037.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-ce722d8e.js";import"./floatRGBA-4ec8974c.js";import"./normalizeUtilsSync-45cc566b.js";import"./projectionSupport-65ca4a6b.js";import"./json-48e3ea08.js";import"./labelingInfo-a25619a7.js";import"./labelUtils-ec59d2a3.js";import"./defaultsJSON-b087dd4d.js";import"./jsonUtils-15c906c8.js";import"./Matcher-1fbf8bdd.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-2482e49c.js";import"./LRUCache-fba88a6d.js";import"./MemCache-b8f96232.js";import"./devEnvironmentUtils-5002a058.js";import"./styleUtils-00c8d6d5.js";import"./featureFlags-acda3469.js";import"./schemaUtils-061a64ca.js";import"./sql-c4c85944.js";import"./diffUtils-0f0e8cfe.js";import"./clusterUtils-a342a95a.js";import"./SizeVariable-e7f3c0e2.js";import"./colorRamps-08b57831.js";import"./LegendOptions-d5bf6b73.js";import"./sizeVariableUtils-d4870b0d.js";import"./util-6e5d3a25.js";import"./ComputedAttributeStorage-10273ffa.js";import"./FieldsIndex-6df00c0a.js";import"./arcadeTimeUtils-55255860.js";import"./executionError-fb3f283a.js";import"./centroid-8e8cfa47.js";const w={remove(){},pause(){},resume(){}};let e=class extends c(n){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new u({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new d(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler))}detach(){this.container.removeAllChildren(),this.graphicsView=s(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){return this.graphicsView?this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate):[]}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof o?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(h=>h&&h.uid):a.isCollection(i)&&i.length>0&&(t=i.map(h=>h&&h.uid).toArray());const r=t==null?void 0:t.filter(m);return r!=null&&r.length?(this._addHighlight(r),{remove:()=>this._removeHighlight(r)}):w}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const r=this._highlightIds.get(t);this._highlightIds.set(t,r+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const r=this._highlightIds.get(t)-1;r===0?this._highlightIds.delete(t):this._highlightIds.set(t,r)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};p([g()],e.prototype,"graphicsView",void 0),e=p([l("esri.views.2d.layers.GraphicsLayerView2D")],e);const Gi=e;export{Gi as default};
