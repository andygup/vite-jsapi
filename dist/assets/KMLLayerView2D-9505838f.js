import{W as E,K as A,L as F,a5 as I,V as O,D as z,C as W,B as v,ap as U,aE as H,aF as L,aG as Y,aH as $,aI as K,aJ as J,ab as V,ac as S,ad as X}from"./index-af438f1c.js";import{b as D,g as Q,d as Z}from"./kmlUtils-f83e083b.js";import{w as tt,T as et,v as it}from"./Bitmap-829aa2e4.js";import{a as at}from"./BitmapContainer-7758fa69.js";import{f as st,d as rt}from"./LayerView-f0e3e49e.js";import{i as M}from"./GraphicContainer-b9d4b0a8.js";import{o as P}from"./GraphicsView2D-fa96ca3d.js";import{v as ot,$ as nt}from"./rasterProjectionHelper-6b99a820.js";import{n as lt}from"./WGLContainer-9e0377fd.js";import{M as ht,o as pt}from"./RenderingContext-6ebb8fd0.js";import{P as R,G as T,D as q,L as j,Y as mt,X as ct,f as N}from"./enums-10aa9b05.js";import{N as dt}from"./VertexArrayObject-7da08d1b.js";import{l as gt}from"./rasterUtils-3fcba004.js";import{m as G}from"./Texture-a749f284.js";import"./Container-8f784504.js";import"./definitions-43101aab.js";import"./color-2cbc85fc.js";import"./enums-55085e26.js";import"./VertexElementDescriptor-2925c6af.js";import"./BaseGraphicContainer-e9cc46e5.js";import"./FeatureContainer-8b29f4b1.js";import"./AttributeStoreView-14048ee6.js";import"./TiledDisplayObject-ae7fadc5.js";import"./visualVariablesUtils-1c6f13a4.js";import"./visualVariablesUtils-1d6847f6.js";import"./TileContainer-81381152.js";import"./utils-0fdc573c.js";import"./MaterialKey-c7f7ea21.js";import"./ExpandedCIM-e701d671.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-53652037.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-9d4c231e.js";import"./floatRGBA-683b28bc.js";import"./normalizeUtilsSync-86a58f4f.js";import"./projectionSupport-816b50e1.js";import"./json-48e3ea08.js";import"./Matcher-5e7f335c.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-28efcbb7.js";import"./GeometryUtils-dd03fc25.js";import"./earcut-61f7b102.js";import"./devEnvironmentUtils-5002a058.js";import"./schemaUtils-067fd831.js";import"./util-8edb3956.js";import"./ComputedAttributeStorage-0fe733a5.js";import"./arcadeTimeUtils-1e7df5d9.js";import"./executionError-fb3f283a.js";import"./centroid-8e8cfa47.js";import"./ProgramTemplate-6721bde7.js";import"./StyleDefinition-fbc907c2.js";import"./config-1337d16e.js";import"./programUtils-7cafd0d7.js";import"./NestedMap-1b5db22e.js";import"./OrderIndependentTransparency-5206b14a.js";import"./basicInterfaces-4ab7cc6a.js";import"./doublePrecisionUtils-e3c3d0d8.js";import"./DisjointTimerQuery-b21930a9.js";class p{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(p._instance)return p._instanceRefCount++,p._instance;p._instanceRefCount=1,p._instance=this,this._ownsRctx=!0;const i=document.createElement("canvas").getContext("webgl");i.getExtension("OES_texture_float"),this._rctx=new ht(i,{})}const s={applyProjection:!0,bilinear:!1,bicubic:!1},r=pt("raster/reproject","raster/reproject",new Map([["a_position",0]]),s);this._program=this._rctx.programCache.acquire(r.shaders.vertexShader,r.shaders.fragmentShader,r.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new lt(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,s,r=!1){const i=E(t.extent,s),a=new A({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:o,y:l}=ot(a,s,t.extent);let h=(o+l)/2;const n=Math.round((i.xmax-i.xmin)/h),d=Math.round((i.ymax-i.ymin)/h);h=(i.width/n+i.height/d)/2;const C=new A({x:h,y:h,spatialReference:i.spatialReference}),w=nt({projectedExtent:i,srcBufferExtent:t.extent,pixelSize:C,hasWrapAround:!0,spacing:[16,16]}),y=gt(this._rctx,w),u=new G(this._rctx,{width:n,height:d,pixelFormat:R.RGBA,dataType:T.UNSIGNED_BYTE,wrapMode:q.CLAMP_TO_EDGE,samplingMode:j.LINEAR,hasMipmap:!1}),m=new dt(this._rctx,{colorTarget:mt.TEXTURE,depthStencilTarget:ct.NONE,width:n,height:d},u);this._rctx.bindFramebuffer(m),this._rctx.setViewport(0,0,n,d),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(y,1),this._quad.bind();const{width:x=0,height:f=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",x,f),this._program.setUniform2fv("u_transformSpacing",w.spacing),this._program.setUniform2fv("u_transformGridSize",w.size),this._program.setUniform2f("u_targetImageSize",n,d),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),y.dispose(),r){const{width:_=0,height:c=0}=m.descriptor,b=new ImageData(_,c);return m.readPixels(0,0,_,c,R.RGBA,T.UNSIGNED_BYTE,b.data),m.detachColorTexture(N.COLOR_ATTACHMENT0),m.dispose(),{texture:u,extent:i,imageData:b}}return m.detachColorTexture(N.COLOR_ATTACHMENT0),m.dispose(),{texture:u,extent:i}}reprojectBitmapData(t,s){const r=tt(t.bitmapData)?et(t.bitmapData):t.bitmapData,i=new G(this._rctx,{width:t.bitmapData.width,height:t.bitmapData.height,pixelFormat:R.RGBA,dataType:T.UNSIGNED_BYTE,wrapMode:q.CLAMP_TO_EDGE,samplingMode:j.LINEAR,hasMipmap:!1},r),a=this.reprojectTexture({texture:i,extent:t.extent},s,!0);a.texture.dispose();const o=document.createElement("canvas"),l=a.imageData;return o.width=l.width,o.height=l.height,o.getContext("2d").putImageData(l,0,0),{bitmapData:o,extent:a.extent}}async loadAndReprojectBitmapData(t,s,r){const i=(await F(t,{responseType:"image"})).data,a=document.createElement("canvas");a.width=i.width,a.height=i.height;const o=a.getContext("2d");o.drawImage(i,0,0);const l=o.getImageData(0,0,a.width,a.height);if(s.spatialReference.equals(r))return{bitmapData:l,extent:s};const h=this.reprojectBitmapData({bitmapData:l,extent:s},r);return{bitmapData:h.bitmapData,extent:h.extent}}destroy(){this._ownsRctx?(p._instanceRefCount--,p._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),p._instance=null)):(this._quad.dispose(),this._program.dispose())}}p._instanceRefCount=0;class B{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let g=class extends st(rt){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new at,this._kmlVisualData=new B,this._fetchController=null,this.allVisiblePoints=new I,this.allVisiblePolylines=new I,this.allVisiblePolygons=new I,this.allVisibleMapImages=new O}async hitTest(e,t){var r,i,a;const s=this.layer;return[(r=this._pointsView)==null?void 0:r.hitTest(e),(i=this._polylinesView)==null?void 0:i.hitTest(e),(a=this._polygonsView)==null?void 0:a.hitTest(e)].flat().filter(Boolean).map(o=>(o.layer=s,o.sourceLayer=s,{type:"graphic",graphic:o,layer:s,mapPoint:e}))}update(e){this._polygonsView&&this._polygonsView.processUpdate(e),this._polylinesView&&this._polylinesView.processUpdate(e),this._pointsView&&this._pointsView.processUpdate(e)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new P({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new P({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new P({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",e=>{e.added.forEach(t=>this._addMapImage(t)),e.removed.forEach(t=>this._removeMapImage(t))}),z(()=>this.layer.visibleSublayers,e=>{for(const[t,s]of this._kmlVisualData.allSublayers)s.visibility=0;for(const t of e){const s=this._kmlVisualData.allSublayers.get(t.id);s&&(s.visibility=1)}this._refreshCollections()})]),this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new p}detach(){this._fetchController=W(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=v(this._polygonsView),this._polylinesView=v(this._polylinesView),this._pointsView=v(this._pointsView),this._imageReprojector=v(this._imageReprojector)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(e){var t,s;((t=this.view.spatialReference)!=null&&t.isWGS84||(s=this.view.spatialReference)!=null&&s.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(e.href,U.fromJSON(e.extent),this.view.spatialReference).then(r=>{const i=new it(r.bitmapData,{immutable:!1,requestRenderOnSourceChangedEnabled:!0});i.x=r.extent.xmin,i.y=r.extent.ymax,i.resolution=r.extent.width/r.bitmapData.width,i.rotation=e.rotation,this._mapImageContainer.addChild(i),this._bitmapIndex.set(e,i)})}async _getViewDependentUrl(e,t){const{viewFormat:s,viewBoundScale:r,httpQuery:i}=e;if(s!=null){if(t==null)throw new Error("Loading this network link requires a view state.");let a;if(await H(),r!=null&&r!==1){const c=new U(t.extent);c.expand(r),a=c}else a=t.extent;a=E(a,L.WGS84);const o=E(a,L.WebMercator),l=a.xmin,h=a.xmax,n=a.ymin,d=a.ymax,C=t.size[0]*t.pixelRatio,w=t.size[1]*t.pixelRatio,y=Math.max(o.width,o.height),u={"[bboxWest]":l.toString(),"[bboxEast]":h.toString(),"[bboxSouth]":n.toString(),"[bboxNorth]":d.toString(),"[lookatLon]":a.center.x.toString(),"[lookatLat]":a.center.y.toString(),"[lookatRange]":y.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":a.center.x.toString(),"[lookatTerrainLat]":a.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":a.center.x.toString(),"[cameraLat]":a.center.y.toString(),"[cameraAlt]":y.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":C.toString(),"[vertPixels]":w.toString(),"[terrainEnabled]":"0","[clientVersion]":Y,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},m=c=>{for(const b in c)for(const k in u)c[b]=c[b].replace(k,u[k])},x=$(s);m(x);let f={};i!=null&&(f=$(i),m(f));const _=K(e.href);return _.query={..._.query,...x,...f},`${_.path}?${J(x)}`}return e.href}async _fetchService(e){const t=new B;await this._loadVisualData(this.layer.url,t,e),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e))}_isSublayerVisible(e){const t=this._kmlVisualData.allSublayers.get(e);return!!(t!=null&&t.visibility)&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(e,t,s){return this._fetchParsedKML(e,s).then(async r=>{for(const i of r.sublayers){t.allSublayers.set(i.id,i);const a=i.points?await D(i.points):[],o=i.polylines?await D(i.polylines):[],l=i.polygons?await D(i.polygons):[],h=i.mapImages||[];if(t.allPoints.push(...a.map(n=>({item:n,sublayerId:i.id}))),t.allPolylines.push(...o.map(n=>({item:n,sublayerId:i.id}))),t.allPolygons.push(...l.map(n=>({item:n,sublayerId:i.id}))),t.allMapImages.push(...h.map(n=>({item:n,sublayerId:i.id}))),i.networkLink){const n=await this._getViewDependentUrl(i.networkLink,this.view.state);await this._loadVisualData(n,t,s)}}})}_fetchParsedKML(e,t){return Q(e,this.layer.spatialReference,this.layer.refreshInterval,t).then(s=>Z(s.data))}_removeMapImage(e){const t=this._bitmapIndex.get(e);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(e))}};V([S()],g.prototype,"_pointsView",void 0),V([S()],g.prototype,"_polylinesView",void 0),V([S()],g.prototype,"_polygonsView",void 0),V([S()],g.prototype,"updating",void 0),g=V([X("esri.views.2d.layers.KMLLayerView2D")],g);const xe=g;export{xe as default};
