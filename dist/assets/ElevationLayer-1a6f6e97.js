import{c8 as m,J as f,es as g,et as w,c,eu as V,ev as D,ew as S,ex as T,ey as b,s as L,$,L as p,aJ as x,_ as y,ab as o,ac as n,aU as k,ez as I,eA as E,ad as N,d$ as O}from"./index-e1d30004.js";import{a as j}from"./ArcGISCachedService-4b389201.js";import"./TilemapCache-84db0169.js";class A{constructor(e,t,s,i){this._hasNoDataValues=null,this._minValue=null,this._maxValue=null,"pixelData"in e?(this.values=e.pixelData,this.width=e.width,this.height=e.height,this.noDataValue=e.noDataValue):(this.values=e,this.width=t,this.height=s,this.noDataValue=i)}get hasNoDataValues(){if(this._hasNoDataValues==null){const e=this.noDataValue;this._hasNoDataValues=this.values.includes(e)}return this._hasNoDataValues}get minValue(){return this._ensureBounds(),this._minValue}get maxValue(){return this._ensureBounds(),this._maxValue}_ensureBounds(){if(this._minValue!=null)return;const{noDataValue:e,values:t}=this;let s=1/0,i=-1/0,h=!0;for(const l of t)l===e?this._hasNoDataValues=!0:(s=l<s?l:s,i=l>i?l:i,h=!1);h?(this._minValue=0,this._maxValue=0):(this._minValue=s,this._maxValue=i>-3e38?i:0)}}class P{constructor(e,t,s,i,h={}){this._mainMethod=t,this._transferLists=s,this._listeners=[],this._promise=m(e,{...h,schedule:i}).then(l=>{if(this._thread===void 0){this._thread=l,this._promise=null,h.hasInitialize&&this.broadcast({},"initialize");for(const d of this._listeners)this._connectListener(d)}else l.close()}),this._promise.catch(l=>f.getLogger("esri.core.workers.WorkerHandle").error(`Failed to initialize ${e} worker: ${l}`))}on(e,t){const s={removed:!1,eventName:e,callback:t,threadHandle:null};return this._listeners.push(s),this._connectListener(s),g(()=>{s.removed=!0,w(this._listeners,s),this._thread&&s.threadHandle!=null&&s.threadHandle.remove()})}destroy(){this._thread&&(this._thread.close(),this._thread=null),this._promise=null,this._listeners.length=0,this._transferLists={}}invoke(e,t){return this.invokeMethod(this._mainMethod,e,t)}invokeMethod(e,t,s){if(this._thread){const i=this._transferLists[e],h=i?i(t):[];return this._thread.invoke(e,t,{transferList:h,signal:s})}return this._promise?this._promise.then(()=>(c(s),this.invokeMethod(e,t,s))):Promise.reject(null)}broadcast(e,t){return this._thread?Promise.all(this._thread.broadcast(t,e)).then(()=>{}):this._promise?this._promise.then(()=>this.broadcast(e,t)):Promise.reject()}get promise(){return this._promise}_connectListener(e){this._thread&&this._thread.on(e.eventName,e.callback).then(t=>{e.removed||(e.threadHandle=t)})}}class _ extends P{constructor(e=null){super("LercWorker","_decode",{_decode:t=>[t.buffer]},e,{strategy:"dedicated"}),this.schedule=e,this.ref=0}decode(e,t,s){return e&&e.byteLength!==0?this.invoke({buffer:e,options:t},s):Promise.resolve(null)}release(){--this.ref<=0&&(u.forEach((e,t)=>{e===this&&u.delete(t)}),this.destroy())}}const u=new Map;function M(r=null){let e=u.get(r);return e||(r!=null?(e=new _(t=>r.immediate.schedule(t)),u.set(r,e)):(e=new _,u.set(null,e))),++e.ref,e}let a=class extends j(V(D(S(T(O))))){constructor(...r){super(...r),this.copyright=null,this.heightModelInfo=null,this.path=null,this.minScale=void 0,this.maxScale=void 0,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=M()}normalizeCtorArgs(r,e){return typeof r=="string"?{url:r,...e}:r}destroy(){this._lercDecoder=b(this._lercDecoder)}readVersion(r,e){let t=e.currentVersion;return t||(t=9.3),t}load(r){const e=r!=null?r.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:t=>{for(let s=0;s<t.typeKeywords.length;s++)if(t.typeKeywords[s].toLowerCase()==="elevation 3d layer")return!0;throw new L("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},r).catch($).then(()=>this._fetchImageService(e))),Promise.resolve(this)}fetchTile(r,e,t,s){const i=(s=s||{signal:null}).signal!=null?s.signal:s.signal=new AbortController().signal,h={responseType:"array-buffer",signal:i},l={noDataValue:s.noDataValue,returnFileInfo:!0};return this.load().then(()=>this._fetchTileAvailability(r,e,t,s)).then(()=>p(this.getTileUrl(r,e,t),h)).then(d=>this._lercDecoder.decode(d.data,l,i)).then(d=>new A(d))}getTileUrl(r,e,t){const s=!this.tilemapCache&&this.supportsBlankTile,i=x({...this.parsedUrl.query,blankTile:!s&&null});return`${this.parsedUrl.path}/tile/${r}/${e}/${t}${i?"?"+i:""}`}async queryElevation(r,e){const{ElevationQuery:t}=await y(()=>import("./ElevationQuery-56549524.js"),["assets/ElevationQuery-56549524.js","assets/index-e1d30004.js","assets/index-7b8586a8.css"]);return c(e),new t().query(this,r,e)}async createElevationSampler(r,e){const{ElevationQuery:t}=await y(()=>import("./ElevationQuery-56549524.js"),["assets/ElevationQuery-56549524.js","assets/index-e1d30004.js","assets/index-7b8586a8.css"]);return c(e),new t().createSampler(this,r,e)}_fetchTileAvailability(r,e,t,s){return this.tilemapCache?this.tilemapCache.fetchAvailability(r,e,t,s):Promise.resolve("unknown")}async _fetchImageService(r){var s;if(this.sourceJSON)return this.sourceJSON;const e={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:r},t=await p(this.parsedUrl.path,e);t.ssl&&(this.url=(s=this.url)==null?void 0:s.replace(/^http:/i,"https:")),this.sourceJSON=t.data,this.read(t.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile[v]}};o([n({json:{read:{source:"copyrightText"}}})],a.prototype,"copyright",void 0),o([n({readOnly:!0,type:I})],a.prototype,"heightModelInfo",void 0),o([n({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],a.prototype,"path",void 0),o([n({type:["show","hide"]})],a.prototype,"listMode",void 0),o([n({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],a.prototype,"minScale",void 0),o([n({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],a.prototype,"maxScale",void 0),o([n({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],a.prototype,"opacity",void 0),o([n({type:["ArcGISTiledElevationServiceLayer"]})],a.prototype,"operationalLayerType",void 0),o([n()],a.prototype,"sourceJSON",void 0),o([n({json:{read:!1},value:"elevation",readOnly:!0})],a.prototype,"type",void 0),o([n(E)],a.prototype,"url",void 0),o([n()],a.prototype,"version",void 0),o([k("version",["currentVersion"])],a.prototype,"readVersion",null),a=o([N("esri.layers.ElevationLayer")],a);const v=Symbol("default-fetch-tile");a.prototype.fetchTile[v]=!0;const q=a;export{q as default};
