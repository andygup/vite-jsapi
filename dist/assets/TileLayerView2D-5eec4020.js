import{b5 as w,b6 as y,b7 as I,b8 as V,D as v,b9 as H,d as a,ba as c,J as T,ae as l,af as g,ai as b}from"./index-3e52b35c.js";import"./MagnifierPrograms-e7eb29a5.js";import"./Container-a1098439.js";import"./BufferPool-56bbc887.js";import"./color-290782f1.js";import"./WGLContainer-000c8321.js";import"./enums-74e97557.js";import"./TextureDescriptor-58ff4a59.js";import"./ProgramTemplate-f3da5a91.js";import"./MaterialKey-acfe32a5.js";import"./utils-e315b7c0.js";import"./VertexArrayObject-a589cdfe.js";import"./StyleDefinition-fbc907c2.js";import"./enums-fb086c25.js";import"./OrderIndependentTransparency-5b5adc11.js";import"./floatRGBA-e4a740a0.js";import{o as q}from"./GraphicsView2D-e99fffe0.js";import"./AttributeStoreView-735c78bd.js";import"./earcut-1d3e79b3.js";import"./featureConversionUtils-317347cf.js";import"./lengthUtils-af74913c.js";import"./vec3f32-ad1dc57f.js";import"./normalizeUtils-9330ffa6.js";import{t as U,o as f,n as d}from"./imageUtils-35847313.js";import{f as Q,d as S}from"./LayerView-de1695d9.js";import{n as C}from"./HighlightGraphicContainer-063915dc.js";import{i as k}from"./RefreshableLayerView-3c5a0a94.js";import{G as F,P as G,r as P}from"./drapedUtils-36685467.js";import"./ExpandedCIM-40295f42.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-53652037.js";import"./enums-55085e26.js";import"./definitions-e9823d3c.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-6d685e00.js";import"./rasterizingUtils-e6b87e91.js";import"./pbf-25d38809.js";import"./GeometryUtils-dd03fc25.js";import"./imageutils-6306b55d.js";import"./Matcher-d7339937.js";import"./visualVariablesUtils-e6f9792d.js";import"./visualVariablesUtils-2d3f27ed.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-1cf8d125.js";import"./defaultsJSON-b087dd4d.js";import"./OptimizedGeometry-33b2eb0d.js";import"./LRUCache-c95257f8.js";import"./MemCache-d9724c39.js";import"./devEnvironmentUtils-5002a058.js";import"./styleUtils-5722cbd3.js";import"./featureFlags-5eac5aca.js";import"./CircularArray-ef508845.js";import"./DisjointTimerQuery-b21930a9.js";import"./throttle-7bf02de9.js";import"./ComputedAttributeStorage-5fe67d1f.js";import"./FieldsIndex-7440587e.js";import"./arcadeTimeUtils-5fee8af1.js";import"./executionError-fb3f283a.js";import"./centroid-8e8cfa47.js";import"./diffUtils-0bb1c07f.js";import"./sizeVariableUtils-d4870b0d.js";import"./parser-3d96dfad.js";import"./VertexElementDescriptor-2925c6af.js";import"./config-1337d16e.js";import"./heatmapUtils-655eea95.js";import"./vec4f64-aa64c7e9.js";import"./basicInterfaces-4ab7cc6a.js";import"./normalizeUtilsSync-4c400d69.js";import"./normalizeUtilsCommon-31392f08.js";import"./projectionSupport-086f5550.js";import"./json-48e3ea08.js";import"./labelingInfo-ee015ef4.js";import"./labelUtils-71f205d9.js";import"./jsonUtils-e52584d0.js";import"./schemaUtils-e9571329.js";import"./sql-4a668e57.js";import"./clusterUtils-b0bd6dc6.js";import"./SizeVariable-19fd8fef.js";import"./colorRamps-ae96b3f1.js";import"./LegendOptions-6fb63299.js";import"./util-78c2e6d5.js";import"./TiledDisplayObject-6185da34.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./BitmapTileContainer-e9e07205.js";import"./Bitmap-36b4db37.js";import"./TileContainer-e955505b.js";import"./BaseGraphicContainer-828f4cf7.js";import"./FeatureContainer-659e3bb2.js";import"./scaleUtils-15599600.js";import"./floorFilterUtils-080a7cd2.js";import"./sublayerUtils-7285889e.js";import"./popupUtils-2b06c109.js";const R=[0,0];let h=class extends k(U(Q(S))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}update(t){var i;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(i=this._highlightView)==null||i.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(i,e)=>this.fetchTile(i,e)}),this._tileStrategy=new V({cachePolicy:"keep",resampling:this.resampling,acquireTile:i=>this.acquireTile(i),releaseTile:i=>this.releaseTile(i),tileInfoView:this._tileInfoView}),F(this,this.layer)){const i=this._highlightView=new q({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new C(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new G({createFetchPopupFeaturesQueryGeometry:(e,r)=>P(e,r,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(e,r)=>{i.graphicUpdateHandler({graphic:e,property:r})},layerView:this,updatingHandles:this.updatingHandles})}this.requestUpdate(),this.addAttachHandles(v(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeatures(t,i){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(t,i):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):{remove(){}}}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var i;return H((i=this.layer.tileInfo)==null?void 0:i.spatialReference,t)}async doRefresh(){!this.attached||this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.tiles.forEach(t=>this._enqueueTileFetch(t)))}isUpdating(){var t;return((t=this._fetchQueue)==null?void 0:t.updating)??!1}acquireTile(t){const i=this._bitmapView.createTile(t),e=i.bitmap;return[e.x,e.y]=this._tileInfoView.getTileCoords(R,i.key),e.resolution=this._tileInfoView.getTileResolution(i.key),[e.width,e.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(i),this._bitmapView.addChild(i),this.requestUpdate(),i}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,i={}){const e="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:r,resamplingLevel:m=0}=i;if(!e)try{return await this._fetchImage(t,r)}catch(s){if(!a(s)&&!this.resampling)return f(this._tileInfoView.tileInfo.size);if(m<3){const n=this._tileInfoView.getTileParentId(t.id);if(n){const u=new c(n),_=await this.fetchTile(u,{...i,resamplingLevel:m+1});return d(this._tileInfoView,_,u,t)}}throw s}const p=new c(0,0,0,0);let o;try{if(await e.fetchAvailabilityUpsample(t.level,t.row,t.col,p,{signal:r}),p.level!==t.level&&!this.resampling)return f(this._tileInfoView.tileInfo.size);o=await this._fetchImage(p,r)}catch(s){if(a(s))throw s;o=await this._fetchImage(t,r)}return this.resampling?d(this._tileInfoView,o,p,t):o}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const i=await this._fetchQueue.push(t.key);t.bitmap.source=i,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(i){a(i)||T.getLogger(this.declaredClass).error(i)}this.requestUpdate()}}async _fetchImage(t,i){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:i})}};l([g()],h.prototype,"_fetchQueue",void 0),l([g()],h.prototype,"resampling",null),h=l([b("esri.views.2d.layers.TileLayerView2D")],h);const Ii=h;export{Ii as default};
