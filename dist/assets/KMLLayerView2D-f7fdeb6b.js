import{V as E,K as L,r as F,b5 as D,J as $,A as N,z as W,y as V,bf as k,bs as K,bt as A,bu as H,bv as U,bw as Q,bx as J,ae as x,af as v,ai as Y}from"./index-06bb4acc.js";import{g as M,f as X,p as Z}from"./kmlUtils-d3f85889.js";import{i as tt,r as et,B as it}from"./Bitmap-ed7e1a9c.js";import{B as st}from"./BitmapContainer-afecf9b0.js";import{L as rt,a as at}from"./LayerView-73b5e8d9.js";import{G as P}from"./GraphicContainer-7ddbee64.js";import{G as I}from"./GraphicsView2D-4501b77e.js";import{b as ot,d as nt}from"./rasterProjectionHelper-521debf3.js";import{V as lt}from"./WGLContainer-895f473b.js";import{R as pt,c as ht}from"./RenderingContext-b4f5b58f.js";import{a as G,b as mt,c as ct,d as dt,e as ut,g as j}from"./enums-08489827.js";import{F as gt}from"./VertexArrayObject-5e83453c.js";import{c as _t}from"./rasterUtils-ef9ddca5.js";import{a as q,T as B}from"./TextureDescriptor-767677c5.js";import"./jsonUtils-1706b276.js";import"./UniqueValueRenderer-068298f8.js";import"./LegendOptions-354afaa6.js";import"./diffUtils-c5ae4060.js";import"./SizeVariable-c3ec0bb9.js";import"./colorRamps-897fba1f.js";import"./sizeVariableUtils-2914222a.js";import"./lengthUtils-15108784.js";import"./ColorStop-bf090ad5.js";import"./jsonUtils-9b46ae66.js";import"./styleUtils-69a38ed9.js";import"./featureFlags-21ce0d4c.js";import"./DictionaryLoader-0fef3c08.js";import"./LRUCache-f0791803.js";import"./MemCache-99f16c60.js";import"./FieldsIndex-6063639d.js";import"./heatmapUtils-97c04762.js";import"./vec4-3dd523e8.js";import"./vec4f64-efdcb593.js";import"./FeatureSet-729dc7e5.js";import"./Field-26f45eb4.js";import"./fieldType-c7a04ebf.js";import"./Container-1a24548e.js";import"./parser-00347674.js";import"./_commonjsHelpers-725317a4.js";import"./definitions-3f56d206.js";import"./color-8e5f8af9.js";import"./enums-eb6e4255.js";import"./VertexElementDescriptor-24e04d97.js";import"./BaseGraphicContainer-3e5cceac.js";import"./FeatureContainer-2ecb8459.js";import"./AttributeStoreView-c0301836.js";import"./TiledDisplayObject-e9fe8a28.js";import"./visualVariablesUtils-23d65611.js";import"./visualVariablesUtils-6f58ca97.js";import"./TileContainer-296b6347.js";import"./utils-0743b8a6.js";import"./MaterialKey-434335b3.js";import"./vec3f32-ec4c3c20.js";import"./normalizeUtils-a2da6bc5.js";import"./normalizeUtilsCommon-536b62ea.js";import"./ExpandedCIM-027963af.js";import"./BidiEngine-cdaf024a.js";import"./GeometryUtils-26dde58c.js";import"./Rect-df8ea165.js";import"./quantizationUtils-ba99c963.js";import"./floatRGBA-5c78bdf6.js";import"./normalizeUtilsSync-f82a5c04.js";import"./projectionSupport-3befedca.js";import"./json-9ae8d6f8.js";import"./labelingInfo-58c23223.js";import"./labelUtils-cc8bf057.js";import"./defaultsJSON-b396ba80.js";import"./Matcher-39cae5d7.js";import"./tileUtils-fdb57ff2.js";import"./TurboLine-1808062f.js";import"./featureConversionUtils-bc1b4ef3.js";import"./OptimizedGeometry-af84d2ad.js";import"./OptimizedFeatureSet-5c82fe5a.js";import"./GeometryUtils-0ab64fac.js";import"./earcut-db592379.js";import"./devEnvironmentUtils-e2e22b53.js";import"./schemaUtils-a6bf3c74.js";import"./sql-4c5205a0.js";import"./clusterUtils-607a2369.js";import"./util-9c29c62a.js";import"./ComputedAttributeStorage-72738366.js";import"./arcadeTimeUtils-fc7ee695.js";import"./executionError-e2eca390.js";import"./centroid-1116d1e7.js";import"./ProgramTemplate-26d0268f.js";import"./StyleDefinition-edaaf36e.js";import"./config-c06e4a6d.js";import"./programUtils-9b0b0e53.js";import"./NestedMap-d4ac5d57.js";import"./OrderIndependentTransparency-01632ab9.js";import"./basicInterfaces-cc58f4ac.js";import"./doublePrecisionUtils-a59b69fa.js";import"./DisjointTimerQuery-0b864cc8.js";class p{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(p._instance)return p._instanceRefCount++,p._instance;p._instanceRefCount=1,p._instance=this,this._ownsRctx=!0;const i=document.createElement("canvas").getContext("webgl");i.getExtension("OES_texture_float"),this._rctx=new pt(i,{})}const r=ht("raster/reproject","raster/reproject",new Map([["a_position",0]]),{applyProjection:!0,bilinear:!1,bicubic:!1});this._program=this._rctx.programCache.acquire(r.shaders.vertexShader,r.shaders.fragmentShader,r.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new lt(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,e,r=!1){const s=E(t.extent,e),i=new L({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:a,y:n}=ot(i,e,t.extent);let o=(a+n)/2;const h=Math.round((s.xmax-s.xmin)/o),l=Math.round((s.ymax-s.ymin)/o);o=(s.width/h+s.height/l)/2;const C=new L({x:o,y:o,spatialReference:s.spatialReference}),f=nt({projectedExtent:s,srcBufferExtent:t.extent,pixelSize:C,hasWrapAround:!0,spacing:[16,16]}),w=_t(this._rctx,f),d=new q;d.wrapMode=G.CLAMP_TO_EDGE,d.width=h,d.height=l;const g=new B(this._rctx,d),m=new gt(this._rctx,{colorTarget:mt.TEXTURE,depthStencilTarget:ct.NONE,width:h,height:l},g);this._rctx.bindFramebuffer(m),this._rctx.setViewport(0,0,h,l),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(w,1),this._quad.bind();const{width:b=0,height:y=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",b,y),this._program.setUniform2fv("u_transformSpacing",f.spacing),this._program.setUniform2fv("u_transformGridSize",f.size),this._program.setUniform2f("u_targetImageSize",h,l),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),w.dispose(),r){const{width:_=0,height:S=0}=m.descriptor,c=new ImageData(_,S);return m.readPixels(0,0,_,S,dt.RGBA,ut.UNSIGNED_BYTE,c.data),m.detachColorTexture(j.COLOR_ATTACHMENT0),m.dispose(),{texture:g,extent:s,imageData:c}}return m.detachColorTexture(j.COLOR_ATTACHMENT0),m.dispose(),{texture:g,extent:s}}reprojectBitmapData(t,e){const r=tt(t.bitmapData)?et(t.bitmapData):t.bitmapData,s=new q;s.wrapMode=G.CLAMP_TO_EDGE,s.width=t.bitmapData.width,s.height=t.bitmapData.height;const i=new B(this._rctx,s,r),a=this.reprojectTexture({texture:i,extent:t.extent},e,!0);a.texture.dispose();const n=document.createElement("canvas"),o=a.imageData;return n.width=o.width,n.height=o.height,n.getContext("2d").putImageData(o,0,0),{bitmapData:n,extent:a.extent}}async loadAndReprojectBitmapData(t,e,r){const s=(await F(t,{responseType:"image"})).data,i=document.createElement("canvas");i.width=s.width,i.height=s.height;const a=i.getContext("2d");a.drawImage(s,0,0);const n=a.getImageData(0,0,i.width,i.height);if(e.spatialReference.equals(r))return{bitmapData:n,extent:e};const o=this.reprojectBitmapData({bitmapData:n,extent:e},r);return{bitmapData:o.bitmapData,extent:o.extent}}destroy(){this._ownsRctx?(p._instanceRefCount--,p._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),p._instance=null)):(this._quad.dispose(),this._program.dispose())}}p._instanceRefCount=0;class O{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let u=class extends rt(at){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new st,this._kmlVisualData=new O,this._fetchController=null,this.allVisiblePoints=new D,this.allVisiblePolylines=new D,this.allVisiblePolygons=new D,this.allVisibleMapImages=new $}async hitTest(t,e){var i,a,n;const r=this.layer;return[(i=this._pointsView)==null?void 0:i.hitTest(t),(a=this._polylinesView)==null?void 0:a.hitTest(t),(n=this._polygonsView)==null?void 0:n.hitTest(t)].flat().filter(Boolean).map(o=>(o.layer=r,o.sourceLayer=r,{type:"graphic",graphic:o,layer:r,mapPoint:t}))}update(t){this._polygonsView&&this._polygonsView.processUpdate(t),this._polylinesView&&this._polylinesView.processUpdate(t),this._pointsView&&this._pointsView.processUpdate(t)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new I({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new P(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new I({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new P(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new I({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new P(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",t=>{t.added.forEach(e=>this._addMapImage(e)),t.removed.forEach(e=>this._removeMapImage(e))}),N(()=>this.layer.visibleSublayers,t=>{for(const[e,r]of this._kmlVisualData.allSublayers)r.visibility=0;for(const e of t){const r=this._kmlVisualData.allSublayers.get(e.id);r&&(r.visibility=1)}this._refreshCollections()})]),this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new p}detach(){this._fetchController=W(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=V(this._polygonsView),this._polylinesView=V(this._polylinesView),this._pointsView=V(this._pointsView),this._imageReprojector=V(this._imageReprojector)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(t){var e,r;!((e=this.view.spatialReference)!=null&&e.isWGS84)&&!((r=this.view.spatialReference)!=null&&r.isWebMercator)||this._imageReprojector.loadAndReprojectBitmapData(t.href,k.fromJSON(t.extent),this.view.spatialReference).then(s=>{const i=new it(s.bitmapData,{immutable:!1,requestRenderOnSourceChangedEnabled:!0});i.x=s.extent.xmin,i.y=s.extent.ymax,i.resolution=s.extent.width/s.bitmapData.width,i.rotation=t.rotation,this._mapImageContainer.addChild(i),this._bitmapIndex.set(t,i)})}async _getViewDependentUrl(t,e){const{viewFormat:r,viewBoundScale:s,httpQuery:i}=t;if(r!=null){if(e==null)throw new Error("Loading this network link requires a view state.");await K();let a;if(s!=null&&s!==1){const c=new k(e.extent);c.expand(s),a=c}else a=e.extent;a=E(a,A.WGS84);const n=E(a,A.WebMercator),o=a.xmin,h=a.xmax,l=a.ymin,C=a.ymax,f=e.size[0]*e.pixelRatio,w=e.size[1]*e.pixelRatio,d=Math.max(n.width,n.height),g={"[bboxWest]":o.toString(),"[bboxEast]":h.toString(),"[bboxSouth]":l.toString(),"[bboxNorth]":C.toString(),"[lookatLon]":a.center.x.toString(),"[lookatLat]":a.center.y.toString(),"[lookatRange]":d.toString(),"[lookatTilt]":"0","[lookatHeading]":e.rotation.toString(),"[lookatTerrainLon]":a.center.x.toString(),"[lookatTerrainLat]":a.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":a.center.x.toString(),"[cameraLat]":a.center.y.toString(),"[cameraAlt]":d.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":f.toString(),"[vertPixels]":w.toString(),"[terrainEnabled]":"0","[clientVersion]":H,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},m=c=>{for(const R in c){let T;for(T in g)c[R]=c[R].replace(T,g[T])}},b=U(r);m(b);let y={};i!=null&&(y=U(i),m(y));const _=Q(t.href);return _.query={..._.query,...b,...y},`${_.path}?${J(b)}`}return t.href}async _fetchService(t){const e=new O;await this._loadVisualData(this.layer.url,e,t),this._kmlVisualData=e,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(t=>this._isSublayerVisible(t.sublayerId)).map(({item:t})=>t)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(t=>this._isSublayerVisible(t.sublayerId)).map(({item:t})=>t)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(t=>this._isSublayerVisible(t.sublayerId)).map(({item:t})=>t)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(t=>this._isSublayerVisible(t.sublayerId)).map(({item:t})=>t))}_isSublayerVisible(t){const e=this._kmlVisualData.allSublayers.get(t);return e!=null&&e.visibility?e.parentFolderId===-1?!0:this._isSublayerVisible(e.parentFolderId):!1}_loadVisualData(t,e,r){return this._fetchParsedKML(t,r).then(async s=>{for(const i of s.sublayers){e.allSublayers.set(i.id,i);const a=i.points?await M(i.points):[],n=i.polylines?await M(i.polylines):[],o=i.polygons?await M(i.polygons):[],h=i.mapImages||[];if(e.allPoints.push(...a.map(l=>({item:l,sublayerId:i.id}))),e.allPolylines.push(...n.map(l=>({item:l,sublayerId:i.id}))),e.allPolygons.push(...o.map(l=>({item:l,sublayerId:i.id}))),e.allMapImages.push(...h.map(l=>({item:l,sublayerId:i.id}))),i.networkLink){const l=await this._getViewDependentUrl(i.networkLink,this.view.state);await this._loadVisualData(l,e,r)}}})}_fetchParsedKML(t,e){return X(t,this.layer.spatialReference,this.layer.refreshInterval,e).then(r=>Z(r.data))}_removeMapImage(t){const e=this._bitmapIndex.get(t);e&&(this._mapImageContainer.removeChild(e),this._bitmapIndex.delete(t))}};x([v()],u.prototype,"_pointsView",void 0);x([v()],u.prototype,"_polylinesView",void 0);x([v()],u.prototype,"_polygonsView",void 0);x([v()],u.prototype,"updating",void 0);u=x([Y("esri.views.2d.layers.KMLLayerView2D")],u);const si=u;export{si as default};
