import{au as w,Z as I,eW as b,eS as f,L as g,bf as $,bC as O,hK as T,s as v,d as E,ae as s,af as p,e_ as S,bF as M,bG as R,ai as L,a$ as F,dY as P}from"./index-3e52b35c.js";import{O as N}from"./MultiOriginJSONSupport-f670b6ba.js";import{i as j}from"./scaleUtils-15599600.js";import{i as J}from"./APIKeyMixin-b38181fe.js";import{E as q,y as U,Y as k}from"./SublayersOwner-24050b5b.js";import{l as A}from"./ArcGISService-4ff6d7fb.js";import{a as _}from"./BlendLayer-626e5094.js";import{o as V}from"./CustomParametersMixin-93388844.js";import{c as z}from"./OperationalLayer-df3b2587.js";import{j as C}from"./PortalLayer-88116a27.js";import{p as G}from"./RefreshableLayer-06c92bc4.js";import{t as K}from"./ScaleRangeLayer-c1033939.js";import{a as W}from"./TemporalLayer-8e4b4f81.js";import{f as B}from"./commonProperties-0493cb6e.js";import{m as D}from"./ExportImageParameters-e8356a19.js";import{t as H}from"./imageBitmapUtils-2b92f41e.js";import{e as x}from"./sublayerUtils-7285889e.js";import{e as Y}from"./versionUtils-c3c8492c.js";import"./Version-f9abe000.js";import"./UniqueValueRenderer-55059987.js";import"./LegendOptions-6fb63299.js";import"./diffUtils-0bb1c07f.js";import"./SizeVariable-19fd8fef.js";import"./colorRamps-ae96b3f1.js";import"./sizeVariableUtils-d4870b0d.js";import"./lengthUtils-af74913c.js";import"./ColorStop-d7774d44.js";import"./jsonUtils-e52584d0.js";import"./styleUtils-5722cbd3.js";import"./featureFlags-5eac5aca.js";import"./jsonUtils-3671c946.js";import"./DictionaryLoader-bacd0d70.js";import"./LRUCache-c95257f8.js";import"./MemCache-d9724c39.js";import"./FieldsIndex-7440587e.js";import"./heatmapUtils-655eea95.js";import"./vec4f64-aa64c7e9.js";import"./sql-4a668e57.js";import"./QueryTask-f9170ac5.js";import"./infoFor3D-1eaade9a.js";import"./Query-b2fb59d0.js";import"./Field-9316575a.js";import"./fieldType-f9465eea.js";import"./executeForIds-c99d67f9.js";import"./query-ec68f1b6.js";import"./normalizeUtils-9330ffa6.js";import"./normalizeUtilsCommon-31392f08.js";import"./pbfQueryUtils-cd7edefd.js";import"./pbf-25d38809.js";import"./OptimizedGeometry-33b2eb0d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./queryZScale-8e1a8060.js";import"./executeQueryJSON-40d0b8fe.js";import"./FeatureSet-97410c4e.js";import"./featureConversionUtils-317347cf.js";import"./FeatureType-0a7a1485.js";import"./FeatureTemplate-46732ee9.js";import"./labelingInfo-ee015ef4.js";import"./labelUtils-71f205d9.js";import"./defaultsJSON-b087dd4d.js";import"./serviceCapabilitiesUtils-813954c8.js";import"./AttachmentQuery-8ebe691f.js";import"./popupUtils-482f6621.js";import"./jsonUtils-7a51ba7d.js";import"./parser-3d96dfad.js";import"./portalItemUtils-6dd219cf.js";import"./ElevationInfo-bc900c05.js";import"./floorFilterUtils-080a7cd2.js";let i=class extends _(W(K(q(U(A(z(C(N(G(J(V(w(F))))))))))))){constructor(...e){super(...e),this.dateFieldsTimeReference=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeReference=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,o){return typeof e=="string"?{url:e,...o}:e}load(e){const o=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(I).then(()=>this._fetchService(o))),Promise.resolve(this)}readImageFormat(e,o){const n=o.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(e,o,n,t){var h;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:r})=>r&&r.toArray().reverse()).toArray();let m=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((h=this.capabilities.exportMap)!=null&&h.supportsDynamicLayers)){const r=b(t.origin);if(r===f.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;m=x(a,c,f.SERVICE)}else if(r>f.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");m=x(a,c.sublayers,b(c.origin))}}const l=[],d={writeSublayerStructure:m,...t};let y=m;a.forEach(r=>{const c=r.write({},d);l.push(c),y=y||r.originOf("visible")==="user"}),l.some(r=>Object.keys(r).length>1)&&(o.layers=l),y&&(o.visibleLayers=a.filter(r=>r.visible).map(r=>r.id))}createExportImageParameters(e,o,n,t){const a=t&&t.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const m=new D({layer:this,floors:t==null?void 0:t.floors,scale:j({extent:e,width:o})*a}),l=m.toJSON();m.destroy();const d=!t||!t.rotation||this.version<10.3?{}:{rotation:-t.rotation},y=e&&e.spatialReference,h=y.wkid||JSON.stringify(y.toJSON());l.dpi*=a;const r={};if(t!=null&&t.timeExtent){const{start:c,end:u}=t.timeExtent.toJSON();r.time=c&&u&&c===u?""+c:`${c??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(r.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:h,imageSR:h,size:o+","+n,...l,...d,...r}}async fetchImage(e,o,n,t){const{data:a}=await this._fetchImage("image",e,o,n,t);return a}async fetchImageBitmap(e,o,n,t){const{data:a,url:m}=await this._fetchImage("blob",e,o,n,t);return H(a,m,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const o={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await g(this.url,o),{extent:t,fullExtent:a,timeExtent:m}=n,l=t||a;return{fullExtent:l&&$.fromJSON(l),timeExtent:m&&O.fromJSON({start:m[0],end:m[1]})}}loadAll(){return T(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return Y(this,e)}async _fetchImage(e,o,n,t,a){var d,y,h;const m={responseType:e,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(o,n,t,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(((d=m.query)==null?void 0:d.dynamicLayers)!=null&&!((h=(y=this.capabilities)==null?void 0:y.exportMap)!=null&&h.supportsDynamicLayers))throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:m.query});try{const{data:r}=await g(l,m);return{data:r,url:l}}catch(r){throw E(r)?r:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:r})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:o,ssl:n}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=o,this.read(o,{origin:"service",url:this.parsedUrl})}};s([p({type:S})],i.prototype,"dateFieldsTimeReference",void 0),s([p({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),s([p()],i.prototype,"dpi",void 0),s([p()],i.prototype,"gdbVersion",void 0),s([p()],i.prototype,"imageFormat",void 0),s([M("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),s([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),s([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),s([p()],i.prototype,"imageTransparency",void 0),s([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),s([p({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),s([p({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),s([p({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),s([p({type:S})],i.prototype,"preferredTimeReference",void 0),s([p()],i.prototype,"sourceJSON",void 0),s([p({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),s([R("sublayers",{layers:{type:[k]},visibleLayers:{type:[P]}})],i.prototype,"writeSublayers",null),s([p({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),s([p({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),s([p(B)],i.prototype,"url",void 0),i=s([L("esri.layers.MapImageLayer")],i);const ct=i;export{ct as default};
