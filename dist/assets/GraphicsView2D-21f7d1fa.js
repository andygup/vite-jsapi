import{bG as ye,bb as U,O as C,bH as ke,aM as fe,bI as Ke,bJ as ae,bK as He,bL as J,bM as Ee,bN as qe,bO as Ne,bP as Ze,bQ as Le,bR as Ye,b9 as Xe,bS as Qe,bT as We,bU as Je,u as j,bV as et,ab as b,ac as D,ad as ze,m as tt,bp as st,aA as it,D as rt,c as v,aj as nt,bW as ot,bX as at,d as k,aF as lt,$ as ge,Y as dt,bY as xe,bZ as _e,b_ as ht,b$ as ve,c0 as ee,c1 as ct,c2 as ut,c3 as ft,an as pt}from"./index-e1d30004.js";import{r as be,$ as mt,K as yt,i as gt}from"./ExpandedCIM-0ff0446e.js";import{a as xt}from"./normalizeUtilsSync-a9493313.js";import{f as _t,g as vt}from"./projectionSupport-fc16ea24.js";import{U as bt}from"./definitions-43101aab.js";import{x as pe,F as N,j as le,H as Dt,Y as Ct,P as X,R as wt,t as Tt,S as $e}from"./color-a87af45a.js";import{a as Ft,c as De}from"./VertexArrayObject-36a67124.js";import{F as Bt}from"./enums-10aa9b05.js";import{m as St,s as Rt}from"./AttributeStoreView-22c4864f.js";import{U as It}from"./MaterialKey-1143b332.js";import{a as Z,o as Mt,x as Lt,b as zt,n as $t,E as At}from"./Matcher-32ed4360.js";import{T as Ce,_ as Gt,o as Ot}from"./schemaUtils-fba4c809.js";import{h as Ut,I as Pt,r as Vt,B as jt}from"./ComputedAttributeStorage-b498a8b2.js";import{L as kt,d as $}from"./quantizationUtils-9a3641a9.js";const y=-1;let we=class{constructor(){this._dirties=[{vertexFrom:y,vertexCount:y,indexFrom:y,indexCount:y,allDirty:!1},{vertexFrom:y,vertexCount:y,indexFrom:y,indexCount:y,allDirty:!1},{vertexFrom:y,vertexCount:y,indexFrom:y,indexCount:y,allDirty:!1},{vertexFrom:y,vertexCount:y,indexFrom:y,indexCount:y,allDirty:!1},{vertexFrom:y,vertexCount:y,indexFrom:y,indexCount:y,allDirty:!1}]}hasDirty(){return this._dirties.some(e=>e.indexCount!==y||e.allDirty)}markAllClean(){for(const e of this._dirties)e.indexFrom=y,e.indexCount=y,e.vertexFrom=y,e.vertexCount=y,e.allDirty=!1}markAllDirty(){for(const e of this._dirties)e.allDirty=!0}forEach(e){for(let t=0;t<this._dirties.length;++t){const{indexCount:s,indexFrom:i,vertexCount:r,vertexFrom:n,allDirty:a}=this._dirties[t],h={};let l,d=!1;(a||n!==y&&r>0)&&(h.geometry={count:r,from:n,allDirty:a},d=!0),(a||i!==y&&s>0)&&(l={count:s,from:i,allDirty:a},d=!0),d&&e({indices:l,vertices:h},t)}}markDirtyIndices(e,t,s){const i=this._dirties[e],r=t,n=s;if(!i.allDirty)if(i.indexCount!==y){const a=Math.min(i.indexFrom,r),h=Math.max(i.indexFrom+i.indexCount,r+n)-a;i.indexFrom=a,i.indexCount=h}else i.indexFrom=r,i.indexCount=n}markDirtyVertices(e,t,s,i){const r=this._dirties[e],n=s,a=i;if(!r.allDirty)if(r.vertexCount!==y){const h=Math.min(r.vertexFrom,n),l=Math.max(r.vertexFrom+r.vertexCount,n+a)-h;r.vertexFrom=h,r.vertexCount=l}else r.vertexFrom=n,r.vertexCount=a}},Kt=class{get largestRange(){return this._largestRange}constructor(e){this._largestRange=null,this._parent=e,this._updateLargestRange()}rangeCreated(e){(!this._largestRange||e.count>this._largestRange.count)&&(this._largestRange=e)}rangeResized(e,t){e===this._largestRange?e.count<t&&this._updateLargestRange():(!this._largestRange||e.count>this._largestRange.count)&&(this._largestRange=e)}findBestRange(e){let t=this._parent._freeHead,s=null;for(;t!==null;)t.count>=e&&(!s||t.count-e<s.count-e)&&(s=t),t=t.next;return s}findAdjacentRanges(e,t){let s=!0,i=!1,r=null,n=this._parent._freeHead;for(;s&&!i;){const a=r!==null?r.from+r.count:0,h=n!==null?n.from:this._parent._size;e>=a&&e+t<=h?(s=!1,i=!0):n!==null?(r=n,n=n.next):s=!1}return[r,n]}_updateLargestRange(){let e=null,t=this._parent._freeHead;for(;t!==null;)(!e||t.count>e.count)&&(e=t),t=t.next;this._largestRange=e}},K=class L{constructor(e,t){this._allocated=0,this._size=e,this._freeHead=e>0?{from:0,count:e,prev:null,next:null}:null,this._bookKeeper=t||new Kt(this),this._freeHead&&this._bookKeeper.rangeCreated(this._freeHead)}allocate(e){const t=this._bookKeeper.findBestRange(e);if(t==null)return-1;const s=t.from,i=t.count;if(t.from+=e,t.count-=e,this._bookKeeper.rangeResized(t,s,i),this._allocated+=e,t.count===0){const r=t.prev!==null?this._freeHead:t.next;L._removeRange(t),this._freeHead=r}return s}free(e,t){const[s,i]=this._bookKeeper.findAdjacentRanges(e,t),r={from:e,count:t,prev:s??null,next:i??null};if(s!=null&&(s.next=r),i!=null&&(i.prev=r),this._bookKeeper.rangeCreated(r),this._allocated-=t,i!=null&&r.from+r.count===i.from){const n=r.from,a=r.count;L._fuse(r,i),L._removeRange(i),this._bookKeeper.rangeResized(r,n,a),this._bookKeeper.rangeResized(i,void 0,0)}if(s!=null&&s.from+s.count===r.from){const n=s.from,a=s.count;L._fuse(s,r),L._removeRange(r),this._bookKeeper.rangeResized(s,n,a),this._bookKeeper.rangeResized(r,void 0,0)}this._freeHead=r.prev!==null?this._freeHead:r}get fragmentation(){const e=this._size-this._allocated;return e===0?0:1-this._bookKeeper.largestRange.count/e}static _removeRange(e){e.prev!==null?e.next!==null?(e.prev.next=e.next,e.next.prev=e.prev):e.prev.next=null:e.next!==null&&(e.next.prev=null)}static _fuse(e,t){e.count+=t.count,e.next=t.next,t.from+=t.count,t.count=0,t.next!==null&&(t.next.prev=e)}};const O=["FILL","LINE","MARKER","TEXT","LABEL"];function Ht(o){const e=o.getStrides(),t={};for(let s=0;s<e.length;s++)t[O[s]]=e[s];return t}const Te=.5;let Fe=class Ae{constructor(e,t,s,i){this._strides=e,this._displayList=t,this._freeListsAndStorage={},this._dirtyMap=null,this._dirtyMap=s;for(const r in e){this._freeListsAndStorage[r]={vtxFreeList:i?new K(i):null,idxFreeList:i?new K(i):null,vertexBuffers:{},indexBuffer:i?new Uint32Array(i):null};for(const n in e[r])this._freeListsAndStorage[r].vertexBuffers[n]={data:i?pe(i,e[r][n]):null,stride:e[r][n]}}}static fromTileData(e,t){var h;const s=Ht(e),i=[0,0,0,0,0],r=[0,0,0,0,0];for(const l of e.tileDisplayData.displayObjects)for(const d of l.displayRecords)i[d.geometryType]=Math.max(i[d.geometryType],d.vertexFrom+d.vertexCount),r[d.geometryType]=Math.max(r[d.geometryType],d.indexFrom+d.indexCount);const n=new Ae(s,e.tileDisplayData.displayList,t,void 0),a=((h=e.tileBufferData)==null?void 0:h.geometries)??[];for(let l=0;l<a.length;++l){const d=i[l],c=r[l],u=a[l],f=O[l],m=n._storageFor(f),p=a[l].indexBuffer;m.indexBuffer=p,m.idxFreeList=new K(p.length),m.idxFreeList.allocate(c);let g=0;for(const _ in u.vertexBuffer){const x=a[l].vertexBuffer[_];m.vertexBuffers[_].data=x.data,m.vertexBuffers[_].stride=x.stride;const S=N(x.stride),V=x.data.length*S/x.stride;g||(g=V)}m.vtxFreeList=new K(g),m.vtxFreeList.allocate(d)}return n}delete(e){const t=O[e.geometryType];this._freeVertices(t,e.vertexFrom,e.vertexCount),this._freeIndices(t,e.indexFrom,e.indexCount),this._displayList.removeFromList(e),e.vertexFrom=void 0,e.indexFrom=void 0}setMeshData(e,t,s,i,r){const n=O[e.geometryType];let a,h;e.meshData=null,e.vertexFrom===void 0?(h=t.vertexCount,a=this._allocateVertices(n,h)):t.vertexCount>e.vertexCount?(this._freeVertices(n,e.vertexFrom,e.vertexCount),h=t.vertexCount,a=this._allocateVertices(n,h)):t.vertexCount===e.vertexCount?(a=e.vertexFrom,h=e.vertexCount):(this._freeVertices(n,e.vertexFrom+t.vertexCount,e.vertexCount-t.vertexCount),a=e.vertexFrom,h=t.vertexCount);let l,d,c,u=!0;if(e.indexFrom===void 0?(l=r,c=t.indexCount,d=this._allocateIndices(n,c)):t.indexCount>e.indexCount?(l=this._displayList.removeFromList(e),this._freeIndices(n,e.indexFrom,e.indexCount),c=t.indexCount,d=this._allocateIndices(n,c)):t.indexCount===e.indexCount?(u=!1,d=e.indexFrom,c=e.indexCount):(l=this._displayList.removeFromList(e),this._freeIndices(n,e.indexFrom+t.indexCount,e.indexCount-t.indexCount),d=e.indexFrom,c=t.indexCount),a!==-1&&d!==-1){const f=this._storageFor(n);if(le(a,d,f.vertexBuffers,f.indexBuffer,t,s,i),e.vertexFrom=a,e.indexFrom=d,e.vertexCount=t.vertexCount,e.indexCount=t.indexCount,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const m in s)this._dirtyMap.markDirtyVertices(e.geometryType,m,e.vertexFrom,e.vertexCount)}return u&&this._displayList.addToList(e,l),!0}return a!==-1&&this._freeVertices(n,a,h),d!==-1&&this._freeIndices(n,d,c),e.setMeshDataFromBuffers(t,s,i),e.vertexFrom=void 0,e.vertexCount=0,e.indexFrom=void 0,e.indexCount=0,!1}tryAddMeshData(e,t){const s=t.vertexBuffer,i=t.indexBuffer,r=O[e.geometryType],n=this._allocateVertices(r,e.vertexCount);if(n===-1)return this._freeVertices(r,n,e.vertexCount),!1;const a=this._allocateIndices(r,e.indexCount);if(a===-1)return this._freeVertices(r,n,e.vertexCount),this._freeIndices(r,a,e.indexCount),!1;const h=this._storageFor(r);if(le(n,a,h.vertexBuffers,h.indexBuffer,e,s,i),e.vertexFrom=n,e.indexFrom=a,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const l in s)this._dirtyMap.markDirtyVertices(e.geometryType,l,n,e.vertexCount)}return this._displayList.addToList(e),!0}_allocateVertices(e,t){var n,a;const s=this._storageFor(e),i=(n=s.vtxFreeList)==null?void 0:n.allocate(t);if(i==null||i===-1)return-1;const r=(a=s.vtxFreeList)==null?void 0:a.fragmentation;return r==null||r>Te?-1:i}_freeVertices(e,t,s){var r;(r=this._storageFor(e).vtxFreeList)==null||r.free(t,s)}_freeIndices(e,t,s){var r;(r=this._storageFor(e).idxFreeList)==null||r.free(t,s)}_allocateIndices(e,t){var n,a;const s=this._storageFor(e),i=(n=s.idxFreeList)==null?void 0:n.allocate(t);if(i==null||i===-1)return-1;const r=(a=s.idxFreeList)==null?void 0:a.fragmentation;return r==null||r>Te?-1:i}_storageFor(e){return this._freeListsAndStorage[e]}_stridesFor(e,t){return this._strides[e][t]}},Et=class{constructor(e){this.geometryMap=Dt(()=>({indexBuffer:De.createIndex(e,Bt.STATIC_DRAW),vao:null}),(t,s)=>({vertexBuffer:De.createVertex(e,Ct[s])}))}dispose(){for(let e=0;e<5;e++){const t=this.geometryMap[e];if(t){t.data.vao&&t.data.vao.dispose(!1),t.data.indexBuffer&&t.data.indexBuffer.dispose();for(const s in t.buffers)t.buffers[s]&&t.buffers[s].data.vertexBuffer.dispose()}}}get(e){const t=this.geometryMap[e];return{getVAO(s,i,r){if(!t.data.vao){const n={};for(const a in t.buffers)n[a]=t.buffers[a].data.vertexBuffer;t.data.vao=new Ft(s,r,i,n,t.data.indexBuffer)}return t.data.vao}}}has(e){return this.geometryMap[e]!=null}upload(e,t){t.forEach((s,i)=>{this._upload(s,i,e)})}_upload(e,t,s){if(e.indices&&(e.indices.allDirty?this._uploadIndices(s,t):e.indices.from!=null&&e.indices.count!=null&&this._uploadIndices(s,t,e.indices.from,e.indices.count)),e.vertices){const i=e.vertices;for(const r in i){const n=i[r];n.allDirty?this._uploadVertices(s,t,r):n.from!=null&&n.count!=null&&this._uploadVertices(s,t,r,n.from,n.count)}}}_uploadVertices(e,t,s,i,r){const n=this.geometryMap[t];if(!n)return;const a=e.geometries[t].vertexBuffer[s];if(!a)return;const{data:h,stride:l}=a;if(n.buffers[s]&&h.length>0){const d=l/h.BYTES_PER_ELEMENT;i!=null&&r!=null?n.buffers[s].data.vertexBuffer.setSubData(h,i*d,i*d,(i+r)*d):n.buffers[s].data.vertexBuffer.setData(h)}}_uploadIndices(e,t,s,i){const r=this.geometryMap[t];if(!r)return;const n=e.geometries[t].indexBuffer;r.data.indexBuffer&&n.length>0&&(s!=null&&i!=null?r.data.indexBuffer.setSubData(n,s,s,s+i):r.data.indexBuffer.setData(n))}};class qt extends St{constructor(){super(...arguments),this._data=null,this._displayList=null,this._lastCommitTime=0,this._hasData=!1,this._invalidated=!1,this._wglBuffers=null,this._dirtyMap=new we}destroy(){super.destroy(),this.clear()}get hasData(){return!!this._hasData}get displayObjects(){return this._displayObjects??[]}getGeometry(e){return this._wglBuffers&&this._wglBuffers.has(e)?this._wglBuffers.get(e):null}getDisplayList(){return this._displayList}patch(e){var i,r;if(e.clear===!0)return this.clear(),void(this._hasData=!1);const t=e.addOrUpdate,s=e.remove;!this._data&&t&&((i=t.tileDisplayData)!=null&&i.displayObjects.length)?(t.tileDisplayData.computeDisplayList(),this._dirtyMap=new we,this._dispRecStore=Fe.fromTileData(t,this._dirtyMap),this._data=t,this._dirtyMap.markAllDirty(),this._hasData=!0,e.end&&this.ready()):this._data&&(t&&((r=t.tileDisplayData)!=null&&r.displayObjects.length)||s.length)?this._doPatchData(e):e.end&&this.ready(),e.end&&!this._data&&this.clear(),this.requestRender(),this.emit("change")}commit(e){e.time&&e.time===this._lastCommitTime||(this._lastCommitTime=e.time,this.visible&&this._data&&(this._wglBuffers||(this._wglBuffers=new Et(e.context)),(this._dirtyMap.hasDirty()||this._invalidated)&&(this._invalidated=!1,this._wglBuffers.upload(this._data.tileBufferData,this._dirtyMap),this._displayList=this._data.tileDisplayData.displayList.clone(),this._displayObjects=this._data.tileDisplayData.displayObjects.slice(),this._dirtyMap.markAllClean())))}clear(){this._data=null,this._displayList=null,this._dispRecStore=null,this._wglBuffers&&(this._wglBuffers.dispose(),this._wglBuffers=null)}_doPatchData(e){this._invalidated=!0,this._patchData(e)||(this._dirtyMap.markAllDirty(),this._data.reshuffle(),this._dispRecStore=Fe.fromTileData(this._data,this._dirtyMap)),this.requestRender()}_patchData(e){let t=!0;const s=e.addOrUpdate&&e.addOrUpdate.tileDisplayData&&e.addOrUpdate.tileDisplayData.displayObjects||[],i=(e.remove||[]).slice();for(const a of s)a.insertAfter!=null&&i.push(a.id);let r;i.length>0&&(r=new Set(i));const n=this._data.tileDisplayData;for(const a of i){const h=n.displayObjectRegistry.get(a);if(h){n.displayList.removeFromList(h.displayRecords);for(const l of h.displayRecords)this._dispRecStore.delete(l);n.displayObjectRegistry.delete(a)}}r!=null&&r.size&&(n.displayObjects=n.displayObjects.filter(a=>!r.has(a.id)));for(const a of s){let h,l=n.displayObjectRegistry.get(a.id);if(l){const c=l.displayRecords;l.set(a),l.displayRecords=c;const u=l.displayRecords.length;for(let f=0;f<u;++f){const m=l.displayRecords[f],p=a.displayRecords[f];(f>=a.displayRecords.length||m.geometryType!==p.geometryType||m.symbolLevel!==p.symbolLevel||m.zOrder!==p.zOrder||m.materialKey!==p.materialKey)&&(this._dispRecStore.delete(l.displayRecords[f]),f<a.displayRecords.length&&(l.displayRecords[f]=void 0))}l.displayRecords.length=a.displayRecords.length}else{let c;l=a.copy(),l.displayRecords=[],n.displayObjectRegistry.set(a.id,l);const u=n.displayObjects;if(l.insertAfter!=null)if(h={},l.insertAfter>=0){const f=n.displayObjectRegistry.get(l.insertAfter);f?(c=u.indexOf(f)+1,c<u.length?u.splice(c,0,l):(u.push(l),c=u.length)):(u.push(l),c=u.length)}else u.unshift(l),c=0;else u.push(l),c=u.length;if(h){const f=a.displayRecords.length>0?1:0;let m=0;for(let p=c-1;p>=0&&m<f;--p)for(let g=u[p].displayRecords.length-1;g>=0&&m<f;--g){const _=u[p].displayRecords[g],x=n.displayList.getDPInfoType();h[x]||(h[x]=_,++m)}}}const d=a.displayRecords.length;for(let c=0;c<d;++c){const u=a.displayRecords[c];let f=l.displayRecords[c];f?(f.meshData=u.meshData,f.materialKey=u.materialKey):(f=u.copy(),f.vertexFrom=void 0,f.indexFrom=void 0,l.displayRecords[c]=f);const m=u.geometryType,p=n.displayList.getDPInfoType(),g=e.addOrUpdate.tileBufferData.geometries[m],_=g.vertexBuffer,x=g.indexBuffer;let S;h&&(S=h[p]?n.displayList.splitAfter(h[p]):-1),t=this._dispRecStore.setMeshData(f,u,_,x,S)&&t,h&&f.indexFrom!=null&&f.indexFrom!=null&&(h[p]=f)}}return t}}let Ge=class{constructor(){this._byGeometryType=null}get satisfied(){return!this._byGeometryType}reset(){this._byGeometryType=null}verticesFor(e){return this._byGeometryType?this._byGeometryType[e].vertices:0}indicesFor(e){return this._byGeometryType?this._byGeometryType[e].indices:0}needMore(e,t,s){if(!t&&!s)return;this._byGeometryType||(this._byGeometryType=[{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0}]);const i=this._byGeometryType[e];i.vertices+=t,i.indices+=s}};const te=5;let se=class de{constructor(){this.geometries=[{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}}]}clone(){const e=new de;for(let t=0;t<this.geometries.length;t++){const s=this.geometries[t],i=e.geometries[t];i.indexBuffer=s.indexBuffer.slice(),i.vertexBuffer={};for(const r in s.vertexBuffer){const{data:n,stride:a}=s.vertexBuffer[r];i.vertexBuffer[r]={data:n.slice(),stride:a}}}return e}static deserialize(e){const t=new de;for(let s=0;s<te;++s){t.geometries[s].indexBuffer=new Uint32Array(e.geometries[s].indexBuffer),t.geometries[s].vertexBuffer={};for(const i in e.geometries[s].vertexBuffer)t.geometries[s].vertexBuffer[i]={data:X(e.geometries[s].vertexBuffer[i].data,e.geometries[s].vertexBuffer[i].stride),stride:e.geometries[s].vertexBuffer[i].stride}}return t}serialize(){const e={geometries:[{indexBuffer:this.geometries[0].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[1].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[2].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[3].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[4].indexBuffer.buffer,vertexBuffer:{}}]};for(let t=0;t<te;++t)for(const s in this.geometries[t].vertexBuffer)e.geometries[t].vertexBuffer[s]={data:this.geometries[t].vertexBuffer[s].data.buffer,stride:this.geometries[t].vertexBuffer[s].stride};return e}getBuffers(){const e=[];for(let t=0;t<te;++t){e.push(this.geometries[t].indexBuffer.buffer);for(const s in this.geometries[t].vertexBuffer)e.push(this.geometries[t].vertexBuffer[s].data.buffer)}return e}};function H(o,e,t,...s){e<o.length?o.splice(e,t,...s):o.push(...s)}let Nt=class Oe{constructor(){this.symbolLevels=[]}replay(e,t,s){for(const i of this.symbolLevels)for(const r of i.zLevels){const n=r.geometryDPInfo.unified;if(n)for(const a of n){const{geometryType:h,materialKey:l,indexFrom:d,indexCount:c}=a,u=It.load(l).symbologyType,f=e.painter.getBrush(h,u),m={geometryType:h,materialKey:l,indexFrom:d,indexCount:c,target:t.getGeometry(h)};f.prepareState(e),f.drawGeometry(e,t,m,s)}}}get empty(){return!this.symbolLevels||this.symbolLevels.length===0}clear(){this.symbolLevels.length=0}addToList(e,t){if(Array.isArray(e))for(const s of e)this._addToList(s,t);else this._addToList(e,t)}removeFromList(e){Array.isArray(e)||(e=[e]);let t=null;for(const s of e)t=this._removeFromList(s);return t}clone(){const e=new Oe;for(const t of this.symbolLevels)e.symbolLevels.push(t.clone());return e}splitAfter(e){const t=this._getDisplayList(e.symbolLevel,e.zOrder),s=t.length,i=e.indexFrom+e.indexCount;for(let r=0;r<s;++r){const n=t[r];if(n.geometryType===e.geometryType&&i>n.indexFrom&&i<=n.indexFrom+n.indexCount){if(i<n.indexFrom+n.indexCount){const a=new ie;a.geometryType=n.geometryType,a.materialKey=n.materialKey,a.indexFrom=i,a.indexCount=n.indexFrom+n.indexCount-i,t.splice(r+1,0,a),n.indexCount=i-n.indexFrom}return r}}}_addToList(e,t){const s=e.symbolLevel,i=e.zOrder,r=this._getDisplayList(s,i),n=t??r.length-1,a=n>=0&&n<r.length?r[n]:null;if(a!==null&&a.materialKey===e.materialKey&&a.indexFrom+a.indexCount===e.indexFrom&&a.geometryType===e.geometryType)a.indexCount+=e.indexCount;else{const h=new ie;h.indexFrom=e.indexFrom,h.indexCount=e.indexCount,h.materialKey=e.materialKey,h.geometryType=e.geometryType,H(r,n+1,0,h)}}_removeFromList(e){const t=e.symbolLevel,s=e.zOrder,i=this._getDisplayList(t,s),r=i.length;let n;for(let a=0;a<r;++a){const h=i[a];if(e.indexFrom+e.indexCount>h.indexFrom&&e.indexFrom<h.indexFrom+h.indexCount&&h.geometryType===e.geometryType){n=a;break}}if(n!==void 0){const a=i[n];if(e.indexFrom===a.indexFrom)return a.indexCount-=e.indexCount,a.indexFrom+=e.indexCount,a.indexCount===0&&H(i,n,1),n-1;if(e.indexFrom+e.indexCount===a.indexFrom+a.indexCount)return a.indexCount-=e.indexCount,a.indexCount===0?(H(i,n,1),n-1):n;{const h=a.indexFrom,l=e.indexFrom-a.indexFrom,d=e.indexCount,c=a.indexFrom+a.indexCount-(e.indexFrom+e.indexCount);a.indexCount=l;const u=new ie;return u.geometryType=a.geometryType,u.materialKey=a.materialKey,u.indexFrom=h+l+d,u.indexCount=c,H(i,n+1,0,u),n}}return null}_getDisplayList(e,t){let s;const i=this.symbolLevels.length;for(let a=0;a<i;a++)if(this.symbolLevels[a].symbolLevel===e){s=this.symbolLevels[a];break}let r;s||(s=new me,s.symbolLevel=e,this.symbolLevels.push(s));const n=s.zLevels.length;for(let a=0;a<n;a++)if(s.zLevels[a].zLevel===t){r=s.zLevels[a];break}return r||(r=new Zt,r.geometryDPInfo=new W,r.zLevel=t,s.zLevels.push(r)),r.geometryDPInfo.unified||(r.geometryDPInfo.unified=[]),r.geometryDPInfo.unified}getDPInfoType(){return"unified"}},ie=class Ue{constructor(){this.materialKey=null,this.indexFrom=0,this.indexCount=0}clone(){const e=new Ue;return e.geometryType=this.geometryType,e.materialKey=this.materialKey,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e}};class W{constructor(){this.fill=null,this.line=null,this.marker=null,this.text=null,this.label=null,this.unified=null}clone(){const e=new W;return e.fill=this.fill&&this.fill.map(t=>t.clone()),e.line=this.line&&this.line.map(t=>t.clone()),e.marker=this.marker&&this.marker.map(t=>t.clone()),e.text=this.text&&this.text.map(t=>t.clone()),e.label=this.label&&this.label.map(t=>t.clone()),e.unified=this.unified&&this.unified.map(t=>t.clone()),e}}let Zt=class Pe{constructor(){this.geometryDPInfo=new W}clone(){const e=new Pe;return e.zLevel=this.zLevel,e.geometryDPInfo=this.geometryDPInfo.clone(),e}};class me{constructor(){this.zLevels=[]}clone(){const e=new me;e.symbolLevel=this.symbolLevel;for(const t of this.zLevels)e.zLevels.push(t.clone());return e}}let Be=class{constructor(){this.vertexData=new Map,this.vertexCount=0,this.indexData=[]}clear(){this.vertexData.clear(),this.vertexCount=0,this.indexData=[]}update(e,t,s){for(const i in e)this.vertexData.set(i,e[i]);for(const i in this.vertexData)e[i]===null&&this.vertexData.delete(i);this.vertexCount=t,this.indexData=s}},he=class ce{constructor(e,t,s,i=0,r=0){this.id=e,this.geometryType=t,this.materialKey=s,this.minZoom=i,this.maxZoom=r,this.meshData=null,this.symbolLevel=0,this.zOrder=0,this.vertexFrom=0,this.vertexCount=0,this.indexFrom=0,this.indexCount=0,this._sortKey=null}get sortKey(){return this._sortKey==null&&this._computeSortKey(),this._sortKey}clone(){return this.copy()}copy(){const e=new ce(this.id,this.geometryType,this.materialKey);return e.vertexFrom=this.vertexFrom,e.vertexCount=this.vertexCount,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e.zOrder=this.zOrder,e.symbolLevel=this.symbolLevel,e.meshData=this.meshData,e.minZoom=this.minZoom,e.maxZoom=this.maxZoom,e}setMeshDataFromBuffers(e,t,s){const i=new Be;for(const r in t){const n=t[r].stride,a=t[r].data;if(!a)continue;const h=[],l=N(n);for(let d=0;d<n*e.vertexCount/l;++d)h[d]=a[d+n*e.vertexFrom/l];i.vertexData.set(r,h)}i.indexData.length=0;for(let r=0;r<e.indexCount;++r)i.indexData[r]=s[r+e.indexFrom]-e.vertexFrom;i.vertexCount=e.vertexCount,this.meshData=i}readMeshDataFromBuffers(e,t){this.meshData?this.meshData.clear():this.meshData=new Be;for(const s in e){const i=e[s].stride,r=e[s].data,n=[],a=N(i);for(let h=0;h<i*this.vertexCount/a;++h)n[h]=r[h+i*this.vertexFrom/a];this.meshData.vertexData.set(s,n)}this.meshData.indexData.length=0;for(let s=0;s<this.indexCount;++s)this.meshData.indexData[s]=t[s+this.indexFrom]-this.vertexFrom;this.meshData.vertexCount=this.vertexCount}writeMeshDataToBuffers(e,t,s,i){if(this.meshData){for(const r in t){const n=t[r].stride,a=this.meshData.vertexData.get(r),h=t[r].data,l=N(n);for(let d=0;d<n*this.meshData.vertexCount/l;++d)h[d+n*e/l]=a[d]}for(let r=0;r<this.meshData.indexData.length;++r)i[r+s]=this.meshData.indexData[r]+e;this.vertexFrom=e,this.vertexCount=this.meshData.vertexCount,this.indexFrom=s,this.indexCount=this.meshData.indexData.length}}static writeAllMeshDataToBuffers(e,t,s){let i=0,r=0;for(const n of e)n.writeMeshDataToBuffers(i,t,r,s),i+=n.vertexCount,r+=n.indexCount}_computeSortKey(){this._sortKey=(31&this.symbolLevel)<<12|(127&this.zOrder)<<4|7&this.geometryType}serialize(e){return e.push(this.geometryType),e.push(this.materialKey),e.push(this.vertexFrom),e.push(this.vertexCount),e.push(this.indexFrom),e.push(this.indexCount),e.push(this.minZoom),e.push(this.maxZoom),e}static deserialize(e,t){const s=e.readInt32(),i=e.readInt32(),r=new ce(t.id,s,i);return r.vertexFrom=e.readInt32(),r.vertexCount=e.readInt32(),r.indexFrom=e.readInt32(),r.indexCount=e.readInt32(),r.minZoom=e.readInt32(),r.maxZoom=e.readInt32(),r}};function Ve(o,e){if(e!==null){o.push(e.length);for(const t of e)t.serialize(o);return o}o.push(0)}function Yt(o,e,t){const s=o.readInt32(),i=new Array(s);for(let r=0;r<i.length;r++)i[r]=e.deserialize(o,t);return i}let je=class Y{constructor(e){this.insertAfter=null,this.id=e,this.displayRecords=[]}copy(){const e=new Y(this.id);return e.set(this),e}clone(){const e=new Y(this.id);return e.displayRecords=this.displayRecords.map(t=>t.clone()),e.insertAfter=this.insertAfter,e}set(e){this.id=e.id,this.displayRecords=e.displayRecords,this.insertAfter=e.insertAfter}serialize(e){return e.push(this.id),Ve(e,this.displayRecords),e}static deserialize(e){const t=e.readInt32(),s=new Y(t),i={id:t};return s.displayRecords=Yt(e,he,i)??[],s}};class P{constructor(){this.displayObjects=[],this._displayList=null}get displayObjectRegistry(){if(!this._displayObjectRegistry){this._displayObjectRegistry=new Map;for(const e of this.displayObjects)this._displayObjectRegistry.set(e.id,e)}return this._displayObjectRegistry}get displayList(){return this._displayList}computeDisplayList(){this._displayList=new Nt;for(const e of this.displayObjects)for(const t of e.displayRecords)this._displayList.addToList(t)}clone(){const e=new P;return this.displayObjects&&(e.displayObjects=this.displayObjects.map(t=>t.clone())),e}serialize(e){return Ve(e,this.displayObjects),e}_deserializeObjects(e){const t=e.readInt32(),s=new Array(t),i=new Map;for(let r=0;r<s.length;++r){const n=je.deserialize(e);s[r]=n,i.set(n.id,n)}this.displayObjects=s,this._displayList=null,this._displayObjectRegistry=i}static deserialize(e){const t=new P;return t._deserializeObjects(e),t}}let re=class ue{constructor(e,t){this.data=e,this.stride=t}static decode(e){const t=X(e.data,e.stride),s=e.stride;return new ue(t,s)}static fromVertexVector(e){const t=X(e.data.buffer(),e.stride),s=e.stride;return new ue(t,s)}};class z{constructor(e,t,s){this.geometryType=e,this.indexBuffer=new Uint32Array(t),this.namedBuffers=s}static decode(e){const t=e.geometryType,s=e.indexBuffer,i={};for(const r in e.namedBuffers)i[r]=re.decode(e.namedBuffers[r]);return new z(t,s,i)}static fromVertexData(e,t){const s=e.indices,i=X(e.vertices,e.stride),r=e.stride,n={geometry:new re(i,r)};return new z(t,s,n)}static fromVertexVectors(e){const t=e.geometryType,s=e.indexVector.buffer(),i={};let r;for(r in e.namedVectors)i[r]=re.fromVertexVector(e.namedVectors[r]);return new z(t,s,i)}}class Xt{get vertexCount(){const e=this.stride/4,t=this.data.length/e;return t!==(0|t)&&console.debug("Corrupted stride"),t}constructor(e,t){this.data=e,this.stride=t}transfer(e,t){const s=this.data.buffer();e.vertexCount=this.vertexCount,e.data=s,e.stride=this.stride,t.push(s)}}let Qt=class{constructor(e,t,s){this.geometryType=e,this.indexVector=new Z(Uint32Array,6*t),this.namedVectors={};const i=wt(e,s);for(const r in i){const n=i[r];let a;switch(n%4){case 0:case 2:a=new Z(Uint32Array,n*t);break;case 1:case 3:a=new Z(Uint8Array,n*t)}this.namedVectors[r]=new Xt(a,n)}}get(e){return this.namedVectors[e].data}getVector(e){return this.namedVectors[e]}transfer(e,t){const s=this.indexVector.buffer(),i={};let r;for(r in t.push(s),this.namedVectors){const n=this.namedVectors[r];i[r]={},n.transfer(i[r],t)}e.geometryType=this.geometryType,e.indexBuffer=s,e.namedBuffers=i,this.destroy()}intoBuffers(){const e=z.fromVertexVectors(this);return this.destroy(),e}destroy(){this.indexVector=null,this.namedVectors=null}};const E=new Ge,R=new Ge,Wt=5;function Jt(o,e){const t={};for(const s in o){const i={data:pe(e,o[s]),stride:o[s]};t[s]=i}return t}function es(o){return[o.fill||{},o.line||{},o.icon||{},o.text||{},o.label||{}]}function ts(o){const e=[[],[],[],[],[]],t=o;for(const s of t)for(const i of s.displayRecords)e[i.geometryType].push(i);return e}class T{constructor(){this.tileDisplayData=null,this.tileBufferData=null}reshuffle(){var n,a,h;if(E.reset(),!this.tileDisplayData)return;const e=ts(this.tileDisplayData.displayObjects);for(const l of e)for(const d of l)d&&E.needMore(d.geometryType,d.meshData?d.meshData.vertexCount:d.vertexCount,d.meshData?d.meshData.indexData.length:d.indexCount);const t=e.length,s=new se;for(let l=0;l<t;++l){s.geometries[l].indexBuffer=new Uint32Array(Math.round(ye*E.indicesFor(l)));const d=[],c=(n=this.tileBufferData)==null?void 0:n.geometries[l].vertexBuffer;if(!c)continue;for(const p in c)d.push(c[p].stride);const u=T._computeVertexAlignment(d),f=Math.round(ye*E.verticesFor(l)),m=T._align(f,u);for(const p in c){const g=c[p].stride;s.geometries[l].vertexBuffer[p]={stride:g,data:pe(m,g)}}}R.reset(),(a=this.tileDisplayData.displayList)==null||a.clear();for(let l=0;l<t;++l){const d=e[l];for(const c of d){if(c.meshData)c.writeMeshDataToBuffers(R.verticesFor(l),s.geometries[l].vertexBuffer,R.indicesFor(l),s.geometries[l].indexBuffer),c.meshData=null;else{const u=(h=this.tileBufferData)==null?void 0:h.geometries[l];if(u){const f=u.vertexBuffer,m=u.indexBuffer,p=s.geometries[l].vertexBuffer,g=s.geometries[l].indexBuffer,_=R.verticesFor(l),x=R.indicesFor(l);le(_,x,p,g,c,f,m),c.vertexFrom=_,c.indexFrom=x}}R.needMore(l,c.vertexCount,c.indexCount)}}const{displayList:i,displayObjects:r}=this.tileDisplayData;if(i)for(const l of r)i.addToList(l.displayRecords);this.tileBufferData=s}getStrides(){var s;const e=[],t=(s=this.tileBufferData)==null?void 0:s.geometries;if(!t)return e;for(let i=0;i<t.length;++i){const r=t[i];e[i]={};for(const n in r.vertexBuffer)e[i][n]=r.vertexBuffer[n].stride}return e}clone(){var t,s;const e=new T;return e.tileBufferData=((t=this.tileBufferData)==null?void 0:t.clone())??null,e.tileDisplayData=((s=this.tileDisplayData)==null?void 0:s.clone())??null,e}_guessSize(){var n;const e=((n=this.tileDisplayData)==null?void 0:n.displayObjects)??[],t=Math.min(e.length,4),s=12,i=40;let r=0;for(let a=0;a<t;a++)r=Math.max(r,e[a].displayRecords.length);return 2*(e.length*s+e.length*r*i)}serialize(){const e=this.tileBufferData.serialize(),t=this.tileBufferData.getBuffers(),s=this.tileDisplayData.serialize(new Z(Int32Array,this._guessSize())).buffer();return t.push(s),{result:{displayData:s,bufferData:e},transferList:t}}static fromVertexData(e,t){const s={},i=new Map;for(const r of t)i.set(r.id,r);return Tt(r=>{const n=e.data[r];if(n!=null){const a=Rt.from(n.records).getCursor();for(;a.next();){const h=a.id,l=a.materialKey,d=a.indexFrom,c=a.indexCount,u=a.vertexFrom,f=a.vertexCount,m=i.get(h),p=new he(h,r,l);p.indexFrom=d,p.indexCount=c,p.vertexFrom=u,p.vertexCount=f,m.displayRecords.push(p)}s[r]=z.fromVertexData(n,r)}else s[r]=new Qt(r,0,$e.DEFAULT).intoBuffers()}),T.fromMeshData({displayObjects:t,vertexBuffersMap:s})}static fromMeshData(e){const t=new T,s=new P,i=new se;s.displayObjects=e.displayObjects;for(const r in e.vertexBuffersMap){const n=r,a=e.vertexBuffersMap[n];i.geometries[n].indexBuffer=a.indexBuffer,i.geometries[n].vertexBuffer=a.namedBuffers}return t.tileDisplayData=s,t.tileBufferData=i,t}static bind(e,t){const s=new T;return s.tileDisplayData=e,s.tileBufferData=t,s}static create(e,t){const s=new T;s.tileDisplayData=new P,s.tileDisplayData.displayObjects=e;const i=[0,0,0,0,0],r=[0,0,0,0,0],n=[[],[],[],[],[]];for(const l of e)for(const d of l.displayRecords)n[d.geometryType].push(d),i[d.geometryType]+=d.meshData.vertexCount,r[d.geometryType]+=d.meshData.indexData.length;const a=new se,h=es(t);for(let l=0;l<Wt;l++){const d=new Uint32Array(r[l]),c=Jt(h[l],i[l]);he.writeAllMeshDataToBuffers(n[l],c,d),a.geometries[l]={indexBuffer:d,vertexBuffer:c}}return s.tileBufferData=a,s}static _align(e,t){const s=e%t;return s===0?e:e+(t-s)}static _computeVertexAlignment(e){let t=!1,s=!1;for(const i of e)i%4==2?t=!0:i%4!=0&&(s=!0);return s?4:t?2:1}}const I=512,F=50;function ss(o,e){const t=U(e);if(!t)return null;const[s,i]=t.valid;return o[2]>i?[C([o[0],o[1],i,o[3]]),C([s,o[1],s+o[2]-i,o[3]])]:o[0]<s?[C([s,o[1],o[2],o[3]]),C([i-(s-o[0]),o[1],i,o[3]])]:null}function is(o){return o==="text"||o==="esriTS"}function rs(o){return o==="simple-marker"||o==="picture-marker"||o==="esriSMS"||o==="esriPMS"}function Se(o){switch(o.geometry.type){case"point":case"multipoint":return 0;case"polyline":return 1;case"polygon":case"extent":return 2}return 0}function ns(o){if(!o)return null;const{xmin:e,ymin:t,xmax:s,ymax:i,spatialReference:r}=o;return new ke({rings:[[[e,t],[e,i],[s,i],[s,t],[e,t]]],spatialReference:r})}class Q extends Ut{static from(e,t,s){const i=Pt.createInstance(),r=[],n=e.filter(a=>!!a.geometry);for(const a of n){const h=fe(a.geometry);Ke(r,[a],h,!1,!1,t)}return new Q(i,r,s)}constructor(e,t,s){super(e,t,null),this._transform=s}get geometryType(){const e=this._current;return e?e.geometryType:null}get insertAfter(){return this._current.insertAfter}readGraphic(){return this._current}getCursor(){return this.copy()}copy(){const e=new Q(this.instance,this._features,this._transform);return this.copyInto(e),e}}const A=new Le,ne=new Le,Re="esriGeometryPolyline";function Ie(o){o.coords.length=0,o.lengths.length=0}class B{constructor(){this.bounds=C(),this.graphic=null}static acquire(e=null,t,s,i,r){let n;return B._pool.length===0?n=new B:(n=B._pool.pop(),this._set.delete(n)),n.acquire(e,t,s,i,r),n}static release(e){e&&!this._set.has(e)&&(e.release(),this._pool.push(e),this._set.add(e))}static getCentroidQuantized(e,t){if(ae(e.geometry)){const s=e.symbol;if(s==null)return null;if((s==null?void 0:s.layers.length)>0&&s.layers.some(i=>i.type==="text"||i.type==="marker")){const i=He(e.geometry);return i!==null?kt(t,{},{x:i[0],y:i[1]},!1,!1):null}}return null}acquire(e=null,t,s,i,r){e&&this.set(e,t,s,i,r)}release(){this.graphic=null,this.symbolResource=null,this.geometry=null}get symbol(){return this.symbolResource.symbol}set(e,t,s,i,r){this.graphic=e,this.geometry=s,this.symbolResource=t,this.bounds=i,r&&(this.size=r)}getGeometryQuantized(e,t,s,i){const r=this.geometry,n=fe(r);if(n==null)return null;switch(n){case"esriGeometryPolygon":{const a=r,{rings:h}=a;if(!h||h.length===0)return null;let l;if(l=h.length===1&&h[0].length===2?$(e,{paths:[[h[0][0],h[0][1]]]}):$(e,this.geometry),!l){const d={x:h[0][0][0],y:h[0][0][1]};if(l=$(e,d),l){const{x:c,y:u}=l;return{rings:[[[c-1,u],[1,-1],[1,1],[-1,1],[-1,-1]]]}}}return l}case"esriGeometryPolyline":{const a=r;Ie(A),Ie(ne);const h=a.hasZ??!1,l=a.hasM??!1;return Ee(A,a),qe(ne,A,h,l,Re,e.scale[0]),Ne(A,ne,h,l,Re,e),Ze(A,a.hasZ??!1,a.hasM??!1)}case"esriGeometryMultipoint":{const a=r,h=.5*i*Math.max(Math.abs(this.size[0])+this.size[2]-this.size[0],Math.abs(this.size[1])+this.size[3]-this.size[1]),l=U(s);let d=a.points;if(l){const[c,u]=l.valid,f=u-c;d=d.filter(m=>{if(m[0]+h>u||m[0]-h<c){const p=[...m];return m[0]+h>u?p[0]-=f:p[0]+=f,J(t,m,h)||J(t,p,h)}return J(t,m,h)})}return d.length===0?{points:d}:$(e,{points:d})}}return $(e,this.geometry)}}B._pool=[],B._set=new Set;const G={minX:0,minY:0,maxX:0,maxY:0},M=C(),Me=1e-5;function q(o,e,t,s,i){return G.minX=e,G.minY=t,G.maxX=s,G.maxY=i,o.search(G)}function os(o){return{minX:o.bounds[0],minY:o.bounds[1],maxX:o.bounds[2],maxY:o.bounds[3]}}class as{constructor(e,t,s,i,r,n,a){this._graphics=i,this._onAdd=r,this._onRemove=n,this._hashToCIM=a,this._index=Ye(9,os),this._itemByGraphic=new Map,this._inflatedSizeHelper=new be,this._tileInfoView=e,this._uidFieldName=s;const h=e.getClosestInfoForScale(t);h&&(this._resolution=this._tileInfoView.getTileResolution(h.level))}setResourceManager(e){this._cimResourceManager=e,this._hittestDrawHelper=new mt(e)}hitTest(e,t,s,i,r){var m;e=Xe(e,this._tileInfoView.spatialReference);const n=.5*i*window.devicePixelRatio*s;M[0]=e-n,M[1]=t-n,M[2]=e+n,M[3]=t+n;const a=.5*i*(s+F),h=q(this._index,e-a,t-a,e+a,t+a);if(!h||h.length===0)return[];const l=[],d=C(),c=C();for(const p of h){const{geometry:g,symbolResource:_}=p;this._getSymbolBounds(d,_,g,c,r),c[3]=c[2]=c[1]=c[0]=0,Qe(d,M)&&((m=p.graphic)!=null&&m.visible)&&l.push(p)}if(l.length===0)return[];const u=this._hittestDrawHelper,f=[];for(const p of l){const{geometry:g,symbolResource:_}=p,{hash:x,textInfo:S}=_,V=this._hashToCIM.get(x);V&&u.hitTest(M,V.symbol,g,S,r,i)&&f.push(p)}return f.sort(ls),f.map(p=>p.graphic)}getGraphicsData(e,t,s){const i=this._searchForItems(t);if(i.length===0||s.length===0)return[];i.sort((c,u)=>c.zorder-u.zorder),i[0].insertAfter=-1;for(let c=1;c<i.length;c++)i[c].insertAfter=i[c-1].graphic.uid;i.sort((c,u)=>c.graphic.uid-u.graphic.uid),s.sort((c,u)=>c.uid-u.uid);let r,n=0,a=0;const h=t.resolution,l=[],d={originPosition:"upperLeft",scale:[h,h],translate:[t.bounds[0],t.bounds[3]]};for(const c of s){for(a=-2;n<i.length;)if(r=i[n],n++,c.uid===r.graphic.uid){a=r.insertAfter;break}if(!(r!=null&&r.geometry)||a===-2)continue;const u=r.getGeometryQuantized(d,t.bounds,this._tileInfoView.spatialReference,h),f={...r.graphic.attributes};f[this._uidFieldName]=c.uid,r.groupId==null&&(r.groupId=e.createTemplateGroup(r.symbol,null)),l.push({centroid:B.getCentroidQuantized(r,d),geometry:u,attributes:f,symbol:r.symbol,groupId:r.groupId,insertAfter:a,zorder:r.zorder})}return l.sort((c,u)=>c.zorder-u.zorder),l}queryTileData(e,t){if(this._graphics.length===0)return[];const{bounds:s,resolution:i}=t,r=this._searchForItems(t),n=[];return r.length===0||this._createTileGraphics(n,e,r,{originPosition:"upperLeft",scale:[i,i],translate:[s[0],s[3]]},t),n}has(e){return this._itemByGraphic.has(e)}getBounds(e){const t=this._itemByGraphic.get(e);return t?t.bounds:null}getAllBounds(){return Array.from(this._itemByGraphic.values()).filter(e=>e.graphic.visible).map(e=>e.bounds)}addOrModify(e,t,s){if(!e||t==null)return;this.has(e)&&this.remove(e),this._onAdd(e);const i=[0,0,0,0],r=this._getSymbolBounds(null,t,s,i,0),n=B.acquire(e,t,s,r??null,i);return this._itemByGraphic.set(e,n),s&&this._index.insert(n),n.bounds}remove(e){if(!this._itemByGraphic.has(e))return;this._onRemove(e);const t=this._itemByGraphic.get(e);t!=null&&t.bounds&&this._index.remove(t),this._itemByGraphic.delete(e)}updateZ(){const e=this._graphics.items;let t,s;for(let i=0;i<e.length;i++)s=e[i],t=this._itemByGraphic.get(s),t&&(t.zorder=i)}update(e,t,s){const i=this._itemByGraphic.get(e);i.groupId=null;const r=We(i.bounds);this._index.remove(i);const n=this._getSymbolBounds(i.bounds,t,s,i.size,0);return n!=null&&i.set(e,t,s,n,i.size),s&&this._index.insert(i),{oldBounds:r,newBounds:i.bounds}}updateLevel(e){if(this._resolution===e)return;this._resolution=e,this._index.clear();const t=this._itemByGraphic,s=[];for(const[i,r]of t){const n=this._getSymbolBounds(r.bounds,r.symbolResource,r.geometry,r.size,0);r.geometry&&n!=null&&(r.bounds=n,s.push(r))}this._index.load(s)}clear(){this._itemByGraphic.clear(),this._index.clear()}_createTileGraphics(e,t,s,i,r){const n=this._uidFieldName,a=this._tileInfoView.spatialReference,{bounds:h,resolution:l}=r;let d,c,u,f;s.sort((m,p)=>m.zorder-p.zorder);for(let m=0;m<s.length;m++){u=s[m],d=u.graphic,c=u.getGeometryQuantized(i,h,a,l),f=m===0?-1:s[m-1].graphic.uid;const p={...u.graphic.attributes};p[n]=d.uid,u.groupId==null&&(u.groupId=t.createTemplateGroup(u.symbol,null)),e.push({centroid:B.getCentroidQuantized(u,i),geometry:c,attributes:p,symbol:u.symbol,groupId:u.groupId,insertAfter:f,zorder:u.zorder})}}_searchForItems(e){const t=this._tileInfoView.spatialReference,s=e.bounds,i=U(t);if(i&&t.isWrappable){const[r,n]=i.valid,a=Math.abs(s[2]-n)<Me,h=Math.abs(s[0]-r)<Me;if((!a||!h)&&(a||h)){const l=e.resolution;let d;d=C(a?[r,s[1],r+l*F,s[3]]:[n-l*F,s[1],n,s[3]]);const c=q(this._index,s[0],s[1],s[2],s[3]),u=q(this._index,d[0],d[1],d[2],d[3]);return[...new Set([...c,...u])]}}return q(this._index,s[0],s[1],s[2],s[3])}_getSymbolBounds(e,t,s,i,r){if(!t||!t.symbol||!s)return null;if(e||(e=C()),Je(e,s),!i||i[0]===0&&i[1]===0&&i[2]===0&&i[3]===0){const{hash:h,textInfo:l}=t,d=this._hashToCIM.get(h);if(!d)return null;i||(i=[0,0,0,0]);const c=this._inflatedSizeHelper.getSymbolInflateSize(i,d.symbol,this._cimResourceManager,r,l);i[0]=j(c[0]),i[1]=j(c[1]),i[2]=j(c[2]),i[3]=j(c[3])}const n=this._resolution,a=be.safeSize(i);return e[0]-=a*n,e[1]-=a*n,e[2]+=a*n,e[3]+=a*n,e}}const ls=(o,e)=>{const t=Se(o.graphic),s=Se(e.graphic);return t===s?e.zorder-o.zorder:t-s},ds=o=>{let e=class extends et(o){constructor(){super(...arguments),this.graphics=null,this.renderer=null}};return b([D()],e.prototype,"graphics",void 0),b([D()],e.prototype,"renderer",void 0),b([D()],e.prototype,"updating",void 0),b([D()],e.prototype,"view",void 0),e=b([ze("esri.views.layers.GraphicsView")],e),e},hs=tt("esri-2d-graphic-debug");function oe(o,e,t){let s=t.get(o);return s||(s={tile:e,addedOrModified:[],removed:[]},t.set(o,s)),s}let w=class extends ds(st(pt)){constructor(o){super(o),this._storage=new Vt,this._displayIds=new Map,this._controller=new AbortController,this._tiles=new Map,this._graphicStoreUpdate=!1,this._graphicsSet=new Set,this._matcher=Promise.resolve(null),this._tileUpdateSet=new Set,this._tilesToUpdate=new Map,this._graphicIdToAbortController=new Map,this._attached=!1,this._updatingGraphicsTimer=null,this._hashToExpandedSymbol=new Map,this._hashToExpandedSymbolPromise=new Map,this._hashToCIMSymbolPromise=new Map,this._hashToCIM=new Map,this._processing=!1,this._needsProcessing=!1,this._pendingUpdate={added:new Set,updated:new Set,removed:new Set},this.lastUpdateId=-1,this.updateRequested=!1,this.defaultPointSymbolEnabled=!0,this.graphicUpdateHandler=this.graphicUpdateHandler.bind(this)}destroy(){this._updatingGraphicsTimer&&(clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=null,this.notifyChange("updating")),this._controller.abort(),this.container.destroy(),this._set("graphics",null),this._graphicStore.clear(),this._attributeStore=null,this._hashToExpandedSymbol.clear(),this.view=null,this.renderer=null,this._hashToCIM.clear(),this._hashToCIMSymbolPromise.clear(),this._hashToExpandedSymbolPromise.clear()}_createMatcher(o,e,t){if(o){const s=Ce(o),i=Gt({indexCount:0,fields:{}},"feature",o,s);this._matcher=Mt(i,e,null,t)}}_createDisplayId(o){let e=this._displayIds.get(o);return e||(e=this._storage.createDisplayId(),this._displayIds.set(o,e)),e}initialize(){this._attributeStore=new jt({type:"local",initialize:i=>Promise.resolve(this.container.attributeView.initialize(i)),update:i=>this.container.attributeView.requestUpdate(i),render:()=>this.container.requestRender()},it("2d")),this.container.hasHighlight=()=>this._attributeStore.hasHighlight;const o=i=>{this._createDisplayId(i.uid),this._setFilterState(i.uid,i.visible)},e=i=>{const r=this._displayIds.get(i.uid);this._displayIds.delete(i.uid),this._storage.releaseDisplayId(r)},t=new Lt(this.container.getMaterialItems.bind(this.container),this.view.featuresTilingScheme.tileInfo);this._graphicStore=new as(this.view.featuresTilingScheme,this.view.state.scale,this.uid,this.graphics,o,e,this._hashToCIM),this._meshFactory=new zt(null,this.uid,t),this._templateStore=t,this.handles.add([rt(()=>this.renderer,i=>{this._createMatcher(i,t,this.container.stage.resourceManager);for(const r of this.graphics)this._pendingUpdate.updated.add(r);this.requestUpdate()}),this.view.graphicsTileStore.on("update",this._onTileUpdate.bind(this)),this.container.on("attach",()=>{hs&&this.container.enableRenderingBounds(()=>this._graphicStore.getAllBounds()),this.graphics.items.length>0&&this._graphicsChangeHandler({target:this.graphics,added:this.graphics.items,removed:[],moved:[]}),this.handles.add(this.graphics.on("change",r=>this._graphicsChangeHandler(r)),"graphics");const i=this.container.stage.resourceManager;this._createMatcher(this.renderer,t,i),this._graphicStore.setResourceManager(i),this._attached=!0,this.notifyChange("updating")})]);const s=this.view.graphicsTileStore.tiles;this._onTileUpdate({added:s,removed:[]})}get updating(){var o;return!this._attached||this._updatingGraphicsTimer!==null||this._pendingUpdate.added.size>0||this._pendingUpdate.removed.size>0||this._pendingUpdate.updated.size>0||this._tileUpdateSet.size>0||this._tilesToUpdate.size>0||((o=this._attributeStore)==null?void 0:o.updatingHandles.updating)}hitTest(o){if(!this.view||!this.view.position)return[];const{resolution:e,rotation:t}=this.view.state;return this._graphicStore.hitTest(o.x,o.y,2,e,t)}update(o){v(this._controller.signal);const e=o.state,{resolution:t}=e;if(this._graphicStore.updateLevel(t),this._graphicStoreUpdate=!0,this.updateRequested=!1,this._pendingUpdate.updated.size>0){if(!this._processing)return void this._updateGraphics();this._needsProcessing=!0}}viewChange(){this.requestUpdate()}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.requestUpdateCallback())}processUpdate(o){this.updateRequested&&(this.updateRequested=!1,this.update(o))}graphicUpdateHandler(o){const{graphic:e,property:t}=o;switch(t){case"attributes":case"geometry":case"symbol":this._pendingUpdate.updated.add(e),this.requestUpdate();break;case"visible":this._setFilterState(e.uid,e.visible),this._attributeStore.sendUpdates()}}setHighlight(o){const e=o.map(t=>this._displayIds.get(t)).filter(nt);this._attributeStore.setHighlight(o,e)}_getIntersectingTiles(o){const e=this._graphicStore.getBounds(o);if(!e||ot(e)===0||at(e)===0)return[];const t=ss(e,this.view.spatialReference);return t!=null?[...new Set([...this.view.graphicsTileStore.boundsIntersections(t[0]),...this.view.graphicsTileStore.boundsIntersections(t[1])])]:this.view.graphicsTileStore.boundsIntersections(e)}async _updateTile(o){v(this._controller.signal);const e=o.tile,t=this._getGraphicsData(this._templateStore,e,o.addedOrModified),s=await this._processGraphics(e,t);return v(this._controller.signal),this._patchTile(e.key,{type:"update",addOrUpdate:s,remove:o.removed,end:!0,clear:!1,sort:!1}),s}_patchTile(o,e){const t=this._tiles.get(o);t&&(this.container.onTileData(t,e),this.container.requestRender())}_graphicsChangeHandler(o){const e=this._pendingUpdate;for(const t of o.added)e.added.add(t);for(const t of o.moved)e.updated.add(t);for(const t of o.removed)this._pendingUpdate.added.has(t)?e.added.delete(t):e.removed.add(t);this._processing?this._needsProcessing=!0:this._updateGraphics()}_getGraphicsToUpdate(){const o={added:[],removed:[],updated:[]};if(!this.graphics)return o;const e=this._pendingUpdate;for(const t of this.graphics.items)e.added.has(t)?o.added.push(t):e.updated.has(t)&&o.updated.push(t);for(const t of e.removed)this._graphicStore.has(t)&&o.removed.push(t);return e.added.clear(),e.removed.clear(),e.updated.clear(),o}async _updateGraphics(){this._processing=!0;const{added:o,removed:e,updated:t}=this._getGraphicsToUpdate(),s=this._tilesToUpdate;let i;try{if(!this._graphicStoreUpdate){const d=this.view.state,{resolution:c}=d;this._graphicStore.updateLevel(c)}const r=[],n=new Array(o.length+e.length);for(let d=0;d<t.length;d++){const c=t[d],u=this._getIntersectingTiles(c);for(const f of u)i=f.id,oe(i,f,s).removed.push(this._displayIds.get(c.uid));r.push(this._updateGraphic(c,null)),n[d]=c}const a=t.length;for(let d=0;d<o.length;d++){const c=o[d];n[a+d]=c,this._graphicsSet.add(c),r.push(this._addGraphic(c))}for(const d of e){this._abortProcessingGraphic(d.uid);const c=this._getIntersectingTiles(d);for(const u of c)i=u.id,oe(i,u,s).removed.push(this._displayIds.get(d.uid));this._graphicsSet.delete(d),this._graphicStore.remove(d)}let h;this._flipUpdatingGraphics(),await Promise.all(r);for(let d=0;d<n.length;d++){h=n[d];const c=this._getIntersectingTiles(h);for(const u of c)i=u.id,oe(i,u,s).addedOrModified.push(h)}this._graphicStore.updateZ();const l=[];for(const[d,c]of s)l.push(this._updateTile(c));await Promise.all(l)}catch(r){k(r)}for(const r of e)try{const n=await this._getSymbolForGraphic(r,null);if(n){const a=n.hash();this._hashToExpandedSymbol.delete(a)}}catch(n){k(n)}s.clear(),this.notifyChange("updating"),this._processing=!1,this._needsProcessing&&(this._needsProcessing=!1,this._updateGraphics())}_getArcadeInfo(o){const e=(o.attributes?Object.keys(o.attributes):[]).map(t=>({name:t,alias:t,type:typeof o.attributes[t]=="string"?"esriFieldTypeString":"esriFieldTypeDouble"}));return o.geometry==null?null:{geometryType:fe(o.geometry),spatialReference:lt.fromJSON(o.geometry.spatialReference),fields:e}}_getSymbolForGraphic(o,e){return v(this._controller.signal),o.symbol!=null?Promise.resolve(o.symbol):this.renderer!=null?this.renderer.getSymbolAsync(o,{scale:this.view.scale,signal:e!=null?e.signal:null}):Promise.resolve(this._getNullSymbol(o))}_getCIMSymbol(o,e,t){let s=this._hashToCIM.get(e);if(s)return Promise.resolve(s);const i=yt(o);if(i!=null){if(i.type==="CIMSymbolReference")return s=i,this._hashToCIM.set(e,s),Promise.resolve(s);let r=this._hashToCIMSymbolPromise.get(e);return r||(r=i.fetchCIMSymbol(t).then(n=>(this._hashToCIM.set(e,n.data),this._hashToCIMSymbolPromise.delete(e),n)).catch(n=>(this._hashToCIMSymbolPromise.delete(e),ge(n),null)),this._hashToCIMSymbolPromise.set(e,r),r)}return Promise.resolve(null)}_expandCIMSymbol(o,e,t,s){const i=this._hashToExpandedSymbol.get(t);if(i)return Promise.resolve(i);let r=this._hashToExpandedSymbolPromise.get(t);if(r)return r;const n=this.container.stage,a=this._getArcadeInfo(e),h=Ce(null),l=Ot(o,h);return r=$t(l,a,n.resourceManager,s),this._hashToExpandedSymbolPromise.set(t,r),r.then(d=>(this._hashToExpandedSymbol.set(t,d),this._hashToExpandedSymbolPromise.delete(t),d)),r}async _getSymbolResources(o,e){return v(this._controller.signal),this.container.stage?this._getSymbolForGraphic(o,e).then(t=>{if(!t)return null;const s=t.hash();return this._getCIMSymbol(t,s,e).then(i=>i==null?null:this._expandCIMSymbol(i,o,s,e).then(r=>{const n=r.layers.filter(a=>a.type==="text"&&typeof a.text=="string");if(n&&n.length>0){const a=new Array(n.length);for(let l=0;l<n.length;l++){const d=n[l],c=[],[u]=gt(d.text);d.text=u;for(let f=0;f<u.length;f++)c.push(u.charCodeAt(f));a[l]={symbol:d,id:l,glyphIds:c}}const h=new Map;return this.container.getMaterialItems(a).then(l=>{dt(l);for(let d=0;d<n.length;d++){const c=n[d];h.set(c.cim,{text:c.text,mosaicItem:l[d].mosaicItem})}return{symbol:r,textInfo:h,hash:s}})}return{symbol:r,hash:s}}))}).catch(t=>(ge(t),null)):null}async _projectAndNormalizeGeometry(o,e){if(v(this._controller.signal),o.geometry==null||o.geometry.type==="mesh")return null;let t=o.geometry;if(ae(t)){const r=t.rings;t.rings=r}else if(xe(t)){const r=t.paths;t.paths=r}else if(_e(t)){const r=await this._getSymbolForGraphic(o,e);v(this._controller.signal),r&&(rs(r.type)||is(r.type))?t=t.center:t=ns(t)}await _t(t.spatialReference,this.view.spatialReference);const s=xt(t),i=vt(s,t.spatialReference,this.view.spatialReference);return i&&ht(i),i}_onTileUpdate(o){const e=U(this.view.spatialReference);if(o.added&&o.added.length>0)for(const t of o.added)this._addNewTile(t,e);if(o.removed&&o.removed.length>0)for(const t of o.removed)this._removeTile(t.key)}async _addGraphic(o){this._abortProcessingGraphic(o.uid),v(this._controller.signal);const e=new AbortController;this._graphicIdToAbortController.set(o.uid,e);const t={signal:e.signal};try{await this._addOrUpdateGraphic(o,t),v(this._controller.signal),this._graphicIdToAbortController.delete(o.uid)}catch(s){if(this._graphicIdToAbortController.delete(o.uid),!k(s))throw s}}_updateGraphic(o,e){v(this._controller.signal);const t=this._projectAndNormalizeGeometry(o,e),s=this._getSymbolResources(o,e);return Promise.all([t,s]).then(([i,r])=>{v(this._controller.signal),this._graphicStore.addOrModify(o,r,i)})}_addOrUpdateGraphic(o,e){v(this._controller.signal);const t=this._projectAndNormalizeGeometry(o,e),s=this._getSymbolResources(o,e);return Promise.all([t,s]).then(([i,r])=>{v(this._controller.signal),this._graphicsSet.has(o)&&this._graphicStore.addOrModify(o,r,i)})}_addTile(o){const e=this.view.featuresTilingScheme.getTileBounds(C(),o),t=this.view.featuresTilingScheme.getTileResolution(o.level),s=new qt(o,t,e[0],e[3]);return this._tiles.set(o,s),this.container.addChild(s),s}async _addNewTile(o,e){const t=this._addTile(o.key),s=this._graphicStore.queryTileData(this._templateStore,o);if(s.length===0)return;if(e){const r=Math.round((e.valid[1]-e.valid[0])/o.resolution);for(const n of s)n.geometry&&(ve(n.geometry)||ee(n.geometry))&&this._wrapPoints(n,r)}const i=o.key;this._tileUpdateSet.add(o.key),this.notifyChange("updating");try{const r={type:"update",clear:!1,addOrUpdate:await this._processGraphics(o,s),remove:[],end:!0,sort:!1};t.patch(r),this._tileUpdateSet.delete(i),this.notifyChange("updating")}catch(r){if(this._tileUpdateSet.delete(i),this.notifyChange("updating"),!k(r))throw r}}_removeTile(o){if(!this._tiles.has(o))return;const e=this._tiles.get(o);this.container.removeChild(e),e.destroy(),this._tiles.delete(o)}_setFilterState(o,e){const t=this._displayIds.get(o),s=this._attributeStore.getHighlightFlag(o);this._attributeStore.setData(t,0,0,s|(e?bt:0))}_getGraphicsData(o,e,t){const s=this.view,i=U(s.spatialReference),r=this._graphicStore.getGraphicsData(o,e,t);if(i){const n=Math.round((i.valid[1]-i.valid[0])/e.resolution);for(const a of r)a.geometry&&(ve(a.geometry)||ee(a.geometry))&&this._wrapPoints(a,n)}return r}_wrapPoints(o,e){const t=o.geometry;ee(t)?this._wrapMultipoint(t,e):this._wrapPoint(o,e)}_wrapMultipoint(o,e){const t=o.points,s=[];let i=0,r=0;for(const[n,a]of t){if(s.push([n+i,a]),i=0,e===I){const h=5*F;n+r<h?(s.push([e,0]),i=-e):n+r>I-h&&(s.push([-e,0]),i=e)}else n+r<-F?(s.push([e,0]),i=-e):n+r>I+F&&(s.push([-e,0]),i=e);r+=n}o.points=s}_wrapPoint(o,e){const t=o.geometry;if(e===I){const s=5*F;t.x<s?o.geometry={points:[[t.x,t.y],[e,0]]}:t.x>I-s&&(o.geometry={points:[[t.x,t.y],[-e,0]]})}else t.x<-F?o.geometry={points:[[t.x,t.y],[e,0]]}:t.x>I+F&&(o.geometry={points:[[t.x,t.y],[-e,0]]})}_processGraphics(o,e,t){if(!(e&&e.length)||!this._meshFactory)return Promise.resolve(null);const s=Q.from(e,this.uid,o.transform),i=this._meshFactory;return this._matcher.then(r=>i.analyzeGraphics(s,this.container.stage.resourceManager,r,null,null,t).then(()=>(this._attributeStore.sendUpdates(),this._processAnalyzedGraphics(o,s))))}_processAnalyzedGraphics(o,e){const t=this._meshFactory,s=e.getSize(),i=e.getCursor(),r={features:s,records:s,metrics:0},n=new At(o.key.id,r,$e.DEFAULT,!1,!1),a=[];for(;i.next();){const c=i.readGraphic();c.insertAfter=c.insertAfter===-1?-1:this._displayIds.get(c.insertAfter),c.displayId=this._displayIds.get(c.attributes[this.uid]);const u=new je(c.displayId);u.insertAfter=c.insertAfter,a.push(u),t.writeGraphic(n,i,o.level,this.container.stage.resourceManager)}const h=o.tileInfoView.tileInfo.isWrappable,l=n.serialize(h);if(l.length!==1)return new T;const d=l[0].message;return T.fromVertexData(d,a)}_abortProcessingGraphic(o){var e;(e=this._graphicIdToAbortController.get(o))==null||e.abort()}_getNullSymbol(o){const e=o.geometry;return xe(e)?ct:ae(e)||_e(e)?ut:this.defaultPointSymbolEnabled?ft:null}_flipUpdatingGraphics(){this._updatingGraphicsTimer&&clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=setTimeout(()=>{this._updatingGraphicsTimer=null,this.notifyChange("updating")},160),this.notifyChange("updating")}};b([D({constructOnly:!0})],w.prototype,"requestUpdateCallback",void 0),b([D()],w.prototype,"container",void 0),b([D({constructOnly:!0})],w.prototype,"graphics",void 0),b([D()],w.prototype,"updating",null),b([D()],w.prototype,"view",void 0),b([D()],w.prototype,"updateRequested",void 0),b([D()],w.prototype,"defaultPointSymbolEnabled",void 0),w=b([ze("esri.views.2d.layers.support.GraphicsView2D")],w);const Ms=w;export{Ms as o};
