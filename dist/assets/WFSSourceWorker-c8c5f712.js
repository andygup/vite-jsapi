import{c as p,bd as l,ga as n,s as u,G as g,d as _,J as d}from"./index-65afe59f.js";import{r as f,s as w}from"./featureConversionUtils-a232f677.js";import{m as E}from"./FeatureStore-217706a4.js";import{g as q,f as F}from"./projectionSupport-65ca4a6b.js";import{X as S}from"./QueryEngine-10802b76.js";import{T as x,I as T}from"./geojson-67f1ae0e.js";import{d as b}from"./sourceUtils-ec60d75a.js";import{H as I}from"./wfsUtils-71847b61.js";import{r as j}from"./FieldsIndex-6df00c0a.js";import"./OptimizedGeometry-33b2eb0d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./BoundsStore-e0f2ff3b.js";import"./PooledRBush-6dc629d6.js";import"./centroid-8e8cfa47.js";import"./utils-07c51489.js";import"./normalizeUtils-678d9dd1.js";import"./normalizeUtilsCommon-2b774e39.js";import"./json-48e3ea08.js";import"./MemCache-b8f96232.js";import"./QueryEngineResult-3564e639.js";import"./quantizationUtils-ce722d8e.js";import"./ItemCache-bb571b5e.js";import"./WhereClause-61ed1eef.js";import"./executionError-fb3f283a.js";import"./utils-febed4a5.js";import"./generateRendererUtils-01d9d333.js";import"./QueryEngineCapabilities-42e44ded.js";import"./timeSupport-c17294cf.js";import"./xmlUtils-444cb4c0.js";import"./Field-f17f32a3.js";import"./fieldType-d8edb871.js";class nt{constructor(){this._queryEngine=null,this._customParameters=null,this._snapshotFeatures=async t=>{const{objectIdField:e}=this._queryEngine,s=await I(this._getFeatureUrl??"",this._featureType.typeName,this._getFeatureOutputFormat,{customParameters:this._customParameters,dateFields:this._queryEngine.fieldsIndex.dateFields.map(r=>r.name),signal:t});await x(s),p(t);const i=T(s,{geometryType:this._queryEngine.geometryType,hasZ:!1,objectIdField:e});if(!l(this._queryEngine.spatialReference,n))for(const r of i)r.geometry!=null&&(r.geometry=f(q(w(r.geometry,this._queryEngine.geometryType,!1,!1),n,this._queryEngine.spatialReference)));let o=1;for(const r of i){const a={};b(this._fieldsIndex,a,r.attributes,!0),r.attributes=a,r.attributes[e]==null&&(r.objectId=r.attributes[e]=o++)}return i}}destroy(){var t;(t=this._queryEngine)==null||t.destroy(),this._queryEngine=null}async load(t,e){const{getFeatureUrl:s,getFeatureOutputFormat:i,spatialReference:o,fields:r,geometryType:a,featureType:h,objectIdField:m,customParameters:y}=t;this._featureType=h,this._customParameters=y,this._getFeatureUrl=s,this._getFeatureOutputFormat=i,this._fieldsIndex=new j(r),await this._checkProjection(o),p(e),this._queryEngine=new S({fields:r,geometryType:a,hasM:!1,hasZ:!1,objectIdField:m,spatialReference:o,timeInfo:null,featureStore:new E({geometryType:a,hasM:!1,hasZ:!1})});const c=await this._snapshotFeatures(e.signal);return this._queryEngine.featureStore.addMany(c),{extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async applyEdits(){throw new u("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(t,e.signal)}async queryFeatureCount(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(t,e.signal)}async queryObjectIds(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(t,e.signal)}async queryExtent(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(t,e.signal)}async querySnapping(t,e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(t,e.signal)}async refresh(t){var e;return this._customParameters=t,(e=this._snapshotTask)==null||e.abort(),this._snapshotTask=g(this._snapshotFeatures),this._snapshotTask.promise.then(s=>{this._queryEngine.featureStore.clear(),s&&this._queryEngine.featureStore.addMany(s)},s=>{this._queryEngine.featureStore.clear(),_(s)||d.getLogger("esri.layers.WFSLayer").error(new u("wfs-layer:getfeature-error","An error occurred during the GetFeature request",{error:s}))}),await this._waitSnapshotComplete(),{extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _checkProjection(t){try{await F(n,t)}catch{throw new u("unsupported-projection","Projection not supported",{spatialReference:t})}}}export{nt as default};
