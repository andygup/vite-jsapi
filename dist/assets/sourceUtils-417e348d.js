import{g_ as h,g$ as p,aA as E,ge as g,h0 as F,dj as f,_ as y}from"./index-37fc1c1b.js";class w{constructor(){this.code=null,this.description=null}}class _{constructor(t){this.error=new w,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=t}}function d(i){return new _(i)}class b{constructor(t){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=t}}function v(i){return new b(i)}const o=new Set;function G(i,t,r,m=!1,u){o.clear();for(const n in r){const e=i.get(n);if(!e)continue;const a=r[n],s=V(e,a);if(s!==a&&u&&u.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:e,originalValue:a,sanitizedValue:s}}),o.add(e.name),e&&(m||e.editable)){const c=h(e,s);if(!c)t[e.name]=s;else return d(p(c,e,s))}}for(const n of(i==null?void 0:i.requiredFields)??[])if(!o.has(n.name))return d(`missing required field "${n.name}"`);return null}function V(i,t){let r=t;return typeof t=="string"&&E(i)?r=parseFloat(t):t!=null&&g(i)&&typeof t!="string"&&(r=String(t)),F(r)}let l;function I(i,t){if(!i||!f(t))return i;if("rings"in i||"paths"in i){if(l==null)throw new TypeError("geometry engine not loaded");return l.simplify(t,i)}return i}async function S(){return l==null&&(l=await y(()=>import("./geometryEngineJSON-cc7c26cb.js"),["assets/geometryEngineJSON-cc7c26cb.js","assets/geometryEngineBase-2fe41455.js","assets/geometryEngineJSON-17d1a0f4.js","assets/json-9ae8d6f8.js"])),l}async function z(i,t){f(i)&&(t==="esriGeometryPolygon"||t==="esriGeometryPolyline")&&await S()}export{d as a,v as c,z as l,G as m,I as s};
