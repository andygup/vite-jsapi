import{ow as m,jh as f,K as w,Y as g,L as n,ox as T,oy as S,_ as d,df as c,e as a,y as s,bD as h,hz as b,a as _,a$ as $}from"./index-bdad94d1.js";import{O as I}from"./MultiOriginJSONSupport-60332d9e.js";import{p as O}from"./ArcGISCachedService-2608c77c.js";import{l as E}from"./ArcGISService-1851ba5b.js";import{c as D}from"./OperationalLayer-6d869fbc.js";import{j as L}from"./PortalLayer-47bcd3d8.js";import{f as j}from"./commonProperties-ea87c313.js";import"./TileInfoTilemapCache-4eeea315.js";import"./TilemapCache-f8fab1d8.js";import"./portalItemUtils-cf820457.js";import"./ElevationInfo-3fa56032.js";let o=class extends O(E(D(L(I($))))){constructor(...e){super(...e),this.capabilities={operations:{supportsTileMap:!1}},this.copyright=null,this.heightModelInfo=null,this.path=null,this.minScale=void 0,this.maxScale=void 0,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=m()}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}destroy(){this._lercDecoder=f(this._lercDecoder)}readCapabilities(e,r){const t=r.capabilities&&r.capabilities.split(",").map(i=>i.toLowerCase().trim());return t?{operations:{supportsTileMap:t.includes("tilemap")}}:{operations:{supportsTileMap:!1}}}readVersion(e,r){let t=r.currentVersion;return t||(t=9.3),t}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:t=>{for(let i=0;i<t.typeKeywords.length;i++)if(t.typeKeywords[i].toLowerCase()==="elevation 3d layer")return!0;throw new w("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},e).catch(g).then(()=>this._fetchImageService(r))),Promise.resolve(this)}fetchTile(e,r,t,i){const l=(i=i||{signal:null}).signal!=null?i.signal:i.signal=new AbortController().signal,u={responseType:"array-buffer",signal:l},v={noDataValue:i.noDataValue,returnFileInfo:!0};return this.load().then(()=>this._fetchTileAvailability(e,r,t,i)).then(()=>n(this.getTileUrl(e,r,t),u)).then(p=>this._lercDecoder.decode(p.data,v,l)).then(p=>new T(p))}getTileUrl(e,r,t){const i=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,l=S({...this.parsedUrl.query,blankTile:!i&&null});return`${this.parsedUrl.path}/tile/${e}/${r}/${t}${l?"?"+l:""}`}async queryElevation(e,r){const{ElevationQuery:t}=await d(()=>import("./ElevationQuery-3f255fb1.js"),["assets/ElevationQuery-3f255fb1.js","assets/index-bdad94d1.js","assets/index-0492b785.css"]);return c(r),new t().query(this,e,r)}async createElevationSampler(e,r){const{ElevationQuery:t}=await d(()=>import("./ElevationQuery-3f255fb1.js"),["assets/ElevationQuery-3f255fb1.js","assets/index-bdad94d1.js","assets/index-0492b785.css"]);return c(r),new t().createSampler(this,e,r)}_fetchTileAvailability(e,r,t,i){return this.tilemapCache?this.tilemapCache.fetchAvailability(e,r,t,i):Promise.resolve("unknown")}async _fetchImageService(e){var i;if(this.sourceJSON)return this.sourceJSON;const r={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:e},t=await n(this.parsedUrl.path,r);t.ssl&&(this.url=(i=this.url)==null?void 0:i.replace(/^http:/i,"https:")),this.sourceJSON=t.data,this.read(t.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile[y]}};a([s({readOnly:!0})],o.prototype,"capabilities",void 0),a([h("service","capabilities",["capabilities"])],o.prototype,"readCapabilities",null),a([s({json:{read:{source:"copyrightText"}}})],o.prototype,"copyright",void 0),a([s({readOnly:!0,type:b})],o.prototype,"heightModelInfo",void 0),a([s({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],o.prototype,"path",void 0),a([s({type:["show","hide"]})],o.prototype,"listMode",void 0),a([s({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],o.prototype,"minScale",void 0),a([s({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],o.prototype,"maxScale",void 0),a([s({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],o.prototype,"opacity",void 0),a([s({type:["ArcGISTiledElevationServiceLayer"]})],o.prototype,"operationalLayerType",void 0),a([s()],o.prototype,"sourceJSON",void 0),a([s({json:{read:!1},value:"elevation",readOnly:!0})],o.prototype,"type",void 0),a([s(j)],o.prototype,"url",void 0),a([s()],o.prototype,"version",void 0),a([h("version",["currentVersion"])],o.prototype,"readVersion",null),o=a([_("esri.layers.ElevationLayer")],o);const y=Symbol("default-fetch-tile");o.prototype.fetchTile[y]=!0;const F=o;export{F as default};
