import{b5 as _,ae as i,af as l,hW as k,ai as J,a$ as x,aY as q,dm as V,bK as I,dn as Y,bt as O,J as w,cE as L,ga as R,hX as M,fE as N,hY as F,N as $,ah as K,E as X,er as Z,b9 as H,fr as Q,fq as U,bs as ee,V as te,ei as T,bF as g,bG as re,bf as ie,hZ as G}from"./index-a9c4c008.js";import{M as oe}from"./MultiOriginJSONSupport-196fcb0e.js";import{n as ae}from"./normalizeUtils-e3f4b3bd.js";import le from"./FeatureLayer-b3255eac.js";import{B as P}from"./BlendLayer-09dd0b47.js";import{S as D}from"./ScaleRangeLayer-10088de5.js";import{E as ne}from"./ElevationInfo-c5dc6698.js";import{f as se}from"./objectIdUtils-75d6d581.js";import{O as pe}from"./OperationalLayer-58eaf5ba.js";import{P as ye}from"./PortalLayer-235cd1fe.js";import{F as j}from"./Field-b1d8a9b1.js";import"./normalizeUtilsCommon-82ae8352.js";import"./UniqueValueRenderer-612cb004.js";import"./LegendOptions-2499ed1a.js";import"./diffUtils-abe9f3bb.js";import"./SizeVariable-21c037cb.js";import"./colorRamps-a8ae4226.js";import"./sizeVariableUtils-2914222a.js";import"./lengthUtils-73ca5ae7.js";import"./ColorStop-3619cfe4.js";import"./jsonUtils-b329e9d4.js";import"./styleUtils-514bbf43.js";import"./featureFlags-a86437c8.js";import"./jsonUtils-bd0bdc00.js";import"./DictionaryLoader-d0105348.js";import"./LRUCache-9a513454.js";import"./MemCache-75bedf1f.js";import"./FieldsIndex-58671a99.js";import"./heatmapUtils-dfe044d0.js";import"./vec4-3dd523e8.js";import"./vec4f64-efdcb593.js";import"./sql-4d7dca2e.js";import"./FeatureLayerBase-48864b87.js";import"./commonProperties-683e532f.js";import"./AttachmentQuery-671eea20.js";import"./Query-d0047f01.js";import"./RelationshipQuery-ec67eec9.js";import"./fieldType-ca53e87a.js";import"./serviceCapabilitiesUtils-ac150fd2.js";import"./editsZScale-e481307c.js";import"./queryZScale-471b0dc8.js";import"./FeatureSet-bb4ca057.js";import"./APIKeyMixin-cc81d0ae.js";import"./ArcGISService-005a73dc.js";import"./CustomParametersMixin-e393829c.js";import"./EditBusLayer-c4aa75bb.js";import"./FeatureReductionLayer-93fe1e80.js";import"./FeatureEffect-f33db1b4.js";import"./jsonUtils-7f75d4eb.js";import"./parser-e1ff8548.js";import"./_commonjsHelpers-725317a4.js";import"./clusterUtils-223e1cf4.js";import"./labelingInfo-0a4a299a.js";import"./labelUtils-d32d5ce0.js";import"./defaultsJSON-b396ba80.js";import"./OrderedLayer-e3e3401b.js";import"./RefreshableLayer-1c8a9fe5.js";import"./TemporalLayer-442d9ff7.js";import"./FeatureTemplate-8216f4af.js";import"./FeatureType-f065aa3e.js";import"./fieldProperties-8f8e4177.js";import"./versionUtils-7295a12b.js";import"./styleUtils-afa5cc7a.js";import"./TopFeaturesQuery-cd80eee2.js";import"./popupUtils-d7e116e7.js";import"./portalItemUtils-6670776d.js";let d=class extends P(D(x)){constructor(e){super(e),this.elevationInfo=null,this.graphics=new _,this.screenSizePerspectiveEnabled=!0,this.type="graphics",this.internal=!1}destroy(){this.removeAll(),this.graphics.destroy()}add(e){return this.graphics.add(e),this}addMany(e){return this.graphics.addMany(e),this}removeAll(){return this.graphics.removeAll(),this}remove(e){this.graphics.remove(e)}removeMany(e){this.graphics.removeMany(e)}on(e,t){return super.on(e,t)}graphicChanged(e){this.emit("graphic-update",e)}};i([l({type:ne})],d.prototype,"elevationInfo",void 0);i([l(k(_,"graphics"))],d.prototype,"graphics",void 0);i([l({type:["show","hide"]})],d.prototype,"listMode",void 0);i([l()],d.prototype,"screenSizePerspectiveEnabled",void 0);i([l({readOnly:!0})],d.prototype,"type",void 0);i([l({constructOnly:!0})],d.prototype,"internal",void 0);d=i([J("esri.layers.GraphicsLayer")],d);const ue=d;function S(f){return f.featureCollectionType==="markup"||f.layers.some(e=>e.layerDefinition.visibilityField!=null||!B(e))}function B({layerDefinition:f,featureSet:e}){const t=f.geometryType??e.geometryType;return C.find(r=>{var o,a,s;return t===r.geometryTypeJSON&&((s=(a=(o=f.drawingInfo)==null?void 0:o.renderer)==null?void 0:a.symbol)==null?void 0:s.type)===r.identifyingSymbol.type})}function z(){return new ie({xmin:-180,ymin:-90,xmax:180,ymax:90})}const E=new j({name:"OBJECTID",alias:"OBJECTID",type:"oid",nullable:!1,editable:!1}),me=new j({name:"title",alias:"Title",type:"string",nullable:!0,editable:!0});let u=class extends ue{constructor(e){super(e),this.visibilityMode="inherited"}initialize(){for(const e of this.graphics)e.sourceLayer=this.layer;this.graphics.on("after-add",e=>{e.item.sourceLayer=this.layer}),this.graphics.on("after-remove",e=>{e.item.sourceLayer=null})}get fullExtent(){var r;const e=(r=this.layer)==null?void 0:r.spatialReference,t=this.fullBounds;return e?t==null?N(z(),e).geometry:$(t,e):null}get fullBounds(){var r;const e=(r=this.layer)==null?void 0:r.spatialReference;if(!e)return null;const t=R();return this.graphics.forEach(o=>{const a=o.geometry!=null?N(o.geometry,e).geometry:null;a!=null&&M(t,a.type==="point"?a:a.extent,t)}),F(t,G)?null:t}get sublayers(){return this.graphics}};i([l({readOnly:!0})],u.prototype,"fullExtent",null);i([l({readOnly:!0})],u.prototype,"fullBounds",null);i([l({readOnly:!0})],u.prototype,"sublayers",null);i([l()],u.prototype,"layer",void 0);i([l()],u.prototype,"layerId",void 0);i([l({readOnly:!0})],u.prototype,"visibilityMode",void 0);u=i([J("esri.layers.MapNotesLayer.MapNotesSublayer")],u);const C=[{geometryType:"polygon",geometryTypeJSON:"esriGeometryPolygon",id:"polygonLayer",layerId:0,title:"Polygons",identifyingSymbol:new q().toJSON()},{geometryType:"polyline",geometryTypeJSON:"esriGeometryPolyline",id:"polylineLayer",layerId:1,title:"Polylines",identifyingSymbol:new V().toJSON()},{geometryType:"multipoint",geometryTypeJSON:"esriGeometryMultipoint",id:"multipointLayer",layerId:2,title:"Multipoints",identifyingSymbol:new I().toJSON()},{geometryType:"point",geometryTypeJSON:"esriGeometryPoint",id:"pointLayer",layerId:3,title:"Points",identifyingSymbol:new I().toJSON()},{geometryType:"point",geometryTypeJSON:"esriGeometryPoint",id:"textLayer",layerId:4,title:"Text",identifyingSymbol:new Y().toJSON()}];let n=class extends P(D(pe(ye(oe(x))))){constructor(e){super(e),this.capabilities={operations:{supportsMapNotesEditing:!0}},this.featureCollections=null,this.featureCollectionJSON=null,this.featureCollectionType="notes",this.legendEnabled=!1,this.listMode="hide-children",this.minScale=0,this.maxScale=0,this.spatialReference=O.WGS84,this.sublayers=new w(C.map(t=>new u({id:t.id,layerId:t.layerId,title:t.title,layer:this}))),this.title="Map Notes",this.type="map-notes",this.visibilityMode="inherited"}readCapabilities(e,t,r){return{operations:{supportsMapNotesEditing:!S(t)&&(r==null?void 0:r.origin)!=="portal-item"}}}readFeatureCollections(e,t,r){if(!S(t))return null;const o=t.layers.map(a=>{const s=new le;return s.read(a,r),s});return new w({items:o})}readLegacyfeatureCollectionJSON(e,t){return S(t)?L(t.featureCollection):null}get fullExtent(){var r;const e=this.spatialReference,t=R();return this.sublayers!=null?this.sublayers.forEach(({fullBounds:o})=>o!=null?M(t,o,t):t,t):(r=this.featureCollectionJSON)!=null&&r.layers.some(o=>o.layerDefinition.extent)&&this.featureCollectionJSON.layers.forEach(a=>{const s=N(a.layerDefinition.extent,e).geometry;s!=null&&M(t,s,t)}),F(t,G)?N(z(),e).geometry:$(t,e)}readMinScale(e,t){for(const r of t.layers)if(r.layerDefinition.minScale!=null)return r.layerDefinition.minScale;return 0}readMaxScale(e,t){for(const r of t.layers)if(r.layerDefinition.maxScale!=null)return r.layerDefinition.maxScale;return 0}get multipointLayer(){return this._findSublayer("multipointLayer")}get pointLayer(){return this._findSublayer("pointLayer")}get polygonLayer(){return this._findSublayer("polygonLayer")}get polylineLayer(){return this._findSublayer("polylineLayer")}readSpatialReference(e,t){return t.layers.length?O.fromJSON(t.layers[0].layerDefinition.spatialReference):O.WGS84}readSublayers(e,t,r){if(S(t))return null;const o=[];let a=t.layers.reduce((s,p)=>Math.max(s,p.layerDefinition.id??-1),-1)+1;for(const s of t.layers){const{layerDefinition:p,featureSet:y}=s,m=p.id??a++,c=B(s);if(c!=null){const h=new u({id:c.id,title:p.name,layerId:m,layer:this,graphics:y.features.map(({geometry:b,symbol:v,attributes:A,popupInfo:W})=>K.fromJSON({attributes:A,geometry:b,symbol:v,popupTemplate:W}))});o.push(h)}}return new w(o)}writeSublayers(e,t,r,o){var c;const{minScale:a,maxScale:s}=this;if(e==null)return;const p=e.some(h=>h.graphics.length>0);if(!this.capabilities.operations.supportsMapNotesEditing){p&&((c=o==null?void 0:o.messages)==null||c.push(new X("map-notes-layer:editing-not-supported","New map notes cannot be added to this layer")));return}const y=[];let m=this.spatialReference.toJSON();e:for(const h of e)for(const b of h.graphics)if(b.geometry!=null){m=b.geometry.spatialReference.toJSON();break e}for(const h of C){const b=e.find(v=>h.id===v.id);this._writeMapNoteSublayer(y,b,h,a,s,m,o)}Z("featureCollection.layers",y,t)}get textLayer(){return this._findSublayer("textLayer")}load(e){return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Feature Collection"]},e)),Promise.resolve(this)}read(e,t){"featureCollection"in e&&(e=L(e),Object.assign(e,e.featureCollection)),super.read(e,t)}async beforeSave(){if(this.sublayers==null)return;let e=null;const t=[];for(const o of this.sublayers)for(const a of o.graphics)if(a.geometry!=null){const s=a.geometry;e?H(s.spatialReference,e)||(!Q(s.spatialReference,e)&&!U()&&await ee(),a.geometry=te(s,e)):e=s.spatialReference,t.push(a)}const r=await ae(t.map(o=>o.geometry));t.forEach((o,a)=>o.geometry=r[a])}_findSublayer(e){var t;return this.sublayers==null?null:((t=this.sublayers)==null?void 0:t.find(r=>r.id===e))??null}_writeMapNoteSublayer(e,t,r,o,a,s,p){const y=[];if(t!=null){for(const m of t.graphics)this._writeMapNote(y,m,r.geometryType,p);this._normalizeObjectIds(y,E),e.push({layerDefinition:{name:t.title,drawingInfo:{renderer:{type:"simple",symbol:L(r.identifyingSymbol)}},id:t.layerId,geometryType:r.geometryTypeJSON,minScale:o,maxScale:a,objectIdField:"OBJECTID",fields:[E.toJSON(),me.toJSON()],spatialReference:s},featureSet:{features:y,geometryType:r.geometryTypeJSON}})}}_writeMapNote(e,t,r,o){var m,c;if(t==null)return;const{geometry:a,symbol:s,popupTemplate:p}=t;if(a==null)return;if(a.type!==r){(m=o==null?void 0:o.messages)==null||m.push(new T("map-notes-layer:invalid-geometry-type",`Geometry "${a.type}" cannot be saved in "${r}" layer`,{graphic:t}));return}if(s==null){(c=o==null?void 0:o.messages)==null||c.push(new T("map-notes-layer:no-symbol","Skipping map notes with no symbol",{graphic:t}));return}const y={attributes:{...t.attributes},geometry:a.toJSON(),symbol:s.toJSON()};p!=null&&(y.popupInfo=p.toJSON()),e.push(y)}_normalizeObjectIds(e,t){const r=t.name;let o=se(r,e)+1;const a=new Set;for(const s of e){s.attributes||(s.attributes={});const{attributes:p}=s;(p[r]==null||a.has(p[r]))&&(p[r]=o++),a.add(p[r])}}};i([l({readOnly:!0})],n.prototype,"capabilities",void 0);i([g(["portal-item","web-map"],"capabilities",["layers"])],n.prototype,"readCapabilities",null);i([l({readOnly:!0})],n.prototype,"featureCollections",void 0);i([g(["web-map","portal-item"],"featureCollections",["layers"])],n.prototype,"readFeatureCollections",null);i([l({readOnly:!0,json:{origins:{"web-map":{write:{enabled:!0,target:"featureCollection"}}}}})],n.prototype,"featureCollectionJSON",void 0);i([g(["web-map","portal-item"],"featureCollectionJSON",["featureCollection"])],n.prototype,"readLegacyfeatureCollectionJSON",null);i([l({readOnly:!0,json:{read:!0,write:{enabled:!0,ignoreOrigin:!0}}})],n.prototype,"featureCollectionType",void 0);i([l({readOnly:!0})],n.prototype,"fullExtent",null);i([l({readOnly:!0,json:{origins:{"web-map":{write:{target:"featureCollection.showLegend",overridePolicy(){return{enabled:this.featureCollectionJSON!=null}}}}}}})],n.prototype,"legendEnabled",void 0);i([l({type:["show","hide","hide-children"]})],n.prototype,"listMode",void 0);i([l({type:Number,nonNullable:!0,json:{write:!1}})],n.prototype,"minScale",void 0);i([g(["web-map","portal-item"],"minScale",["layers"])],n.prototype,"readMinScale",null);i([l({type:Number,nonNullable:!0,json:{write:!1}})],n.prototype,"maxScale",void 0);i([g(["web-map","portal-item"],"maxScale",["layers"])],n.prototype,"readMaxScale",null);i([l({readOnly:!0})],n.prototype,"multipointLayer",null);i([l({value:"ArcGISFeatureLayer",type:["ArcGISFeatureLayer"]})],n.prototype,"operationalLayerType",void 0);i([l({readOnly:!0})],n.prototype,"pointLayer",null);i([l({readOnly:!0})],n.prototype,"polygonLayer",null);i([l({readOnly:!0})],n.prototype,"polylineLayer",null);i([l({type:O})],n.prototype,"spatialReference",void 0);i([g(["web-map","portal-item"],"spatialReference",["layers"])],n.prototype,"readSpatialReference",null);i([l({readOnly:!0,json:{origins:{"web-map":{write:{ignoreOrigin:!0}}}}})],n.prototype,"sublayers",void 0);i([g("web-map","sublayers",["layers"])],n.prototype,"readSublayers",null);i([re("web-map","sublayers")],n.prototype,"writeSublayers",null);i([l({readOnly:!0})],n.prototype,"textLayer",null);i([l()],n.prototype,"title",void 0);i([l({readOnly:!0,json:{read:!1}})],n.prototype,"type",void 0);n=i([J("esri.layers.MapNotesLayer")],n);const It=n;export{It as default};
