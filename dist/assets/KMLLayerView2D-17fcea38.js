import{U as T,K as k,L as G,b9 as D,V as N,D as z,C as O,B as S,bj as $,bw as F,bx as E,by as W,bz as U,bA as H,bB as K,ae as v,af as C,ai as Y}from"./index-65afe59f.js";import{b as P,g as J,d as X}from"./kmlUtils-014dfcd7.js";import{b as Q,w as Z,S as tt}from"./Bitmap-d369a9fa.js";import{a as et}from"./BitmapContainer-2b8ea605.js";import{f as it,d as at}from"./LayerView-c66ee5b5.js";import{i as M}from"./GraphicContainer-c1db9433.js";import{o as R}from"./GraphicsView2D-550446cc.js";import{v as rt,$ as st}from"./rasterProjectionHelper-60748bcd.js";import{n as ot}from"./WGLContainer-50657b8c.js";import{M as nt,o as lt}from"./RenderingContext-1b8d9962.js";import{D as A,Y as pt,X as ht,P as mt,G as ct,f as L}from"./enums-74e97557.js";import{N as dt}from"./VertexArrayObject-eb5e0ff5.js";import{m as ut}from"./rasterUtils-7340a8c5.js";import{a as q,u as j}from"./TextureDescriptor-9f6b1d53.js";import"./jsonUtils-cf75a5b6.js";import"./UniqueValueRenderer-c45fa812.js";import"./LegendOptions-d5bf6b73.js";import"./diffUtils-0f0e8cfe.js";import"./SizeVariable-e7f3c0e2.js";import"./colorRamps-08b57831.js";import"./sizeVariableUtils-d4870b0d.js";import"./lengthUtils-00939dab.js";import"./ColorStop-03954883.js";import"./jsonUtils-15c906c8.js";import"./styleUtils-00c8d6d5.js";import"./featureFlags-acda3469.js";import"./DictionaryLoader-b3115f22.js";import"./LRUCache-fba88a6d.js";import"./MemCache-b8f96232.js";import"./FieldsIndex-6df00c0a.js";import"./heatmapUtils-1ed1bbca.js";import"./vec4f64-aa64c7e9.js";import"./FeatureSet-725ad5ad.js";import"./Field-f17f32a3.js";import"./fieldType-d8edb871.js";import"./Container-e8893995.js";import"./parser-8554880e.js";import"./definitions-e9823d3c.js";import"./color-0ea5ee36.js";import"./enums-55085e26.js";import"./VertexElementDescriptor-2925c6af.js";import"./BaseGraphicContainer-e3c4bee3.js";import"./FeatureContainer-c0f53321.js";import"./AttributeStoreView-d1776232.js";import"./TiledDisplayObject-d9916bb7.js";import"./visualVariablesUtils-a3fa934f.js";import"./visualVariablesUtils-79328d8b.js";import"./TileContainer-74f018b1.js";import"./utils-e7939558.js";import"./MaterialKey-d4d21a67.js";import"./vec3f32-ad1dc57f.js";import"./normalizeUtils-678d9dd1.js";import"./normalizeUtilsCommon-2b774e39.js";import"./ExpandedCIM-04e76692.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-53652037.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-ce722d8e.js";import"./floatRGBA-4ec8974c.js";import"./normalizeUtilsSync-45cc566b.js";import"./projectionSupport-65ca4a6b.js";import"./json-48e3ea08.js";import"./labelingInfo-a25619a7.js";import"./labelUtils-ec59d2a3.js";import"./defaultsJSON-b087dd4d.js";import"./Matcher-1fbf8bdd.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-2482e49c.js";import"./featureConversionUtils-a232f677.js";import"./OptimizedGeometry-33b2eb0d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./GeometryUtils-dd03fc25.js";import"./earcut-0147fc3d.js";import"./devEnvironmentUtils-5002a058.js";import"./schemaUtils-061a64ca.js";import"./sql-c4c85944.js";import"./clusterUtils-a342a95a.js";import"./util-6e5d3a25.js";import"./ComputedAttributeStorage-10273ffa.js";import"./arcadeTimeUtils-55255860.js";import"./executionError-fb3f283a.js";import"./centroid-8e8cfa47.js";import"./ProgramTemplate-d6438cda.js";import"./StyleDefinition-fbc907c2.js";import"./config-1337d16e.js";import"./programUtils-59f437df.js";import"./NestedMap-1b5db22e.js";import"./OrderIndependentTransparency-5b5adc11.js";import"./basicInterfaces-4ab7cc6a.js";import"./doublePrecisionUtils-e3c3d0d8.js";import"./DisjointTimerQuery-b21930a9.js";class m{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(m._instance)return m._instanceRefCount++,m._instance;m._instanceRefCount=1,m._instance=this,this._ownsRctx=!0;const e=document.createElement("canvas").getContext("webgl");e.getExtension("OES_texture_float"),this._rctx=new nt(e,{})}const a={applyProjection:!0,bilinear:!1,bicubic:!1},s=lt("raster/reproject","raster/reproject",new Map([["a_position",0]]),a);this._program=this._rctx.programCache.acquire(s.shaders.vertexShader,s.shaders.fragmentShader,s.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new ot(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,a,s=!1){const e=T(t.extent,a),r=new k({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:o,y:p}=rt(r,a,t.extent);let l=(o+p)/2;const n=Math.round((e.xmax-e.xmin)/l),d=Math.round((e.ymax-e.ymin)/l);l=(e.width/n+e.height/d)/2;const I=new k({x:l,y:l,spatialReference:e.spatialReference}),y=st({projectedExtent:e,srcBufferExtent:t.extent,pixelSize:I,hasWrapAround:!0,spacing:[16,16]}),x=ut(this._rctx,y),u=new q;u.wrapMode=A.CLAMP_TO_EDGE,u.width=n,u.height=d;const _=new j(this._rctx,u),h=new dt(this._rctx,{colorTarget:pt.TEXTURE,depthStencilTarget:ht.NONE,width:n,height:d},_);this._rctx.bindFramebuffer(h),this._rctx.setViewport(0,0,n,d),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(x,1),this._quad.bind();const{width:f=0,height:b=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",f,b),this._program.setUniform2fv("u_transformSpacing",y.spacing),this._program.setUniform2fv("u_transformGridSize",y.size),this._program.setUniform2f("u_targetImageSize",n,d),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),x.dispose(),s){const{width:c=0,height:V=0}=h.descriptor,w=new ImageData(c,V);return h.readPixels(0,0,c,V,mt.RGBA,ct.UNSIGNED_BYTE,w.data),h.detachColorTexture(L.COLOR_ATTACHMENT0),h.dispose(),{texture:_,extent:e,imageData:w}}return h.detachColorTexture(L.COLOR_ATTACHMENT0),h.dispose(),{texture:_,extent:e}}reprojectBitmapData(t,a){const s=Q(t.bitmapData)?Z(t.bitmapData):t.bitmapData,e=new q;e.wrapMode=A.CLAMP_TO_EDGE,e.width=t.bitmapData.width,e.height=t.bitmapData.height;const r=new j(this._rctx,e,s),o=this.reprojectTexture({texture:r,extent:t.extent},a,!0);o.texture.dispose();const p=document.createElement("canvas"),l=o.imageData;return p.width=l.width,p.height=l.height,p.getContext("2d").putImageData(l,0,0),{bitmapData:p,extent:o.extent}}async loadAndReprojectBitmapData(t,a,s){const e=(await G(t,{responseType:"image"})).data,r=document.createElement("canvas");r.width=e.width,r.height=e.height;const o=r.getContext("2d");o.drawImage(e,0,0);const p=o.getImageData(0,0,r.width,r.height);if(a.spatialReference.equals(s))return{bitmapData:p,extent:a};const l=this.reprojectBitmapData({bitmapData:p,extent:a},s);return{bitmapData:l.bitmapData,extent:l.extent}}destroy(){this._ownsRctx?(m._instanceRefCount--,m._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),m._instance=null)):(this._quad.dispose(),this._program.dispose())}}m._instanceRefCount=0;class B{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let g=class extends it(at){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new et,this._kmlVisualData=new B,this._fetchController=null,this.allVisiblePoints=new D,this.allVisiblePolylines=new D,this.allVisiblePolygons=new D,this.allVisibleMapImages=new N}async hitTest(i,t){var s,e,r;const a=this.layer;return[(s=this._pointsView)==null?void 0:s.hitTest(i),(e=this._polylinesView)==null?void 0:e.hitTest(i),(r=this._polygonsView)==null?void 0:r.hitTest(i)].flat().filter(Boolean).map(o=>(o.layer=a,o.sourceLayer=a,{type:"graphic",graphic:o,layer:a,mapPoint:i}))}update(i){this._polygonsView&&this._polygonsView.processUpdate(i),this._polylinesView&&this._polylinesView.processUpdate(i),this._pointsView&&this._pointsView.processUpdate(i)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new R({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new R({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new R({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new M(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",i=>{i.added.forEach(t=>this._addMapImage(t)),i.removed.forEach(t=>this._removeMapImage(t))}),z(()=>this.layer.visibleSublayers,i=>{for(const[t,a]of this._kmlVisualData.allSublayers)a.visibility=0;for(const t of i){const a=this._kmlVisualData.allSublayers.get(t.id);a&&(a.visibility=1)}this._refreshCollections()})]),this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new m}detach(){this._fetchController=O(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=S(this._polygonsView),this._polylinesView=S(this._polylinesView),this._pointsView=S(this._pointsView),this._imageReprojector=S(this._imageReprojector)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(i){var t,a;((t=this.view.spatialReference)!=null&&t.isWGS84||(a=this.view.spatialReference)!=null&&a.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(i.href,$.fromJSON(i.extent),this.view.spatialReference).then(s=>{const e=new tt(s.bitmapData,{immutable:!1,requestRenderOnSourceChangedEnabled:!0});e.x=s.extent.xmin,e.y=s.extent.ymax,e.resolution=s.extent.width/s.bitmapData.width,e.rotation=i.rotation,this._mapImageContainer.addChild(e),this._bitmapIndex.set(i,e)})}async _getViewDependentUrl(i,t){const{viewFormat:a,viewBoundScale:s,httpQuery:e}=i;if(a!=null){if(t==null)throw new Error("Loading this network link requires a view state.");let r;if(await F(),s!=null&&s!==1){const c=new $(t.extent);c.expand(s),r=c}else r=t.extent;r=T(r,E.WGS84);const o=T(r,E.WebMercator),p=r.xmin,l=r.xmax,n=r.ymin,d=r.ymax,I=t.size[0]*t.pixelRatio,y=t.size[1]*t.pixelRatio,x=Math.max(o.width,o.height),u={"[bboxWest]":p.toString(),"[bboxEast]":l.toString(),"[bboxSouth]":n.toString(),"[bboxNorth]":d.toString(),"[lookatLon]":r.center.x.toString(),"[lookatLat]":r.center.y.toString(),"[lookatRange]":x.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":r.center.x.toString(),"[lookatTerrainLat]":r.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":r.center.x.toString(),"[cameraLat]":r.center.y.toString(),"[cameraAlt]":x.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":I.toString(),"[vertPixels]":y.toString(),"[terrainEnabled]":"0","[clientVersion]":W,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},_=c=>{for(const V in c){let w;for(w in u)c[V]=c[V].replace(w,u[w])}},h=U(a);_(h);let f={};e!=null&&(f=U(e),_(f));const b=H(i.href);return b.query={...b.query,...h,...f},`${b.path}?${K(h)}`}return i.href}async _fetchService(i){const t=new B;await this._loadVisualData(this.layer.url,t,i),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i))}_isSublayerVisible(i){const t=this._kmlVisualData.allSublayers.get(i);return!!(t!=null&&t.visibility)&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(i,t,a){return this._fetchParsedKML(i,a).then(async s=>{for(const e of s.sublayers){t.allSublayers.set(e.id,e);const r=e.points?await P(e.points):[],o=e.polylines?await P(e.polylines):[],p=e.polygons?await P(e.polygons):[],l=e.mapImages||[];if(t.allPoints.push(...r.map(n=>({item:n,sublayerId:e.id}))),t.allPolylines.push(...o.map(n=>({item:n,sublayerId:e.id}))),t.allPolygons.push(...p.map(n=>({item:n,sublayerId:e.id}))),t.allMapImages.push(...l.map(n=>({item:n,sublayerId:e.id}))),e.networkLink){const n=await this._getViewDependentUrl(e.networkLink,this.view.state);await this._loadVisualData(n,t,a)}}})}_fetchParsedKML(i,t){return J(i,this.layer.spatialReference,this.layer.refreshInterval,t).then(a=>X(a.data))}_removeMapImage(i){const t=this._bitmapIndex.get(i);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(i))}};v([C()],g.prototype,"_pointsView",void 0),v([C()],g.prototype,"_polylinesView",void 0),v([C()],g.prototype,"_polygonsView",void 0),v([C()],g.prototype,"updating",void 0),g=v([Y("esri.views.2d.layers.KMLLayerView2D")],g);const Qe=g;export{Qe as default};
