import{ah as u,V as f,aB as w,D as h,E as p,an as y,ae as _,ai as V}from"./index-65afe59f.js";import{h as v}from"./Container-e8893995.js";import{r as C}from"./GroupContainer-e819c424.js";import{f as H,d as b}from"./LayerView-c66ee5b5.js";import{i as m}from"./GraphicContainer-c1db9433.js";import{o as c}from"./GraphicsView2D-550446cc.js";import"./parser-8554880e.js";import"./definitions-e9823d3c.js";import"./enums-74e97557.js";import"./TextureDescriptor-9f6b1d53.js";import"./WGLContainer-50657b8c.js";import"./VertexArrayObject-eb5e0ff5.js";import"./VertexElementDescriptor-2925c6af.js";import"./color-0ea5ee36.js";import"./enums-55085e26.js";import"./ProgramTemplate-d6438cda.js";import"./MaterialKey-d4d21a67.js";import"./utils-e7939558.js";import"./heatmapUtils-1ed1bbca.js";import"./vec4f64-aa64c7e9.js";import"./StyleDefinition-fbc907c2.js";import"./config-1337d16e.js";import"./GeometryUtils-dd03fc25.js";import"./earcut-0147fc3d.js";import"./featureConversionUtils-a232f677.js";import"./OptimizedGeometry-33b2eb0d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./BaseGraphicContainer-e3c4bee3.js";import"./FeatureContainer-c0f53321.js";import"./AttributeStoreView-d1776232.js";import"./TiledDisplayObject-d9916bb7.js";import"./visualVariablesUtils-a3fa934f.js";import"./visualVariablesUtils-79328d8b.js";import"./TileContainer-74f018b1.js";import"./lengthUtils-00939dab.js";import"./vec3f32-ad1dc57f.js";import"./normalizeUtils-678d9dd1.js";import"./normalizeUtilsCommon-2b774e39.js";import"./ExpandedCIM-04e76692.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-53652037.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-ce722d8e.js";import"./floatRGBA-4ec8974c.js";import"./normalizeUtilsSync-45cc566b.js";import"./projectionSupport-65ca4a6b.js";import"./json-48e3ea08.js";import"./labelingInfo-a25619a7.js";import"./labelUtils-ec59d2a3.js";import"./defaultsJSON-b087dd4d.js";import"./jsonUtils-15c906c8.js";import"./Matcher-1fbf8bdd.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-2482e49c.js";import"./LRUCache-fba88a6d.js";import"./MemCache-b8f96232.js";import"./devEnvironmentUtils-5002a058.js";import"./styleUtils-00c8d6d5.js";import"./featureFlags-acda3469.js";import"./schemaUtils-061a64ca.js";import"./sql-c4c85944.js";import"./diffUtils-0f0e8cfe.js";import"./clusterUtils-a342a95a.js";import"./SizeVariable-e7f3c0e2.js";import"./colorRamps-08b57831.js";import"./LegendOptions-d5bf6b73.js";import"./sizeVariableUtils-d4870b0d.js";import"./util-6e5d3a25.js";import"./ComputedAttributeStorage-10273ffa.js";import"./FieldsIndex-6df00c0a.js";import"./arcadeTimeUtils-55255860.js";import"./executionError-fb3f283a.js";import"./centroid-8e8cfa47.js";const g="sublayers",n="layerView",T=Object.freeze({remove(){},pause(){},resume(){}});let l=class extends H(b){constructor(){super(...arguments),this._highlightIds=new Map,this.container=new C}async fetchPopupFeatures(i){return Array.from(this.graphicsViews(),t=>t.hitTest(i).filter(e=>!!e.popupTemplate)).flat()}*graphicsViews(){this._graphicsViewsFeatureCollectionMap==null?this._graphicsViews==null?yield*[]:yield*this._graphicsViews:yield*this._graphicsViewsFeatureCollectionMap.keys()}async hitTest(i,t){return Array.from(this.graphicsViews(),e=>{const s=e.hitTest(i);if(this._graphicsViewsFeatureCollectionMap!=null){const o=this._graphicsViewsFeatureCollectionMap.get(e);for(const r of s)!r.popupTemplate&&o.popupTemplate&&(r.popupTemplate=o.popupTemplate),r.sourceLayer=r.layer=this.layer}return s}).flat().map(e=>({type:"graphic",graphic:e,layer:this.layer,mapPoint:i}))}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof u?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(s=>s&&s.uid):f.isCollection(i)&&(t=i.map(s=>s&&s.uid).toArray());const e=t==null?void 0:t.filter(w);return e!=null&&e.length?(this._addHighlight(e),{remove:()=>{this._removeHighlight(e)}}):T}update(i){for(const t of this.graphicsViews())t.processUpdate(i)}attach(){const i=this.view,t=()=>this.requestUpdate(),e=this.layer.featureCollections;if(e!=null&&e.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const s of e){const o=new m(this.view.featuresTilingScheme),r=new c({view:i,graphics:s.source,renderer:s.renderer,requestUpdateCallback:t,container:o});this._graphicsViewsFeatureCollectionMap.set(r,s),this.container.addChild(r.container),this.addHandles([h(()=>s.visible,a=>r.container.visible=a,p),h(()=>r.updating,()=>this.notifyChange("updating"),p)],n)}this._updateHighlight()}else this.layer.sublayers!=null&&this.addHandles(y(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),g)}detach(){this._destroyGraphicsViews(),this.removeHandles(g)}moveStart(){}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.removeHandles(n);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),this.layer.sublayers==null)return;const i=[],t=this.view,e=()=>this.requestUpdate();for(const s of this.layer.sublayers){const o=new v,r=new m(this.view.featuresTilingScheme);r.fadeTransitionEnabled=!0;const a=new c({view:t,graphics:s.graphics,requestUpdateCallback:e,container:r});this.addHandles([s.on("graphic-update",a.graphicUpdateHandler),h(()=>s.visible,d=>a.container.visible=d,p),h(()=>a.updating,()=>this.notifyChange("updating"),p)],n),o.addChild(a.container),this.container.addChild(o),i.push(a)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this.graphicsViews())t.setHighlight(i)}};l=_([V("esri.views.2d.layers.MapNotesLayerView2D")],l);const Ni=l;export{Ni as default};
