import{au as O,Z as x,eU as b,eQ as f,r as g,bf as w,bC as E,hv as M,E as S,i as L,ae as a,af as p,eY as I,bF as R,bG as T,ai as P,a$ as A,dX as N}from"./index-0ea7d266.js";import{M as J}from"./MultiOriginJSONSupport-afa56182.js";import{g as F}from"./scaleUtils-05363d03.js";import{A as q}from"./APIKeyMixin-882c3a78.js";import{S as U,A as _,a as $}from"./SublayersOwner-b34d3f59.js";import{A as j}from"./ArcGISService-65ac5d7b.js";import{B as k}from"./BlendLayer-2f1384eb.js";import{C}from"./CustomParametersMixin-29882b8c.js";import{O as B}from"./OperationalLayer-fd7c639f.js";import{P as G}from"./PortalLayer-d0349a78.js";import{R as V}from"./RefreshableLayer-d9688d21.js";import{S as z}from"./ScaleRangeLayer-1e20ff33.js";import{T as H}from"./TemporalLayer-ce68f338.js";import{u as K}from"./commonProperties-cee41848.js";import{E as W}from"./ExportImageParameters-383d6fde.js";import{a as D}from"./imageBitmapUtils-3a607ed2.js";import{s as v}from"./sublayerUtils-4410b9a6.js";import{s as Q}from"./versionUtils-08d9bb82.js";import"./Version-7815b4ed.js";import"./UniqueValueRenderer-bd817ff6.js";import"./LegendOptions-360b2985.js";import"./diffUtils-b0771538.js";import"./SizeVariable-0f7c14c6.js";import"./colorRamps-fd437087.js";import"./sizeVariableUtils-2914222a.js";import"./lengthUtils-bc57f38a.js";import"./ColorStop-93d44530.js";import"./jsonUtils-f828afa2.js";import"./styleUtils-c7710d4b.js";import"./featureFlags-d265949d.js";import"./jsonUtils-a0fc5f15.js";import"./DictionaryLoader-038d0fdb.js";import"./LRUCache-fb59e061.js";import"./MemCache-e783d117.js";import"./FieldsIndex-e2dec42a.js";import"./heatmapUtils-47f2d9fb.js";import"./vec4-3dd523e8.js";import"./vec4f64-efdcb593.js";import"./sql-a6f6c9bf.js";import"./QueryTask-7038811b.js";import"./infoFor3D-91dff30a.js";import"./Query-0072957d.js";import"./Field-da71a869.js";import"./fieldType-2fab90c6.js";import"./executeForIds-86fe7316.js";import"./query-c7712b9b.js";import"./normalizeUtils-75ecc35a.js";import"./normalizeUtilsCommon-c67d270a.js";import"./pbfQueryUtils-899955f0.js";import"./pbf-762fbeb5.js";import"./OptimizedGeometry-af84d2ad.js";import"./OptimizedFeatureSet-5c82fe5a.js";import"./queryZScale-16a2b4f3.js";import"./executeQueryJSON-5fcd3d23.js";import"./FeatureSet-492be28c.js";import"./featureConversionUtils-70bb5e62.js";import"./FeatureType-2d01f4ea.js";import"./FeatureTemplate-470b89aa.js";import"./labelingInfo-00dd8611.js";import"./labelUtils-6d9ec360.js";import"./defaultsJSON-b396ba80.js";import"./serviceCapabilitiesUtils-ebf197ef.js";import"./AttachmentQuery-4d8624c9.js";import"./popupUtils-999b7fb5.js";import"./jsonUtils-16a3028b.js";import"./parser-378b4989.js";import"./_commonjsHelpers-725317a4.js";import"./portalItemUtils-c67149e6.js";import"./ElevationInfo-56c656df.js";import"./floorFilterUtils-0e56040f.js";let t=class extends k(H(z(U(_(j(B(G(J(V(q(C(O(A))))))))))))){constructor(...e){super(...e),this.dateFieldsTimeReference=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeReference=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,i){return typeof e=="string"?{url:e,...i}:e}load(e){const i=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(x).then(()=>this._fetchService(i))),Promise.resolve(this)}readImageFormat(e,i){const l=i.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}writeSublayers(e,i,l,r){var c;if(!this.loaded||!e)return;const o=e.slice().reverse().flatten(({sublayers:s})=>s&&s.toArray().reverse()).toArray();let m=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((c=this.capabilities.exportMap)!=null&&c.supportsDynamicLayers)){const s=b(r.origin);if(s===f.PORTAL_ITEM){const u=this.createSublayersForOrigin("service").sublayers;m=v(o,u,f.SERVICE)}else if(s>f.PORTAL_ITEM){const u=this.createSublayersForOrigin("portal-item");m=v(o,u.sublayers,b(u.origin))}}const n=[],d={writeSublayerStructure:m,...r};let y=m;o.forEach(s=>{const u=s.write({},d);n.push(u),y=y||s.originOf("visible")==="user"}),n.some(s=>Object.keys(s).length>1)&&(i.layers=n),y&&(i.visibleLayers=o.filter(s=>s.visible).map(s=>s.id))}createExportImageParameters(e,i,l,r){const o=r&&r.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const m=new W({layer:this,floors:r==null?void 0:r.floors,scale:F({extent:e,width:i})*o}),n=m.toJSON();m.destroy();const d=!r||!r.rotation||this.version<10.3?{}:{rotation:-r.rotation},y=e&&e.spatialReference,h=y.wkid||JSON.stringify(y.toJSON());n.dpi*=o;const c={};if(r!=null&&r.timeExtent){const{start:s,end:u}=r.timeExtent.toJSON();s&&u&&s===u?c.time=""+s:c.time=`${s??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:h,imageSR:h,size:i+","+l,...n,...d,...c}}async fetchImage(e,i,l,r){const{data:o}=await this._fetchImage("image",e,i,l,r);return o}async fetchImageBitmap(e,i,l,r){const{data:o,url:m}=await this._fetchImage("blob",e,i,l,r);return D(o,m,r==null?void 0:r.signal)}async fetchRecomputedExtents(e={}){const i={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await g(this.url,i),{extent:r,fullExtent:o,timeExtent:m}=l,n=r||o;return{fullExtent:n&&w.fromJSON(n),timeExtent:m&&E.fromJSON({start:m[0],end:m[1]})}}loadAll(){return M(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return Q(this,e)}async _fetchImage(e,i,l,r,o){var d,y,h;const m={responseType:e,signal:(o==null?void 0:o.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(i,l,r,o),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},n=this.parsedUrl.path+"/export";if(((d=m.query)==null?void 0:d.dynamicLayers)!=null&&!((h=(y=this.capabilities)==null?void 0:y.exportMap)!=null&&h.supportsDynamicLayers))throw new S("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:m.query});try{const{data:c}=await g(n,m);return{data:c,url:n}}catch(c){throw L(c)?c:new S("mapimagelayer:image-fetch-error",`Unable to load image: ${n}`,{error:c})}}async _fetchService(e){if(this.sourceJSON){this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});return}const{data:i,ssl:l}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=i,this.read(i,{origin:"service",url:this.parsedUrl})}};a([p({type:I})],t.prototype,"dateFieldsTimeReference",void 0);a([p({type:Boolean})],t.prototype,"datesInUnknownTimezone",void 0);a([p()],t.prototype,"dpi",void 0);a([p()],t.prototype,"gdbVersion",void 0);a([p()],t.prototype,"imageFormat",void 0);a([R("imageFormat",["supportedImageFormatTypes"])],t.prototype,"readImageFormat",null);a([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],t.prototype,"imageMaxHeight",void 0);a([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],t.prototype,"imageMaxWidth",void 0);a([p()],t.prototype,"imageTransparency",void 0);a([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],t.prototype,"isReference",void 0);a([p({json:{read:!1,write:!1}})],t.prototype,"labelsVisible",void 0);a([p({type:["ArcGISMapServiceLayer"]})],t.prototype,"operationalLayerType",void 0);a([p({json:{read:!1,write:!1}})],t.prototype,"popupEnabled",void 0);a([p({type:I})],t.prototype,"preferredTimeReference",void 0);a([p()],t.prototype,"sourceJSON",void 0);a([p({json:{write:{ignoreOrigin:!0}}})],t.prototype,"sublayers",void 0);a([T("sublayers",{layers:{type:[$]},visibleLayers:{type:[N]}})],t.prototype,"writeSublayers",null);a([p({type:["show","hide","hide-children"]})],t.prototype,"listMode",void 0);a([p({json:{read:!1},readOnly:!0,value:"map-image"})],t.prototype,"type",void 0);a([p(K)],t.prototype,"url",void 0);t=a([P("esri.layers.MapImageLayer")],t);const hr=t;export{hr as default};
