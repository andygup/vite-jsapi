import{cL as mt,bp as he,f4 as nt,L as Oe,E,bE as Je,K as L,bf as G,r as rt,cP as pt,hr as it,bT as yt,ae as R,af as v,ai as Q,bD as gt,_ as xt,Q as Le,bt as W,bP as It,I as at,aB as ke,m as wt,bU as St,X as Rt,du as bt,Z as Tt,A as vt,dX as _t,eg as Ft,bb as Mt,bF as Ct,a$ as Pt}from"./index-b4b3ae7d.js";import{a as kt,R as De,r as ot,I as Dt,e as We,k as je,l as Et,c as At,d as Ge,j as Bt,f as Ot,b as Jt,i as Ht,w as zt}from"./ImageHistogramParameters-ef6c1e57.js";import{M as Nt}from"./MultiOriginJSONSupport-a39561fd.js";import{A as Lt}from"./ArcGISService-537550b8.js";import{B as Wt}from"./BlendLayer-0a837fcb.js";import{C as jt}from"./CustomParametersMixin-1130c90a.js";import{u as lt,a as Gt}from"./commonProperties-6e3ee32c.js";import{b as ct,c as $t,d as qt,e as Vt,D as ut,a as $e,h as Ut,f as qe,g as Yt}from"./multidimensionalUtils-cc33742c.js";import{d as Xt,u as ye,c as Kt,R as Qt,x as Ve,a as ge,e as Zt,y as He,v as es,z as ts,A as ss,B as ns,C as rs,D as is,T as Ie,E as as,F as os,H as ls}from"./RasterSymbolizer-e7c16f6c.js";import{g as Ue,b as Ye,p as Xe,d as cs,c as us}from"./RawBlockCache-18b81ac4.js";import{g as _e,h as ft,i as fs,j as hs,C as ds,n as ms,P as te,c as ps,k as ys,f as gs,G as xs}from"./dataUtils-cf9c1292.js";import{l as Ee,g as we,e as Ke,s as Qe,f as Is,h as Fe,p as Re,d as ws,i as Ss,b as Rs,j as bs}from"./rasterProjectionHelper-99af23ff.js";import{c as Ae,i as Ts,r as vs,P as ze,G as _s,g as Fs}from"./utils-952ae937.js";import{O as Ms}from"./OperationalLayer-fae6e909.js";import{P as Cs}from"./PortalLayer-e5a901dc.js";import{R as Ps}from"./RefreshableLayer-1a6ca7d6.js";import{S as ks}from"./ScaleRangeLayer-a596cf96.js";import{T as Ds}from"./TemporalLayer-d110d041.js";import{F as fe}from"./Field-a6e349b0.js";import{F as ht}from"./FeatureSet-aa200b6b.js";import{r as Es,T as As}from"./TilemapCache-0953a4a5.js";import{c as Bs}from"./popupUtils-67a775a1.js";import"./UniqueValueRenderer-51ab4299.js";import"./LegendOptions-46b1f954.js";import"./diffUtils-bb218827.js";import"./SizeVariable-eef1af06.js";import"./colorRamps-e7a401b6.js";import"./sizeVariableUtils-2914222a.js";import"./lengthUtils-ae3367a7.js";import"./ColorStop-ac2c158e.js";import"./jsonUtils-1eb97f8f.js";import"./styleUtils-f11fff25.js";import"./featureFlags-eb0cdac8.js";import"./normalizeUtils-a85cdb25.js";import"./normalizeUtilsCommon-fdc8c13f.js";import"./utils-a315a9d8.js";import"./parser-7991567d.js";import"./_commonjsHelpers-725317a4.js";import"./ItemCache-16629539.js";import"./MemCache-b965182b.js";import"./generateRendererUtils-d74149bb.js";import"./jsonUtils-2ab9edfc.js";import"./ElevationInfo-f0fe59c0.js";import"./colorUtils-6f72410e.js";import"./portalItemUtils-6119446c.js";import"./fieldType-9c435370.js";import"./ByteSizeUnit-c0a244d3.js";import"./LRUCache-58e6960b.js";const Ze=8,Os=256;let q=class extends mt(gt){constructor(){super(...arguments),this.datasetName=null,this.datasetFormat=null,this.hasUniqueSourceStorageInfo=!0,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const e=Ee();this.addResolvingPromise(e),await this.when()}normalizeCtorArgs(e){return e&&e.ioConfig&&(e={...e,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:he.create(),...e.ioConfig}}),e}get _isGlobalWrappableSource(){const{rasterInfo:e}=this,s=we(e.spatialReference);return s!=null&&e.extent.width>=s/2}get _hasNoneOrGCSShiftTransform(){const{transform:e}=this.rasterInfo;return e==null||e.type==="gcs-shift"}set rasterJobHandler(e){var s,r;this._set("rasterJobHandler",e),this.datasetFormat==="Function"&&((r=(s=this.primaryRasters)==null?void 0:s.rasters)==null||r.forEach(t=>t.rasterJobHandler=e))}set url(e){this._set("url",nt(e,Oe.getLogger(this.declaredClass)))}async open(e){throw new E("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(e,s,r,t={}){const n=t.tileInfo||this.rasterInfo.storageInfo.tileInfo,i=this.getTileExtentFromTileInfo(e,s,r,n);return this.fetchPixels(i,n.size[0],n.size[1],t)}async identify(e,s={}){var C;e=Je(L,e).clone().normalize();const{multidimensionalDefinition:r,timeExtent:t}=s,{rasterInfo:n}=this,{hasMultidimensionalTranspose:i,multidimensionalInfo:a}=n;let{transposedVariableName:o}=s;const c=a!=null&&i&&(t!=null||ct(r));c&&!o&&(o=r!=null&&r.length>0?r[0].variableName??void 0:a.variables[0].name,s={...s,transposedVariableName:o}),s=this._getRequestOptionsWithSliceId(s);const{spatialReference:f,extent:l}=n,{datumTransformation:h}=s;let u=Ke(e,f,h);if(!l.intersects(u))return{location:u,value:null};if(n.transform!=null){const k=n.transform.inverseTransform(u);if(!n.nativeExtent.intersects(k))return{location:k,value:null};u=k}let d=0;const m=o!=null&&a!=null&&n.hasMultidimensionalTranspose;if(this.datasetFormat==="Function"){const k=this.primaryRasters.rasters[0];if(m)return k.identify(u,s);const{pixelSize:O}=n,D=3,A=O.x*D/2,z=O.y*D/2,H=new G({xmin:u.x-A,xmax:u.x+A,ymin:u.y-z,ymax:u.y+z,spatialReference:f}),N={interpolation:"nearest"},{pixelBlock:j}=await k.fetchPixels(H,D,D,N),{pixelBlock:B}=await this.fetchPixels(H,D,D,N);if(j==null)return{location:u,value:null};const U=Math.floor(D*D*.5),X=!j.mask||j.mask[U]?j.pixels.map(ee=>ee[U]):null;let V;return B!=null&&(V=!B.mask||B.mask[U]?B.pixels.map(ee=>ee[U]):void 0),{location:u,value:X,processedValue:V,pyramidLevel:0}}if(!m){if(s.srcResolution)d=Qe(s.srcResolution,n,this.ioConfig.sampling).pyramidLevel;else if(d=await this.computeBestPyramidLevelForLocation(e,s),d==null)return{location:u,value:null}}const p=this.identifyPixelLocation(u,d,null,m);if(p===null)return{location:u,value:null};const{row:y,col:I,rowOffset:w,colOffset:x,blockWidth:S}=p,b=o??s.sliceId,F=Ue(this.url,b),M=`${d}/${y}/${I}`;let _=Ye(F,null,M);_==null&&(_=this.fetchRawTile(d,y,I,s),Xe(F,null,M,_));const P=await _;if(P==null||!((C=P.pixels)!=null&&C.length))return{location:u,value:null};const T=w*S+x;return this._processIdentifyResult(P,{srcLocation:u,position:T,pyramidLevel:d,useTransposedTile:!!m,requestSomeSlices:c,identifyOptions:s})}async fetchPixels(e,s,r,t={}){e=Is(e),t=this._getRequestOptionsWithSliceId(t);const{_hasNoneOrGCSShiftTransform:n}=this;if(t.requestRawData&&n)return this._fetchPixels(e,s,r,t);const i=we(e.spatialReference),a=Fe(e);if(i==null||a===0||a===1&&this._isGlobalWrappableSource&&n)return this._fetchPixels(e,s,r,t);if(a>=3)return{extent:e,pixelBlock:null};const o=[],{xmin:c,xmax:f}=e,l=Math.round(i/(f-c)*s),h=l-Math.round((i/2-c)/(f-c)*s);let u=0;const d=[];for(let x=0;x<=a;x++){const S=x===0?c:-i/2,b=x===a?f-i*x:i/2,F=new G({xmin:S,xmax:b,ymin:e.ymin,ymax:e.ymax,spatialReference:e.spatialReference}),M=x===0?l-h:x===a?s-u:l;u+=M,d.push(M);const _=t.disableWrapAround&&x>0?null:this._fetchPixels(F,M,r,t);o.push(_)}const p=(await Promise.all(o)).map(x=>x==null?void 0:x.pixelBlock);let y=null;const I={width:s,height:r};this.rasterJobHandler?y=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:p,srcMosaicSize:I,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:d},t)).pixelBlock:y=_e(p,I,{blockWidths:d});const w=Re(e,this.rasterInfo.spatialReference,t.datumTransformation);return{extent:e,srcExtent:w,pixelBlock:y}}async fetchRawPixels(e,s,r,t={}){s={x:Math.floor(s.x),y:Math.floor(s.y)};const n=await this._fetchRawTiles(e,s,r,t),{nativeExtent:i,nativePixelSize:a,storageInfo:o}=this.rasterInfo,c=2**e,f=a.x*c,l=a.y*c,h=new G({xmin:i.xmin+f*s.x,xmax:i.xmin+f*(s.x+r.width-1),ymin:i.ymax-l*(s.y+r.height-1),ymax:i.ymax-l*s.y,spatialReference:i.spatialReference});if(!n)return{extent:h,srcExtent:h,pixelBlock:null};const{pixelBlocks:u,mosaicSize:d}=n;if(u.length===1&&u[0]!=null&&u[0].width===r.width&&u[0].height===r.height)return{extent:h,srcExtent:h,pixelBlock:n.pixelBlocks[0]};const p=e>0?o.pyramidBlockWidth:o.blockWidth,y=e>0?o.pyramidBlockHeight:o.blockHeight,I={x:s.x%p,y:s.y%y};let w;return this.rasterJobHandler?w=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:u,srcMosaicSize:d,destDimension:r,clipOffset:I,clipSize:r,coefs:null,sampleSpacing:null,interpolation:t.interpolation,alignmentInfo:null,blockWidths:null},t)).pixelBlock:w=_e(u,d,{clipOffset:I,clipSize:r}),{extent:h,srcExtent:h,pixelBlock:w}}fetchRawTile(e,s,r,t){throw new E("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(e){return Re(this.rasterInfo.extent,e)}decodePixelBlock(e,s){return!this.rasterJobHandler||s.useCanvas?Xt(e,s):this.rasterJobHandler.decode({data:e,options:s})}async request(e,s,r=0){const{customFetchParameters:t}=this.ioConfig,{range:n,query:i,headers:a}=s;r=r??s.retryCount??this.ioConfig.retryCount;const o=n?{Range:`bytes=${n.from}-${n.to}`}:null;try{return await rt(e,{...s,query:{...i,...t},headers:{...a,...o}})}catch(c){if(r>0)return r--,this.request(e,s,r);throw c}}getSliceIndex(e){const{multidimensionalInfo:s}=this.rasterInfo;return s==null||e==null||e.length===0?null:$t(e,s)}getTileExtentFromTileInfo(e,s,r,t){const n=pt(t.lodAt(e));return this.getTileExtent({x:n.resolution,y:n.resolution},s,r,t.origin,t.spatialReference,t.size)}updateTileInfo(){const{storageInfo:e,spatialReference:s,extent:r,pixelSize:t}=this.rasterInfo;if(!e.tileInfo){const n=[],i=e.maximumPyramidLevel||0;let a=Math.max(t.x,t.y),o=1/.0254*96*a;for(let f=0;f<=i;f++)n.push(new it({level:i-f,resolution:a,scale:o})),a*=2,o*=2;const c=new L({x:r.xmin,y:r.ymax,spatialReference:s});e.tileInfo=new he({origin:c,size:[e.blockWidth,e.blockHeight],spatialReference:s,lods:n}),e.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(e,s=512,r=512,t){const{width:n,height:i,nativeExtent:a,pixelSize:o,spatialReference:c}=e,f=new L({x:a.xmin,y:a.ymax,spatialReference:c});t==null&&(t=Math.max(0,Math.round(Math.log(Math.max(n,i))/Math.LN2-8)));const l=this.computeBlockBoundary(a,512,512,{x:a.xmin,y:a.ymax},[o],t);e.storageInfo=new ye({blockWidth:s,blockHeight:r,pyramidBlockWidth:s,pyramidBlockHeight:r,origin:f,firstPyramidLevel:1,maximumPyramidLevel:t,blockBoundary:l})}async computeBestPyramidLevelForLocation(e,s={}){return 0}computeBlockBoundary(e,s,r,t,n,i=0,a=2){if(n.length===1&&i>0){n=[...n];let{x:l,y:h}=n[0];for(let u=0;u<i;u++)l*=a,h*=a,n.push({x:l,y:h})}const o=[],{x:c,y:f}=t;for(let l=0;l<n.length;l++){const{x:h,y:u}=n[l];o.push({minCol:Math.floor((e.xmin-c+.1*h)/s/h),maxCol:Math.floor((e.xmax-c-.1*h)/s/h),minRow:Math.floor((f-e.ymax+.1*u)/r/u),maxRow:Math.floor((f-e.ymin-.1*u)/r/u)})}return o}getPyramidPixelSize(e){const{nativePixelSize:s}=this.rasterInfo,{pyramidResolutions:r,pyramidScalingFactor:t}=this.rasterInfo.storageInfo;if(e===0)return s;if(r!=null&&r.length)return r[e-1];const n=t**e;return{x:s.x*n,y:s.y*n}}identifyPixelLocation(e,s,r,t){const{spatialReference:n,nativeExtent:i,storageInfo:a}=this.rasterInfo,{maximumPyramidLevel:o,origin:c,transposeInfo:f}=a,l=t&&f!=null?f.tileSize[0]:a.blockWidth,h=t&&f!=null?f.tileSize[1]:a.blockHeight,u=Ke(e,n,r);if(!i.intersects(u)||s<0||s>o)return null;const d=this.getPyramidPixelSize(s),{x:m,y:p}=d,y=(c.y-u.y)/p/h,I=(u.x-c.x)/m/l,w=Math.min(h-1,Math.floor((y-Math.floor(y))*h)),x=Math.min(l-1,Math.floor((I-Math.floor(I))*l));return{pyramidLevel:s,row:Math.floor(y),col:Math.floor(I),rowOffset:w,colOffset:x,blockWidth:l,srcLocation:u}}getTileExtent(e,s,r,t,n,i){const[a,o]=i,c=t.x+r*a*e.x,f=c+a*e.x,l=t.y-s*o*e.y,h=l-o*e.y;return new G({xmin:c,xmax:f,ymin:h,ymax:l,spatialReference:n})}getBlockWidthHeight(e){const s=e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,r=e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight;return{blockWidth:s,blockHeight:r}}isBlockOutside(e,s,r){const t=this.rasterInfo.storageInfo.blockBoundary[e];return!t||t.maxRow<s||t.maxCol<r||t.minRow>s||t.minCol>r}async _fetchPixels(e,s,r,t={}){let n=Fe(e);if(n>=2)return{extent:e,pixelBlock:null};const i=this._getSourceDataInfo(e,s,r,t),{pyramidLevel:a,srcResolution:o,srcExtent:c,srcWidth:f,srcHeight:l,ul:h}=i;if(f===0||l===0)return{extent:e,srcExtent:c,pixelBlock:null};const{rasterInfo:u}=this,d=u.transform,m=(d==null?void 0:d.type)==="gcs-shift",p=we(e.spatialReference)!=null;(m||!p)&&(n=Fe(i.srcExtent,m));const y=await this._fetchRawTiles(a,h,{width:f,height:l,wrapCount:n},t);if(!y)return{extent:e,srcExtent:c,pixelBlock:null};const I=u.storageInfo,w=a>0?I.pyramidBlockWidth:I.blockWidth,x=a>0?I.pyramidBlockHeight:I.blockHeight;let{x:S,y:b}=u.pixelSize;if(a>0){const{pyramidResolutions:V,pyramidScalingFactor:ee}=I;if(V!=null&&V[a-1])({x:S,y:b}=V[a-1]);else{const xe=ee**a;S*=xe,b*=xe}}const F=new L({x:S,y:b,spatialReference:u.spatialReference}),M=w===f&&x===l&&h.x%w===0&&h.y%x===0,_=new L({x:(e.xmax-e.xmin)/s,y:(e.ymax-e.ymin)/r,spatialReference:e.spatialReference}),P=!e.spatialReference.equals(this.rasterInfo.spatialReference),{datumTransformation:T}=t;if(!P&&M&&y.pixelBlocks.length===1&&w===s&&x===r&&o.x===_.x&&o.y===_.y)return{extent:e,srcExtent:c,srcTilePixelSize:F,pixelBlock:y.pixelBlocks[0]};const k=p&&we(c.spatialReference)!=null&&this._hasNoneOrGCSShiftTransform,O=t.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");O&&!this.rasterJobHandler&&await Ee();const D=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:e,srcBufferExtent:y.extent,pixelSize:_.toJSON(),datumTransformation:T,rasterTransform:d,hasWrapAround:n>0||k,isAdaptive:this.ioConfig.optimizeProjectionAccuracy!==!1,includeGCSGrid:O},t):ws({projectedExtent:e,srcBufferExtent:y.extent,pixelSize:_,datumTransformation:T,rasterTransform:d,hasWrapAround:n>0||k,isAdaptive:!1,includeGCSGrid:O});let A;const z=!t.requestRawData,H={rows:D.spacing[0],cols:D.spacing[1]},N=this._hasNoneOrGCSShiftTransform?this._getRasterTileAlignmentInfo(a,y.extent.xmin):void 0,{pixelBlocks:j,mosaicSize:B,isPartiallyFilled:U}=y;let X=null;if(this.rasterJobHandler)({pixelBlock:A,localNorthDirections:X}=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:j,srcMosaicSize:B,destDimension:z?{width:s,height:r}:null,coefs:z?D.coefficients:null,sampleSpacing:z?H:null,projectDirections:O,gcsGrid:O?D.gcsGrid:null,isUV:this.rasterInfo.dataType==="vector-uv",interpolation:t.interpolation,alignmentInfo:N,blockWidths:null},t));else{const V=_e(j,B,{alignmentInfo:N});z?A=ft(V,{width:s,height:r},D.coefficients,H,t.interpolation):A=V,O&&D.gcsGrid&&(X=fs({width:s,height:r},D.gcsGrid),A=hs(A,this.rasterInfo.dataType,X))}return t.requestRawData||O?{extent:e,srcExtent:c,srcTilePixelSize:F,pixelBlock:A,transformGrid:D,localNorthDirections:X,isPartiallyFilled:U}:{extent:e,srcExtent:c,srcTilePixelSize:F,pixelBlock:A}}async _fetchRawTiles(e,s,r,t){const{origin:n,blockBoundary:i}=this.rasterInfo.storageInfo,{blockWidth:a,blockHeight:o}=this.getBlockWidthHeight(e);let{x:c,y:f}=s,{width:l,height:h,wrapCount:u}=r;const d=this._getRasterTileAlignmentInfo(e,0);t.buffer&&(c-=t.buffer.cols,f-=t.buffer.rows,l+=t.buffer.cols*2,h+=t.buffer.rows*2);let m=0,p=0,y=0;u&&d!=null&&({worldColumnCountFromOrigin:p,originColumnOffset:y,rightPadding:m}=d,p*d.blockWidth-m>=c+l&&(m=0));const I=Math.floor(c/a),w=Math.floor(f/o),x=Math.floor((c+l+m-1)/a),S=Math.floor((f+h+m-1)/o),b=i[e];if(!b)return null;const{minRow:F,minCol:M,maxCol:_,maxRow:P}=b;if(u===0&&(S<F||x<M||w>P||I>_))return null;const T=new Array;let C=!1;const k=this.ioConfig.allowPartialFill==null?t.allowPartialFill:this.ioConfig.allowPartialFill;for(let B=w;B<=S;B++)for(let U=I;U<=x;U++){let X=U;if(!t.disableWrapAround&&u&&d!=null&&p<=U&&(X=U-p-y),B>=F&&X>=M&&P>=B&&_>=X){const V=this._fetchRawTile(e,B,X,t);k?T.push(new Promise(ee=>{V.then(xe=>ee(xe)).catch(()=>{C=!0,ee(null)})})):T.push(V)}else T.push(Promise.resolve(null))}if(T.length===0)return null;const O=await Promise.all(T),D={height:(S-w+1)*o,width:(x-I+1)*a},{spatialReference:A}=this.rasterInfo,z=this.getPyramidPixelSize(e),{x:H,y:N}=z;return{extent:new G({xmin:n.x+I*a*H,xmax:n.x+(x+1)*a*H,ymin:n.y-(S+1)*o*N,ymax:n.y-w*o*N,spatialReference:A}),pixelBlocks:O,mosaicSize:D,isPartiallyFilled:C}}_fetchRawTile(e,s,r,t){const n=this.rasterInfo.storageInfo.blockBoundary[e];if(!n)return Promise.resolve(null);const{minRow:i,minCol:a,maxCol:o,maxRow:c}=n;if(s<i||r<a||s>c||r>o)return Promise.resolve(null);const f=Ue(this.url,t.sliceId),l=`${e}/${s}/${r}`;let h=Ye(f,t.registryId,l);if(h==null){const u=new AbortController;h=this.fetchRawTile(e,s,r,{...t,signal:u.signal}),Xe(f,t.registryId,l,h,u),h.catch(()=>cs(f,t.registryId,l))}return t.signal&&yt(t,()=>{us(f,t.registryId,l)}),h}_computeMagDirValues(e){var f;const{bandCount:s,dataType:r}=this.rasterInfo;if(!(s===2&&r==="vector-magdir"||r==="vector-uv")||(e==null?void 0:e.length)!==2||!((f=e[0])!=null&&f.length))return null;const n=e[0].length;if(r==="vector-magdir"){const l=e[1].map(h=>(h+360)%360);return[e[0],l]}const[i,a]=e,o=[],c=[];for(let l=0;l<n;l++){const[h,u]=ds([i[l],a[l]]);o.push(h),c.push(u)}return[o,c]}_getRasterTileAlignmentInfo(e,s){return this._rasterTileAlighmentInfo==null&&(this._rasterTileAlighmentInfo=Ss(this.rasterInfo)),this._rasterTileAlighmentInfo.pyramidsInfo==null?null:{startX:s,halfWorldWidth:this._rasterTileAlighmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlighmentInfo.hasGCSSShiftTransform,...this._rasterTileAlighmentInfo.pyramidsInfo[e]}}_getSourceDataInfo(e,s,r,t={}){const n={datumTransformation:t.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0,ul:{x:0,y:0}};t.srcResolution&&(n.srcResolution=t.srcResolution,this._updateSourceDataInfo(e,n));const i=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:a,srcHeight:o,pyramidLevel:c}=n,f=a/s,l=o/r,h=c<i&&f*l>=16,u=c===i&&this._requireTooManySrcTiles(a,o,s,r);if(h||u||(a===0||o===0)){const m=new L({x:(e.xmax-e.xmin)/s,y:(e.ymax-e.ymin)/r,spatialReference:e.spatialReference});let p=Rs(m,this.rasterInfo.spatialReference,e,n.datumTransformation);const y=!p||t.srcResolution&&p.x+p.y<t.srcResolution.x+t.srcResolution.y;if(h&&t.srcResolution&&y){const I=Math.round(Math.log(Math.max(f,l))/Math.LN2)-1;if(i-c+3>=I){const w=2**I;p={x:t.srcResolution.x*w,y:t.srcResolution.y*w}}}p&&(n.srcResolution=p,this._updateSourceDataInfo(e,n))}return this._requireTooManySrcTiles(n.srcWidth,n.srcHeight,s,r)&&(n.srcWidth=0,n.srcHeight=0),n}_requireTooManySrcTiles(e,s,r,t){const{tileInfo:n}=this.rasterInfo.storageInfo,i=Math.ceil(e/n.size[0])*Math.ceil(s/n.size[1]),a=e/r,o=s/t;return i>=Os||a>Ze||o>Ze}_updateSourceDataInfo(e,s){s.srcWidth=0,s.srcHeight=0;const{rasterInfo:r}=this,t=r.spatialReference,{srcResolution:n,datumTransformation:i}=s,{pyramidLevel:a,pyramidResolution:o,excessiveReading:c}=Qe(n,r,this.ioConfig.sampling);if(c)return;let f=s.srcExtent||Re(e,t,i);if(f==null)return;const l=r.transform;l&&(f=l.inverseTransform(f)),s.srcExtent=f;const{x:h,y:u}=r.storageInfo.origin,d=Math.floor((f.xmin-h)/o.x+.1),m=Math.floor((u-f.ymax)/o.y+.1),p=Math.floor((f.xmax-h)/o.x-.1),y=Math.floor((u-f.ymin)/o.y-.1),I=f.width<o.x*.1?0:p-d+1,w=f.height<o.y*.1?0:y-m+1;s.pyramidLevel=a,s.pyramidResolution=o,s.srcWidth=I,s.srcHeight=w,s.ul={x:d,y:m}}_getRequestOptionsWithSliceId(e){return this.rasterInfo.multidimensionalInfo!=null&&e.sliceId==null&&(e={...e,sliceId:this.getSliceIndex(e.multidimensionalDefinition)}),e}_processIdentifyResult(e,s){const{srcLocation:r,position:t,pyramidLevel:n,useTransposedTile:i}=s,a=e.pixels[0].length/e.width/e.height;if(!(!e.mask||e.mask[t]))return{location:r,value:null};const{multidimensionalInfo:c}=this.rasterInfo;if(c==null||!i){const w=e.pixels.map(b=>b[t]),x={location:r,value:w,pyramidLevel:n},S=this._computeMagDirValues(w.map(b=>[b]));return S!=null&&S.length&&(x.magdirValue=S.map(b=>b[0])),x}let f=e.pixels.map(w=>w.slice(t*a,t*a+a)),l=this._computeMagDirValues(f);const{requestSomeSlices:h,identifyOptions:u}=s;let d=qt(c,u.transposedVariableName);if(h){const w=Vt(d,u.multidimensionalDefinition,u.timeExtent);f=f.map(x=>w.map(S=>x[S])),l=l==null?void 0:l.map(x=>w.map(S=>x[S])),d=w.map(x=>d[x])}const m=e.noDataValues||this.rasterInfo.noDataValue,p={pixels:f,pixelType:e.pixelType};let y;m!=null&&(ms(p,m),y=p.mask);const I=d.map((w,x)=>{const S={value:(y==null?void 0:y[x])===0?null:f.map(b=>b[x]),multidimensionalDefinition:w.multidimensionalDefinition.map(b=>new ut({...b,isSlice:!0}))};return l!=null&&l.length&&(S.magdirValue=[l[0][x],l[1][x]]),S});return{location:r,value:null,dataSeries:I,pyramidLevel:n}}};R([v()],q.prototype,"_rasterTileAlighmentInfo",void 0);R([v({readOnly:!0})],q.prototype,"_isGlobalWrappableSource",null);R([v({readOnly:!0})],q.prototype,"_hasNoneOrGCSShiftTransform",null);R([v()],q.prototype,"rasterJobHandler",null);R([v(lt)],q.prototype,"url",null);R([v({type:String,json:{write:!0}})],q.prototype,"datasetName",void 0);R([v({type:String,json:{write:!0}})],q.prototype,"datasetFormat",void 0);R([v()],q.prototype,"hasUniqueSourceStorageInfo",void 0);R([v()],q.prototype,"rasterInfo",void 0);R([v()],q.prototype,"ioConfig",void 0);R([v()],q.prototype,"sourceJSON",void 0);q=R([Q("esri.layers.support.rasterDatasets.BaseRaster")],q);const ae=q;let re=class extends ae{constructor(){super(...arguments),this.datasetFormat="Function",this.tileType="Raster",this.rasterFunction=null}async open(e){var c,f,l;await this.init();const{rasterFunction:s}=this;(f=(c=this.primaryRasters)==null?void 0:c.rasters)!=null&&f.length?s.sourceRasters=this.primaryRasters.rasters:(this.primaryRasters=s.getPrimaryRasters(),this.rasterJobHandler&&((l=this.primaryRasters.rasters)==null||l.forEach(h=>h.rasterJobHandler=this.rasterJobHandler)));const{rasters:r,rasterIds:t}=this.primaryRasters,n=r.map(h=>h.rasterInfo?void 0:h.open(e));await Promise.all(n);const i=r.map(({rasterInfo:h})=>h),a=s.bind({rasterInfos:i,rasterIds:t});if(!a.success||i.length===0)throw new E("raster-function:open",`cannot bind the function: ${a.error??""}`);await this.syncJobHandler();const o=i[0];this.hasUniqueSourceStorageInfo=i.length===1||i.slice(1).every(h=>this._hasSameStorageInfo(h,o)),this.set("sourceJSON",r[0].sourceJSON),this.set("rasterInfo",s.rasterInfo)}async syncJobHandler(){var e;return(e=this.rasterJobHandler)==null?void 0:e.updateRasterFunction(this.rasterFunction)}async fetchPixels(e,s,r,t={}){var w,x;const{rasters:n,rasterIds:i}=this.primaryRasters;let a=!1;const{interpolation:o}=t,c=(w=this.rasterFunction.flatWebGLFunctionChain)==null?void 0:w.hasSurfaceFunction;!t.requestRawData&&o!=="bilinear"&&c&&(a=n.length===1&&!t.skipRasterFunction,t={...t,interpolation:"bilinear",requestRawData:a});const f=n.map(S=>S.fetchPixels(e,s,r,t)),l=await Promise.all(f),h=l.map(S=>S.pixelBlock),u=a||t.requestRawData?l.map(S=>S.srcTilePixelSize):null;if(t.skipRasterFunction||h.every(S=>S==null))return l[0];const d=((x=l.find(S=>S.pixelBlock!=null))==null?void 0:x.extent)??e,m=this.rasterJobHandler?await this.rasterJobHandler.process({extent:d,primaryPixelBlocks:h,primaryPixelSizes:u,primaryRasterIds:i}):this.rasterFunction.process({extent:d,primaryPixelBlocks:h,primaryPixelSizes:u,primaryRasterIds:i}),{transformGrid:p}=l[0];if(!a||m==null||p==null)return{...l[0],pixelBlock:m};const y={rows:p.spacing[0],cols:p.spacing[1]};let I;return this.rasterJobHandler?I=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:[m],srcMosaicSize:{width:m.width,height:m.height},destDimension:{width:s,height:r},coefs:p.coefficients,sampleSpacing:y,projectDirections:!1,gcsGrid:null,isUV:!1,interpolation:o,alignmentInfo:void 0,blockWidths:null},t)).pixelBlock:I=ft(m,{width:s,height:r},p.coefficients,y,o),{extent:e,srcExtent:l[0].srcExtent,pixelBlock:I}}_hasSameStorageInfo(e,s){const{storageInfo:r,pixelSize:t,spatialReference:n,extent:i}=e,{storageInfo:a,pixelSize:o,spatialReference:c,extent:f}=s;return t.x===o.x&&t.y===o.y&&n.equals(c)&&i.equals(f)&&r.blockHeight===a.blockHeight&&r.blockWidth===a.blockWidth&&r.maximumPyramidLevel===a.maximumPyramidLevel}};R([v({type:String,json:{write:!0}})],re.prototype,"datasetFormat",void 0);R([v()],re.prototype,"tileType",void 0);R([v()],re.prototype,"rasterFunction",void 0);R([v()],re.prototype,"primaryRasters",void 0);re=R([Q("esri.layers.support.rasterDatasets.FunctionRaster")],re);const Be=re;function Js(g,e){if(g.spatialReference.equals(e))return g;const s=Le(g.spatialReference),r=Le(e);if(s===r)return g;const t=s/r;return{x:g.x*t,y:g.y*t}}async function Hs(g,e,s){if(s.type==="extent")return Ns(g,e,s);const{width:r,height:t}=g,n=r*t,i=new Uint8Array(n),{contains:a,intersects:o}=await xt(()=>import("./index-b4b3ae7d.js").then(c=>c.jm),["assets/index-b4b3ae7d.js","assets/index-d832a396.css"]);return o(e,s)?s.type==="polyline"?Ls(g,e,s):a(s,e)?g:zs(g,e,s):new te({pixelType:g.pixelType,width:r,height:t,mask:i,maskIsAlpha:!1,pixels:[...g.pixels]})}function zs(g,e,s){if(!g)return g;const{width:r,height:t}=g,n=e.width/r,i=e.height/t,{xmin:a,ymax:o}=e;let c;if(s.type==="extent"){const p=(s.xmin-a)/n,y=(s.xmax-a)/n,I=(o-s.ymax)/i,w=(o-s.ymin)/i;c=[[[p,I],[p,w],[y,w],[y,I],[p,I]]]}else c=s.rings.map(p=>p.map(([y,I])=>[(y-a)/n,(o-I)/i]));const f=document.createElement("canvas");f.width=r,f.height=t;const l=f.getContext("2d");l.fillStyle="#f00",c.forEach(p=>{l.beginPath(),l.moveTo(p[0][0],p[0][1]);for(let y=0;y<p.length;y++)l.lineTo(p[y][0],p[y][1]);l.closePath(),l.fill()});const h=l.getImageData(0,0,r,t).data,u=g.mask,d=r*t,m=new Uint8Array(d);for(let p=0;p<d;p++)(!u||u[p])&&(m[p]=h[p*4+3]>127?255:0);return new te({pixelType:g.pixelType,width:r,height:t,mask:m,maskIsAlpha:!1,pixels:[...g.pixels]})}function Ns(g,e,s){const{width:r,height:t}=g,n=new Uint8Array(r*t),i=e.width/r,a=e.height/t;if(s.width/i<.5||s.height/a<.5)return new te({pixelType:g.pixelType,width:r,height:t,mask:n,pixels:[...g.pixels]});const{xmin:o,xmax:c,ymin:f,ymax:l}=e,{xmin:h,xmax:u,ymin:d,ymax:m}=s,p=Math.max(o,h),y=Math.min(c,u),I=Math.max(f,d),w=Math.min(l,m),x=i*.5,S=a*.5;if(y-p<x||w-I<S||y<o+x||p>c-x||I>l-S||w<f+S)return new te({pixelType:g.pixelType,width:r,height:t,mask:n,pixels:[...g.pixels]});const b=Math.max(0,(p-o)/i),F=Math.min(r,Math.max(0,(y-o)/i)),M=Math.max(0,(l-w)/a),_=Math.min(t,Math.max(0,(l-I)/a)),P=Math.round(b),T=Math.round(F)-1,C=Math.round(M),k=Math.round(_)-1,O=P===T&&b%1>.5&&F%1<.5,D=C===k&&M%1>.5&&_%1<.5;if(O||D)return new te({pixelType:g.pixelType,width:r,height:t,mask:n,pixels:[...g.pixels]});if(P===0&&C===0&&T===r&&k===t)return g;const A=g.mask;for(let z=C;z<=k;z++)for(let H=P;H<=T;H++){const N=z*r+H;n[N]=A?A[N]:255}return new te({pixelType:g.pixelType,width:r,height:t,mask:n,pixels:[...g.pixels]})}function Ls(g,e,s){const{width:r,height:t}=g,n=new Uint8Array(r*t),i=e.width/r,a=e.height/t,{xmin:o,ymax:c}=e,{paths:f}=s,l=g.mask;for(let h=0;h<f.length;h++){const u=f[h];for(let d=0;d<u.length-1;d++){const[m,p]=u[d],[y,I]=u[d+1];let w=Math.floor((c-p)/a),x=Math.floor((c-I)/a);if(x<w){const b=w;w=x,x=b}w=Math.max(0,w),x=Math.min(t-1,x);const S=(y-m)/(I-p);for(let b=w;b<=x;b++){const F=b===w?Math.max(p,I):(t+1-b)*a,M=b===x?Math.min(p,I):F-a;let _=Math.floor(I===p?(m-o)/i:(S*(F-p)+m-o)/i),P=Math.floor(I===p?(y-o)/i:(S*(M-p)+m-o)/i);if(P<_){const C=_;_=P,P=C}const T=b*r;_=Math.max(0,_),P=Math.min(r-1,P);for(let C=T+_;C<=T+P;C++)n[C]=l?l[C]:255}}}return new te({pixelType:g.pixelType,width:r,height:t,mask:n,pixels:[...g.pixels]})}function Ws(g,e,s,r=!0){const{spatialReference:t}=g,{x:n,y:i}=Js(s,t);let a,o,c;const f=e.type==="extent"?e:e.extent;let{xmin:l,xmax:h,ymax:u,ymin:d}=f;const{xmin:m,ymax:p}=g.extent;return r?(l=m+(l>m?n*Math.round((l-m)/n):0),u=p-(u<p?i*Math.round((p-u)/i):0),h=m+(h>m?n*Math.round((h-m)/n):0),d=p-(d<p?i*Math.round((p-d)/i):0),a=new G({xmin:l,ymax:u,xmax:h,ymin:d,spatialReference:t}),o=Math.round(a.width/n),c=Math.round(a.height/i)):(o=Math.floor((h-l)/n+.8),c=Math.floor((u-d)/i+.8),l=m+(l>m?n*Math.floor((l-m)/n+.1):0),u=p-(u<p?i*Math.floor((p-u)/i+.1):0),h=l+o*n,d=u-c*i,a=new G({xmin:l,ymax:u,xmax:h,ymin:d,spatialReference:t})),{extent:a,width:o,height:c}}const et=Oe.getLogger("esri.layers.mixins.ImageryTileMixin"),js=g=>{let e=class extends g{constructor(...t){var n,i;super(...t),this._isConstructedFromFunctionRaster=!1,this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.interpolation="nearest",this.multidimensionalSubset=null,this.raster=null,this.rasterFunction=null,this.rasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.symbolizer=null,this._isConstructedFromFunctionRaster=((i=(n=t[0])==null?void 0:n.raster)==null?void 0:i.datasetFormat)==="Function"}get fullExtent(){var t;return(t=this.rasterInfo)==null?void 0:t.extent}set multidimensionalDefinition(t){this._set("multidimensionalDefinition",t),this.updateRenderer()}get tileInfo(){var t;return(t=this.rasterInfo)==null?void 0:t.storageInfo.tileInfo}set url(t){this._set("url",nt(t,et))}set renderer(t){this._set("renderer",t),this.updateRenderer()}async convertVectorFieldData(t,n){if(t==null||!this.rasterInfo)return null;const i=this._rasterJobHandler.instance,a=this.rasterInfo.dataType;return i?i.convertVectorFieldData({pixelBlock:t,dataType:a},n):ps(t,a)}async computeStatisticsHistograms(t,n){t=Je(Dt,t).clone();const{rasterInfo:i}=this,{geometry:a}=t;if(a==null)throw new E("imagery-tile-mixin:compute-statistics-histograms","geometry must be specified");let o=a;const{spatialReference:c}=i;a.spatialReference.equals(c)||(await Ee(),o=a.type==="extent"?Re(a,c):bs(a,c));const f=t.pixelSize??new L({x:i.pixelSize.x,y:i.pixelSize.y,spatialReference:c}),{extent:l,width:h,height:u}=Ws(i,o,f),d=await this.fetchPixels(l,h,u,{...n,interpolation:"nearest"});if(d.pixelBlock==null)throw new E("imagery-tile-mixin:compute-statistics-histograms","failed to fetch pixels");const m=await Hs(d.pixelBlock,l,o),p=this._rasterJobHandler.instance;return p?p.computeStatisticsHistograms({pixelBlock:m},n):Kt(m)}async createFlowMesh(t,n){const i=this._rasterJobHandler.instance;return i?i.createFlowMesh(t,n):ys(t.meshType,t.simulationSettings,t.flowData,n.signal!=null?n.signal:new AbortController().signal)}normalizeRasterFetchOptions(t){var o,c;const{multidimensionalInfo:n}=this.rasterInfo??{};if(n==null)return t;let i=t.multidimensionalDefinition||this.multidimensionalDefinition;(i==null||!i.length)&&(i=$e(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset}));const a=t.timeExtent||this.timeExtent;if(i!=null&&a!=null&&(a.start!=null||a.end!=null)){i=i.map(I=>I.clone());const f=(c=(o=n.variables.find(({name:I})=>I===i[0].variableName))==null?void 0:o.dimensions)==null?void 0:c.find(({name:I})=>I==="StdTime"),l=i.find(({dimensionName:I})=>I==="StdTime");if(!(f&&l))return{...t,multidimensionalDefinition:null};const{start:h,end:u}=a,d=h==null?null:h.getTime(),m=u==null?null:u.getTime(),p=d??m,y=m??d;if(f.values!=null){const w=f.values.filter(x=>{if(Array.isArray(x)){if(p===y)return x[0]<=p&&x[1]>=p;const S=x[0]<=p&&x[1]>p||x[0]<y&&x[1]>=y,b=x[0]>=p&&x[1]<=y||x[0]<p&&x[1]>y;return S||b}return p===y?x===p:x>=p&&x<=y});if(!w.length)i=null;else{const x=w.sort((S,b)=>{const F=Array.isArray(S)?S[0]:S,M=Array.isArray(S)?S[1]:S,_=Array.isArray(b)?b[0]:b,P=Array.isArray(b)?b[1]:b;if(p===y)return F-_;const T=Math.abs(M-y),C=Math.abs(P-y);return T-C})[0];l.values=[x]}}else if(f.hasRegularIntervals&&f.extent){const[I,w]=f.extent;p>w||y<I?i=null:l.values=p===y?[p]:[Math.max(I,p),Math.min(w,y)]}}return i!=null&&Ut(i,this.multidimensionalSubset)?{...t,multidimensionalDefinition:null}:{...t,multidimensionalDefinition:i}}async updateRasterFunction(){var l,h;if(this.type!=="imagery-tile"||!this.rasterFunction&&!this._cachedRasterFunctionJson||JSON.stringify(this.rasterFunction)===JSON.stringify(this._cachedRasterFunctionJson))return;if(this._isConstructedFromFunctionRaster&&this.raster.datasetFormat==="Function"){const u=this.raster.rasterFunction.toJSON();!this.rasterFunction&&u&&this._set("rasterFunction",De.fromJSON(u)),this._cachedRasterFunctionJson=(l=this.rasterFunction)==null?void 0:l.toJSON();return}let t=this.raster,n,i=!1;t.datasetFormat==="Function"?(n=t.primaryRasters.rasters,t=n[0],i=!0):n=[t];const{rasterFunction:a}=this;if(!a)this.raster=t,this._cachedRasterFunctionJson=null;else{const u={raster:t};n.length>1&&n.forEach(p=>u[p.url]=p);const d=Ae(a.rasterFunctionDefinition??a.toJSON(),u),m=new Be({rasterFunction:d});m.rasterJobHandler=this._rasterJobHandler.instance,await m.open(),this._cachedRasterFunctionJson=(h=this.rasterFunction)==null?void 0:h.toJSON(),this.raster=m}if(this._cachedRendererJson=null,!(i||a))return;const{bandIds:o}=this,{bandCount:c}=this.raster.rasterInfo,f=o!=null&&o.length?o.some(u=>u>=c):c>=3;o&&(f||this.renderer.type!=="raster-stretch")&&this._set("bandIds",null),this._configDefaultRenderer("auto")}async updateRenderer(){const{loaded:t,symbolizer:n}=this;if(!t||!n)return;const{rasterInfo:i}=this.raster,a=qe(i,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),o=a==null?void 0:a.name,c=We({...this.renderer.toJSON(),variableName:o});if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(c))return;const f=this._rasterJobHandler.instance;f&&(n.rasterInfo=je(i,o),n.rendererJSON=c,n.bind(),await f.updateSymbolizer(n),this._cachedRendererJson=c)}async applyRenderer(t,n){const i=t&&t.pixelBlock;if(!(i!=null&&i.pixels&&i.pixels.length>0))return null;await this.updateRenderer();let a;const o=this._rasterJobHandler.instance,c=this.bandIds??[];return o?a=await o.symbolize({...t,simpleStretchParams:n,bandIds:c}):a=this.symbolizer.symbolize({...t,simpleStretchParams:n,bandIds:c}),a}getTileUrl(t,n,i){return this.raster.datasetFormat==="RasterTileServer"?`${this.url}/tile/${t}/${n}/${i}`:""}getCompatibleTileInfo(t,n,i=!1){if(!this.loaded||n==null)return null;if(i&&t.equals(this.spatialReference))return this.tileInfo;const a=It(t);return he.create({size:256,spatialReference:t,origin:a?{x:a.origin[0],y:a.origin[1]}:{x:n.xmin,y:n.ymax}})}getCompatibleFullExtent(t){return this.loaded?this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(t)?this._compatibleFullExtent:(this._compatibleFullExtent=this.raster.computeExtent(t),this._compatibleFullExtent):null}async fetchTile(t,n,i,a={}){if(s(this),a.requestAsImageElement){const c=this.getTileUrl(t,n,i);return rt(c,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:a.signal}).then(f=>f.data)}const{rasterInfo:o}=this;if(o.multidimensionalInfo!=null&&(a=this.normalizeRasterFetchOptions(a),a.multidimensionalDefinition==null)){const c=a.tileInfo||o.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(t,n,i,c),pixelBlock:null}}return await this._initJobHandler(),await this.updateRasterFunction(),this.renderer.type==="raster-shaded-relief"&&(a={...a,buffer:{cols:1,rows:1}}),this.raster.fetchTile(t,n,i,a)}async fetchPixels(t,n,i,a={}){return this.rasterInfo.multidimensionalInfo!=null&&(a=this.normalizeRasterFetchOptions(a),a.multidimensionalDefinition==null)?{extent:t,pixelBlock:null}:(await this._initJobHandler(),await this.updateRasterFunction(),n=Math.round(n),i=Math.round(i),this.raster.fetchPixels(t,n,i,a))}async identify(t,n={}){var c;const{raster:i,rasterInfo:a}=this;if(a.multidimensionalInfo!=null&&!(a.hasMultidimensionalTranspose&&!!(ct(n.multidimensionalDefinition)||n.transposedVariableName||n.timeExtent))&&(n=this.normalizeRasterFetchOptions(n),n.multidimensionalDefinition==null))return{location:t,value:null};const o=(c=this.multidimensionalSubset)==null?void 0:c.areaOfInterest;if(o&&!o.contains(t))throw new E("imagery-tile-mixin:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");return i.identify(t,n)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){var o,c,f;const t=(o=this.rasterInfo)==null?void 0:o.multidimensionalInfo;if(t==null||((c=this.rasterInfo)==null?void 0:c.dataType)!=="standard-time")return!1;const n=this.multidimensionalDefinition,i=(f=n==null?void 0:n[0])==null?void 0:f.variableName;return t.variables.some(l=>l.name===i&&(!(n!=null&&n[0].dimensionName)||l.dimensions.some(h=>h.name==="StdTime")))}getStandardTimeValue(t){return new Date((t-25569)*24*3600*1e3).toString()}getMultidimensionalSubsetVariables(t){var i;const n=t??((i=this.rasterInfo)==null?void 0:i.multidimensionalInfo);return Yt(this.multidimensionalSubset,n)}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=$e(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset})),this._configDefaultRenderer()}_initJobHandler(){if(this._rasterJobHandler.connectionPromise!=null)return this._rasterJobHandler.connectionPromise;const t=new Bt;return this._rasterJobHandler.connectionPromise=t.initialize().then(()=>{s(this),this._rasterJobHandler.instance=t,this.raster.rasterJobHandler=t,this.renderer&&this.updateRenderer(),this.raster.datasetFormat==="Function"&&this.raster.syncJobHandler()}).catch(()=>{}),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null,this.raster&&(this.raster.rasterJobHandler=null)}_configDefaultInterpolation(){var t;if(this.interpolation==null){s(this);const{raster:n}=this,i=Et(n.rasterInfo,n.tileType,(t=this.sourceJSON)==null?void 0:t.defaultResamplingMethod);this._set("interpolation",i)}}_configDefaultRenderer(t="no"){var l,h;s(this);const{rasterInfo:n}=this.raster;!this.bandIds&&n.bandCount>1&&(this.bandIds=At(n));const i=qe(n,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),a=i==null?void 0:i.name;if(!this.renderer||t==="override"){const u=Ge(n,{bandIds:this.bandIds,variableName:a}),d=n.statistics,m=d&&d.length>0?d[0]:null,p=(m==null?void 0:m.max)??0,y=(m==null?void 0:m.min)??0;this.raster.datasetFormat==="WCSServer"&&u.type==="raster-stretch"&&(p>1e24||y<-1e24)&&(u.dynamicRangeAdjustment=!0,u.statistics=null,u.stretchType==="none"&&(u.stretchType="min-max")),this.renderer=u}const o=We({...this.renderer.toJSON(),variableName:a}),c=je(n,a);this.symbolizer?(this.symbolizer.rendererJSON=o,this.symbolizer.rasterInfo=c):this.symbolizer=new Qt({rendererJSON:o,rasterInfo:c});const f=this.symbolizer.bind();if(!f.success)et.warn("imagery-tile-mixin",f.error||"The given renderer is not supported by the layer."),t==="auto"&&this._configDefaultRenderer("override");else if(t==="auto"){const{colormap:u}=this.raster.rasterInfo,d=this.renderer;if(u!=null)if(d.type!=="raster-colormap")this._configDefaultRenderer("override");else{const m=Ge(this.raster.rasterInfo);JSON.stringify(m)!==JSON.stringify(d)&&this._configDefaultRenderer("override")}else if(d.type==="raster-stretch"){const m=(l=this.bandIds)==null?void 0:l.length,p=(h=d.statistics)==null?void 0:h.length;!d.dynamicRangeAdjustment&&p&&m&&p!==m&&this._configDefaultRenderer("override")}}}};R([v()],e.prototype,"_cachedRendererJson",void 0),R([v()],e.prototype,"_cachedRasterFunctionJson",void 0),R([v()],e.prototype,"_compatibleFullExtent",void 0),R([v()],e.prototype,"_isConstructedFromFunctionRaster",void 0),R([v()],e.prototype,"_rasterJobHandler",void 0),R([v()],e.prototype,"bandIds",void 0),R([v({json:{origins:{service:{read:{source:"copyrightText"}}}}})],e.prototype,"copyright",void 0),R([v({json:{read:!1}})],e.prototype,"fullExtent",null),R([v()],e.prototype,"interpolation",void 0),R([v()],e.prototype,"ioConfig",void 0),R([v({type:[ut],json:{write:!0}})],e.prototype,"multidimensionalDefinition",null),R([v({type:kt,json:{write:!0}})],e.prototype,"multidimensionalSubset",void 0),R([v()],e.prototype,"raster",void 0),R([v({type:De})],e.prototype,"rasterFunction",void 0),R([v()],e.prototype,"rasterInfo",void 0),R([v()],e.prototype,"sourceJSON",void 0),R([v({readOnly:!0,type:W,json:{read:!1}})],e.prototype,"spatialReference",void 0),R([v({json:{read:!1}})],e.prototype,"tileInfo",null),R([v(lt)],e.prototype,"url",null),R([v({types:ot})],e.prototype,"renderer",null),R([v()],e.prototype,"symbolizer",void 0),e=R([Q("esri.layers.ImageryTileMixin")],e);function s(r){if(!r.raster||!r.rasterInfo)throw new E("imagery-tile","no raster")}return e};function Gs(g){const e=g.fields,s=g.records,r=e.some(c=>c.name.toLowerCase()==="oid")?"OBJECTID":"OID",t=[{name:r,type:"esriFieldTypeOID",alias:"OID"}].concat(e.map(c=>({name:c.name,type:"esriFieldType"+c.typeName,alias:c.name}))),n=t.map(c=>c.name),i=[];let a=0,o=0;return s.forEach(c=>{const f={};for(f[r]=a++,o=1;o<n.length;o++)f[n[o]]=c[o-1];i.push({attributes:f})}),{displayFieldName:"",fields:t,features:i}}class dt{static get supportedVersions(){return[5]}static parse(e){const s=new DataView(e),r=s.getUint8(0)&3;if(r!==3)return{header:{version:r},recordSet:null};const t=s.getUint32(4,!0),n=s.getUint16(8,!0),i=s.getUint16(10,!0),a={version:r,recordCount:t,headerByteCount:n,recordByteCount:i};let o=32;const c=[],f=[];let l;if(r===3){for(;s.getUint8(o)!==13;)l=String.fromCharCode(s.getUint8(o+11)).trim(),c.push({name:Ve(new Uint8Array(e,o,11)),type:l,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(l)],length:s.getUint8(o+16)}),o+=32;if(o+=1,c.length>0)for(;f.length<t&&e.byteLength-o>i;){const u=[];s.getUint8(o)===32?(o+=1,c.forEach(d=>{if(d.type==="C")u.push(Ve(new Uint8Array(e,o,d.length)).trim());else if(d.type==="N")u.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,o,d.length)).trim(),10));else if(d.type==="F")u.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,o,d.length)).trim()));else if(d.type==="D"){const m=String.fromCharCode.apply(null,new Uint8Array(e,o,d.length)).trim();u.push(new Date(parseInt(m.substring(0,4),10),parseInt(m.substring(4,6),10)-1,parseInt(m.substring(6,8),10)))}o+=d.length}),f.push(u)):o+=i}}const h=Gs({fields:c,records:f});return{header:a,fields:c,records:f,recordSet:h}}}const oe=new Map;oe.set("int16","esriFieldTypeSmallInteger");oe.set("int32","esriFieldTypeInteger");oe.set("int64","esriFieldTypeInteger");oe.set("float32","esriFieldTypeSingle");oe.set("float64","esriFieldTypeDouble");oe.set("text","esriFieldTypeString");const tt=8;let de=class extends ae{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(e){await this.init();const{data:s}=await this.request(this.url+"/conf.json",{signal:e==null?void 0:e.signal});if(!this._validateHeader(s))throw new E("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:r,rasterInfo:t}=this._parseHeader(s);if(t.dataType==="thematic"){const n=await this._fetchAuxiliaryInformation();t.attributeTable=n}this._set("storageInfo",r),this._set("rasterInfo",t),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(e,s,r,t={}){const{transposeInfo:n}=this.rasterInfo.storageInfo,{transposedVariableName:i}=t,a=!!(n&&i),o=a?0:this.rasterInfo.storageInfo.maximumPyramidLevel-e;if(o<0)return null;const c=this._buildCacheFilePath(o,s,r,t.multidimensionalDefinition,i),f=this._getIndexRecordFromBundle(s,r,a),l=await this.request(c,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:t.signal});if(!l)return null;const h=new Uint8Array(l.data),u=this._getTileEndAndContentType(h,f);if(u.recordSize===0)return null;const d=await this.request(c,{range:{from:u.position,to:u.position+u.recordSize},responseType:"array-buffer",signal:t.signal});if(!d)return null;const[m,p]=this._getTileSize(a);return this.decodePixelBlock(d.data,{width:m,height:p,planes:null,pixelType:null,returnInterleaved:a})}_validateHeader(e){const s=["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"];return e&&e.type==="RasterInfo"&&!s.some(r=>!e[r])}_parseHeader(e){var j;const s=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][e.pixelType],{bandCount:r,histograms:t,colormap:n,blockWidth:i,blockHeight:a,firstPyramidLevel:o,maximumPyramidLevel:c}=e,f=e.statistics&&e.statistics.map(B=>({min:B.min,max:B.max,avg:B.mean,stddev:B.standardDeviation,median:B.median,mode:B.mode})),l=e.extent.spatialReference,h=(j=e.geodataXform)==null?void 0:j.spatialReference,u=new W(l!=null&&l.wkid||l!=null&&l.wkt?l:h);let d=new G({xmin:e.extent.xmin,ymin:e.extent.ymin,xmax:e.extent.xmax,ymax:e.extent.ymax,spatialReference:u});const m=new L({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:u}),p=Math.round((d.xmax-d.xmin)/m.x),y=Math.round((d.ymax-d.ymin)/m.y),I=this._parseTransform(e.geodataXform),w=I?d:null;I&&(d=I.forwardTransform(d),m.x=(d.xmax-d.xmin)/p,m.y=(d.ymax-d.ymin)/y);const x=e.properties??{},S=e.format.toLowerCase().replace("cache/",""),b=new L(e.origin.x,e.origin.y,u);let F,M,_,P;if(n&&n.colors)for(F=[],M=0;M<n.colors.length;M++)_=n.colors[M],P=n.values?n.values[M]:M,F.push([P,_&255,_<<16>>>24,_<<8>>>24,_>>>24]);const T=e.LODInfos,C=[];for(M=0;M<T.levels.length;M++)C.push(new it({level:T.levels[M],resolution:T.resolutions[M],scale:96/.0254*T.resolutions[M]}));const k=new he({dpi:96,lods:C,format:S,origin:b,size:[i,a],spatialReference:u}),O={recordSize:tt,packetSize:e.packetSize,headerSize:e.packetSize*e.packetSize*tt+64},D=[{maxCol:Math.ceil(p/i)-1,maxRow:Math.ceil(y/a)-1,minCol:0,minRow:0}];let A=2;if(c>0)for(M=0;M<c;M++)D.push({maxCol:Math.ceil(p/A/i)-1,maxRow:Math.ceil(y/A/a)-1,minCol:0,minRow:0}),A*=2;const z=e.mdInfo;let H=null;if(z&&x._yxs){const B=x._yxs;H={packetSize:B.PacketSize,tileSize:[B.TileXSize,B.TileYSize]}}const N=new ge({width:p,height:y,pixelType:s,bandCount:r,extent:d,nativeExtent:w,transform:I,spatialReference:u,pixelSize:m,keyProperties:x,statistics:f,histograms:t,multidimensionalInfo:z,colormap:F,storageInfo:new ye({blockWidth:i,blockHeight:a,pyramidBlockWidth:i,pyramidBlockHeight:a,origin:b,tileInfo:k,transposeInfo:H,firstPyramidLevel:o,maximumPyramidLevel:c,blockBoundary:D})});return{storageInfo:O,rasterInfo:N}}_parseTransform(e){var r,t;if(!Ts(e))throw new E("cloudraster:open","the data contains unsupported geodata transform types");const s=vs(e);if(s.type==="identity")return null;if(!(s.type==="polynomial"&&((r=s.forwardCoefficients)!=null&&r.length)&&((t=s.inverseCoefficients)!=null&&t.length)))throw new E("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return s}async _fetchAuxiliaryInformation(e){const s=this.request(this.url+"/conf.vat.json",{signal:e}).then(i=>i.data).catch(()=>null),r=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:e}).then(i=>i.data).catch(()=>null),t=await Promise.all([s,r]);let n;if(t[0]){let i=t[0].fields;const a=t[0].values;if(i&&a){i=i.map(c=>({type:c.name==="OID"?"esriFieldTypeOID":oe.get(c.type),name:c.name,alias:c.alias||c.name}));const o=a.map(c=>({attributes:c}));i&&a&&(n={fields:i,features:o})}}return!n&&t[1]&&(n=dt.parse(t[1]).recordSet),ht.fromJSON(n)}_buildCacheFilePath(e,s,r,t,n){const i=this._getPackageSize(!!n),a=Math.floor(s/i)*i,o=Math.floor(r/i)*i,c="R"+this._toHexString4(a)+"C"+this._toHexString4(o);let f="L";e>=10?f+=e.toString():f+="0"+e.toString();const{multidimensionalInfo:l}=this.rasterInfo,h=t==null?void 0:t[0];if(l==null||!h)return`${this.url}/_alllayers/${f}/${c}.bundle`;let u="_yxs";if(!n){u=l.variables.find(I=>I.name===h.variableName).dimensions[0].values.indexOf(h.values[0]).toString(16);const y=4-u.length;for(let I=0;I<y;I++)u="0"+u;u="S"+u}const d=this._getVariableFolderName(n||h.variableName);return`${this.url}/_alllayers/${d}/${u}/${f}/${c}.bundle`}_getPackageSize(e=!1){const{transposeInfo:s}=this.rasterInfo.storageInfo;return e&&s!=null?s.packetSize??0:this.storageInfo.packetSize}_getTileSize(e=!1){const{storageInfo:s}=this.rasterInfo,{transposeInfo:r}=s;return e&&r!=null?r.tileSize:s.tileInfo.size}_getVariableFolderName(e){return e=e.trim(),e===""?"_v":e.replace(/[\{|\}\-]/g,"_").replace("\\*","_v")}_getIndexRecordFromBundle(e,s,r=!1){const t=this._getPackageSize(r),n=e%t,i=s%t,a=t*n+i;if(a<0)throw new Error("Invalid level / row / col");return 20+a*this.storageInfo.recordSize+44}_getTileEndAndContentType(e,s){const r=e.subarray(s,s+8);let t=0,n;for(n=0;n<5;n++)t=t|(r[n]&255)<<8*n;const i=t&0xffffffffff;for(t=0,n=5;n<8;n++)t=t|(r[n]&255)<<8*(n-5);const a=t&0xffffffffff;return{position:i,recordSize:a}}_toHexString4(e){let s=e.toString(16);if(s.length!==4){let r=4-s.length;for(;r-- >0;)s="0"+s}return s}};R([v({readOnly:!0})],de.prototype,"storageInfo",void 0);R([v({type:String,json:{write:!0}})],de.prototype,"datasetFormat",void 0);de=R([Q("esri.layers.support.rasterDatasets.CloudRaster")],de);const $s=de;let me=class extends ae{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.data=null}async open(e){await this.init();const s=this.data,{pixelBlock:r,statistics:t,histograms:n,name:i,keyProperties:a,nativeExtent:o,transform:c}=this.data,{width:f,height:l,pixelType:h}=r,u=s.extent??new G({xmin:-.5,ymin:.5,xmax:f-.5,ymax:l-.5,spatialReference:new W({wkid:3857})}),d=s.isPseudoSpatialReference??!s.extent,m={x:u.width/f,y:u.height/l},p=new ge({width:f,height:l,pixelType:h,extent:u,nativeExtent:o,transform:c,pixelSize:m,spatialReference:u.spatialReference,bandCount:r.pixels.length,keyProperties:a||{},statistics:t,isPseudoSpatialReference:d,histograms:n});this.createRemoteDatasetStorageInfo(p,512,512),this._set("rasterInfo",p),this.updateTileInfo(),await this._buildInMemoryRaster(r,{width:512,height:512},e),this.datasetName=i,this.url="/InMemory/"+i}fetchRawTile(e,s,r,t={}){const n=this._pixelBlockTiles.get(`${e}/${s}/${r}`);return Promise.resolve(n)}async _buildInMemoryRaster(e,s,r){var f,l;const t=this.rasterInfo.storageInfo.maximumPyramidLevel,n=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:e,tileSize:s,maximumPyramidLevel:t},r):Promise.resolve(gs(e,s,t)),i=this.rasterInfo.statistics!=null,a=this.rasterInfo.histograms!=null,o=i?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:e},r):Promise.resolve(Zt(e)),c=await at([n,o]);if(!c[0].value&&c[1].value)throw new E("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=c[0].value,i||(this.rasterInfo.statistics=(f=c[1].value)==null?void 0:f.statistics),a||(this.rasterInfo.histograms=(l=c[1].value)==null?void 0:l.histograms)}};R([v({type:String,json:{write:!0}})],me.prototype,"datasetFormat",void 0);R([v()],me.prototype,"data",void 0);me=R([Q("esri.layers.support.rasterDatasets.InMemoryRaster")],me);const qs=me;function le(g,e){if(!(g&&e))return[];let s=e;e.includes("/")?(s=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const r=[];if(e){const n=le(g,s);for(let i=0;i<n.length;i++){const a=n[i];le(a,e).forEach(c=>r.push(c))}return r}const t=g.getElementsByTagNameNS("*",s);if(!t||t.length===0)return[];for(let n=0;n<t.length;n++)r.push(t[n]||t.item(n));return r}function Y(g,e){if(!(g&&e))return null;let s=e;e.includes("/")?(s=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const r=le(g,s);return r.length>0?e?Y(r[0],e):r[0]:null}function K(g,e=null){const s=e?Y(g,e):g;let r;return s?(r=s.textContent||s.nodeValue,r?r.trim():null):null}function Vs(g,e){const s=le(g,e),r=[];let t;for(let n=0;n<s.length;n++)t=s[n].textContent||s[n].nodeValue,t&&(t=t.trim(),t!==""&&r.push(t));return r}function Se(g,e){return Vs(g,e).map(r=>Number(r))}function ne(g,e){const s=K(g,e);return Number(s)}function Me(g,e){var t;const s=(t=g==null?void 0:g.nodeName)==null?void 0:t.toLowerCase(),r=e.toLowerCase();return s.slice(s.lastIndexOf(":")+1)===r}function st(g,e){if(!(g&&e))return null;const s=[];for(let r=0;r<g.length;r++)s.push(g[r]),s.push(e[r]);return s}function Us(g){const e=Y(g,"GeodataXform"),s=ne(e,"SpatialReference/WKID")||K(e,"SpatialReference/WKT"),r=Te(s);if(e.getAttribute("xsi:type")!=="typens:PolynomialXform")return{spatialReference:r,transform:null};const t=ne(e,"PolynomialOrder")??1,n=Se(e,"CoeffX/Double"),i=Se(e,"CoeffY/Double"),a=Se(e,"InverseCoeffX/Double"),o=Se(e,"InverseCoeffY/Double"),c=st(n,i),f=st(a,o),l=c&&f&&c.length&&f.length?new ze({spatialReference:r,polynomialOrder:t,forwardCoefficients:c,inverseCoefficients:f}):null;return{spatialReference:r,transform:l}}function Ys(g){var u;const e=ne(g,"NoDataValue"),s=Y(g,"Histograms/HistItem"),r=ne(s,"HistMin"),t=ne(s,"HistMax"),n=ne(s,"BucketCount"),i=(u=K(s,"HistCounts"))==null?void 0:u.split("|").map(d=>Number(d)),a=le(g,"Metadata/MDI");let o,c,f,l;a.forEach(d=>{const m=Number(d.textContent??d.nodeValue);switch(d.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":o=m;break;case"STATISTICS_MAXIMUM":c=m;break;case"STATISTICS_MEAN":f=m;break;case"STATISTICS_STDDEV":l=m;break}});const h=ne(g,"Metadata/SourceBandIndex");return{noDataValue:e,histogram:i!=null&&i.length&&r!=null&&t!=null?{min:r,max:t,size:n||i.length,counts:i}:null,sourceBandIndex:h,statistics:o!=null&&c!=null?{min:o,max:c,avg:f,stddev:l}:null}}function Te(g){if(!g)return null;let e=Number(g);if(!isNaN(e)&&e!==0)return new W({wkid:e});if(g=String(g),g.startsWith("COMPD_CS")){if(!g.includes("VERTCS")||!(g.includes("GEOGCS")||g.startsWith("PROJCS")))return null;const s=g.indexOf("VERTCS"),r=g.indexOf("PROJCS"),t=r>-1?r:g.indexOf("GEOGCS");if(t===-1)return null;const n=g.slice(t,g.lastIndexOf("]",s)+1).trim(),i=g.slice(s,g.lastIndexOf("]")).trim();e=Ce(n);const a=e?new W({wkid:e}):new W({wkt:n}),o=Ce(i);return o&&(a.vcsWkid=o),a}return g.startsWith("GEOGCS")||g.startsWith("PROJCS")?(e=Ce(g),e!==0?new W({wkid:e}):new W({wkt:g})):null}function Ce(g){var t;const e=g.replace(/\]/g,"[").replace(/\"/g,"").split("[").map(n=>n.trim()).filter(n=>n!==""),s=e[e.length-1].split(","),r=(t=s[0])==null?void 0:t.toLowerCase();if((r==="epsg"||r==="esri")&&g.endsWith('"]]')){const n=Number(s[1]);if(!isNaN(n)&&n!==0)return n}return 0}function Ne(g){var r;if(((r=g==null?void 0:g.documentElement.tagName)==null?void 0:r.toLowerCase())!=="pamdataset")return{};const e={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};g.documentElement.childNodes.forEach(t=>{if(t.nodeType===1){if(Me(t,"SRS")){if(!e.spatialReference){const n=K(t);e.spatialReference=Te(n)}}else if(Me(t,"Metadata"))if(t.getAttribute("domain")==="xml:ESRI"){const{spatialReference:n,transform:i}=Us(t);e.transform=i,e.spatialReference||(e.spatialReference=n)}else le(t,"MDI").forEach(i=>e.metadata[i.getAttribute("key")]=K(i));else if(Me(t,"PAMRasterBand")){const n=Ys(t);n.sourceBandIndex!=null&&e.rasterBands[n.sourceBandIndex]==null?e.rasterBands[n.sourceBandIndex]=n:e.rasterBands.push(n)}}});const s=e.rasterBands;if(s.length){const t=!!s[0].statistics;e.statistics=t?s.map(i=>i.statistics).filter(ke):null;const n=!!s[0].histogram;e.histograms=n?s.map(i=>i.histogram).filter(ke):null}return e}let be=class extends ae{async open(e){await this.init();const s=await this._fetchData(e);let{spatialReference:r,statistics:t,histograms:n,transform:i}=await this._fetchAuxiliaryData(e);const a=!r;a&&(r=new W({wkid:3857})),n!=null&&n.length&&t==null&&(t=He(n));const{width:o,height:c}=s;let f=new G({xmin:-.5,ymin:.5-c,xmax:o-.5,ymax:.5,spatialReference:r});const l=i?i.forwardTransform(f):f;let h=!0;if(i){const d=i.forwardCoefficients;h=d&&d[1]===0&&d[2]===0,h&&(i=null,f=l)}const u=new qs({data:{extent:l,nativeExtent:f,transform:i,pixelBlock:s,statistics:t,histograms:n,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:a}});await u.open(),u.data=null,this._set("rasterInfo",u.rasterInfo),this._inMemoryRaster=u}fetchRawTile(e,s,r,t={}){return this._inMemoryRaster.fetchRawTile(e,s,r,t)}async _fetchData(e){const{data:s}=await this.request(this.url,{responseType:"array-buffer",signal:e==null?void 0:e.signal}),r=es(s).toUpperCase();if(r==="JPG"||r==="PNG"||r==="GIF"||r==="BMP")this._set("datasetFormat",r);else throw new E("image-aux-raster:open","the data is not a supported format");const t=r.toLowerCase(),n=t==="gif"||t==="bmp"||!wt("ios"),i=await this.decodePixelBlock(s,{format:t,useCanvas:n,hasNoZlibMask:!0});if(i==null)throw new E("image-aux-raster:open","the data cannot be decoded");return i}async _fetchAuxiliaryData(e){var f;const s=e==null?void 0:e.signal,r=this.ioConfig.skipExtensions??[],t=r.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:s}),n=this.datasetFormat,i=n==="JPG"?"jgw":n==="PNG"?"pgw":n==="BMP"?"bpw":null,a=i&&r.includes(i)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+i,{responseType:"text",signal:s}),o=await at([t,a]);if(s!=null&&s.aborted)throw St();const c=Ne((f=o[0].value)==null?void 0:f.data);if(!c.transform){const l=o[1].value?o[1].value.data.split(`
`).slice(0,6).map(h=>Number(h)):null;c.transform=(l==null?void 0:l.length)===6?new ze({forwardCoefficients:[l[4],l[5],l[0],-l[1],l[2],-l[3]]}):null}return c}};R([v({type:String,json:{write:!0}})],be.prototype,"datasetFormat",void 0);be=R([Q("esri.layers.support.rasterDatasets.ImageAuxRaster")],be);const ve=be;let pe=class extends ae{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async open(e){var _,P;await this.init();const s=e&&e.signal,r=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:s});r.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const t=r.data;if(this.sourceJSON=t,!t)throw new E("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!t.tileInfo)throw new E("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const n=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=t.cacheType,this.tileType==null&&(n.includes(t.tileInfo.format.toLowerCase())?this.tileType="Map":t.tileInfo.format.toLowerCase()==="lerc"?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=((_=t.name)==null?void 0:_.slice(t.name.indexOf("/")+1))??"";const i=await this._fetchRasterInfo({signal:s});if(i==null)throw new E("image-server-raster:open","cannot initialize image service");const a=this.tileType==="Map"?Es(t.tileInfo,t):he.fromJSON(t.tileInfo);Rt(a);const[o,c]=this._computeMinMaxLOD(i,a),{extent:f,pixelSize:l}=i,h=.5/i.width*l.x,u=Math.max(l.x,l.y),{lods:d}=a;(this.tileType!=="Map"&&t.maxScale!==0||Math.abs(l.x-l.y)>h||!d.some(T=>Math.abs(T.resolution-u)<h))&&(l.x=l.y=o.resolution,i.width=Math.ceil((f.xmax-f.xmin)/l.x-.1),i.height=Math.ceil((f.ymax-f.ymin)/l.y-.1));const m=o.level-c.level,[p,y]=a.size,I=[],w=[];d.forEach((T,C)=>{T.level>=c.level&&T.level<=o.level&&I.push({x:T.resolution,y:T.resolution}),C<d.length-1&&w.push(Math.round(10*T.resolution/d[C+1].resolution)/10)}),I.sort((T,C)=>T.x-C.x);const x=this.computeBlockBoundary(f,p,y,a.origin,I,m),S=I.length>1?I.slice(1):null;let b;t.transposeInfo&&(b={tileSize:[t.transposeInfo.rows,t.transposeInfo.cols],packetSize:((P=i.keyProperties)==null?void 0:P._yxs.PacketSize)??0});const M=w.length<=1||w.length>=3&&w.slice(0,w.length-1).every(T=>T===w[0])?w[0]??2:Math.round(10/(c.resolution/o.resolution)**(-1/m))/10;if(i.storageInfo=new ye({blockWidth:a.size[0],blockHeight:a.size[1],pyramidBlockWidth:a.size[0],pyramidBlockHeight:a.size[1],pyramidResolutions:S,pyramidScalingFactor:M,compression:a.format,origin:a.origin,firstPyramidLevel:1,maximumPyramidLevel:m,tileInfo:a,transposeInfo:b,blockBoundary:x}),this._fixGCSShift(i),this._set("rasterInfo",i),t.capabilities.toLowerCase().includes("tilemap")){const T={tileInfo:i.storageInfo.tileInfo,parsedUrl:bt(this.url),url:this.url,tileServers:[],type:"tile"};this._tilemapCache=new As({layer:T})}}async fetchRawTile(e,s,r,t={}){const{storageInfo:n,extent:i}=this.rasterInfo,{transposeInfo:a}=n,o=a!=null&&!!t.transposedVariableName;if(this._slices&&!o&&t.sliceId==null)return null;const c=o?0:n.maximumPyramidLevel-e+this._levelOffset,f=`${this.url}/tile/${c}/${s}/${r}`,l=this._slices?o?{variable:t.transposedVariableName}:{sliceId:t.sliceId||0}:null,{data:h}=await this.request(f,{query:l,responseType:"array-buffer",signal:t.signal});if(!h)return null;const u=o?a.tileSize:n.tileInfo.size,d=await this.decodePixelBlock(h,{width:u[0],height:u[1],planes:null,pixelType:null,isPoint:this.tileType==="Elevation",returnInterleaved:o,noDataValue:this.rasterInfo.noDataValue});if(d==null)return null;const m=n.blockBoundary[e];if(n.compression!=="jpg"||r>m.minCol&&r<m.maxCol&&s>m.minRow&&s<m.maxRow)return d;const{origin:p,blockWidth:y,blockHeight:I}=n,{x:w,y:x}=this.getPyramidPixelSize(e),S=Math.round((i.xmin-p.x)/w)%y,b=Math.round((i.xmax-p.x)/w)%y||y,F=Math.round((p.y-i.ymax)/x)%I,M=Math.round((p.y-i.ymin)/x)%I||I,_=r===m.minCol?S:0,P=s===m.minRow?F:0,T=r===m.maxCol?b:y,C=s===m.maxRow?M:I;return xs(d,{x:_,y:P},{width:T-_,height:C-P}),d}getSliceIndex(e){if(!this._slices||e==null||e.length===0)return null;const s=e;for(let r=0;r<this._slices.length;r++){const t=this._slices[r].multidimensionalDefinition;if(t.length===s.length&&!t.some(n=>{const i=s.find(c=>n.variableName===c.variableName&&c.dimensionName===n.dimensionName);if(!i)return!0;const a=Array.isArray(n.values[0])?`${n.values[0][0]}-${n.values[0][1]}`:n.values[0],o=Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0];return a!==o}))return r}return null}async fetchVariableStatisticsHistograms(e,s){const r=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:s}).then(i=>{var a;return(a=i.data)==null?void 0:a.statistics}),t=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:s}).then(i=>{var a;return(a=i.data)==null?void 0:a.histograms}),n=await Promise.all([r,t]);return n[0]&&n[0].forEach(i=>{i.avg=i.mean,i.stddev=i.standardDeviation}),{statistics:n[0]||null,histograms:n[1]||null}}async computeBestPyramidLevelForLocation(e,s={}){if(!this._tilemapCache)return 0;let r=this.identifyPixelLocation(e,0,s.datumTransformation);if(r===null)return null;let t=0;const{maximumPyramidLevel:n}=this.rasterInfo.storageInfo;let i=n-t+this._levelOffset;const a=r.srcLocation;for(;i>=0;){try{if(await this._tilemapCache.fetchAvailability(i,r.row,r.col,s)==="available")break}catch{}if(i--,t++,r=this.identifyPixelLocation(a,t,s.datumTransformation),r===null)return null}return i===-1||r==null?null:t}async _fetchRasterInfo(e){const s=this.sourceJSON;if(this.tileType==="Map"){const a=s.fullExtent||s.extent,o=Math.ceil((a.xmax-a.xmin)/s.pixelSizeX-.1),c=Math.ceil((a.ymax-a.ymin)/s.pixelSizeY-.1),f=W.fromJSON(s.spatialReference||a.spatialReference),l=new L({x:s.pixelSizeX,y:s.pixelSizeY,spatialReference:f});return new ge({width:o,height:c,bandCount:3,extent:G.fromJSON(a),spatialReference:f,pixelSize:l,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:r}=e,t=Ot(this.url,this.sourceJSON,{signal:r,query:this.ioConfig.customFetchParameters}),n=s.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:r}).then(a=>a.data&&a.data.slices).catch(()=>null):null,i=await Promise.all([t,n]);return this._slices=i[1],i[0]}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}_fixGCSShift(e){const{extent:s,spatialReference:r}=e;s.xmin>-1&&s.xmax>181&&(r!=null&&r.wkid)&&r.isGeographic&&(e.nativeExtent=e.extent,e.transform=new _s,e.extent=e.transform.forwardTransform(s))}_computeMinMaxLOD(e,s){const{pixelSize:r}=e,t=.5/e.width*r.x,{lods:n}=s,i=s.lodAt(Math.max.apply(null,n.map(u=>u.level))),a=s.lodAt(Math.min.apply(null,n.map(u=>u.level))),{tileType:o}=this;if(o==="Map")return this._levelOffset=n[0].level,[i,a];if(o==="Raster")return[n.find(d=>d.resolution===r.x)??i,a];const{minScale:c,maxScale:f}=this.sourceJSON;let l=i;f>0&&(l=n.find(u=>Math.abs(u.scale-f)<t),l||(l=n.filter(u=>u.scale>f).sort((u,d)=>u.scale>d.scale?1:-1)[0]??i));let h=a;return c>0&&(h=n.find(u=>Math.abs(u.scale-c)<t)??a,this._levelOffset=h.level-a.level),[l,h]}};R([v({type:String,json:{write:!0}})],pe.prototype,"datasetFormat",void 0);R([v()],pe.prototype,"tileType",void 0);pe=R([Q("esri.layers.support.rasterDatasets.ImageServerRaster")],pe);const Xs=pe,Z=new Map;Z.set("Int8","s8");Z.set("UInt8","u8");Z.set("Int16","s16");Z.set("UInt16","u16");Z.set("Int32","s32");Z.set("UInt32","u32");Z.set("Float32","f32");Z.set("Float64","f32");Z.set("Double64","f32");const se=new Map;se.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"});se.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"});se.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"});se.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let ce=class extends ae{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(e){var p;await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const s=e?e.signal:null,r=await this.request(this.url,{responseType:"xml",signal:s}),{rasterInfo:t,files:n}=this._parseHeader(r.data);if(((p=this.ioConfig.skipExtensions)==null?void 0:p.indexOf("aux.xml"))===-1){const y=await this._fetchAuxiliaryData(e);y!=null&&(t.statistics=y.statistics??t.statistics,t.histograms=y.histograms,y.histograms&&t.statistics==null&&(t.statistics=He(y.histograms)))}this._set("rasterInfo",t),this._files=n;const i=await this.request(n.index,{responseType:"array-buffer",signal:s});this._storageIndex=this._parseIndex(i.data);const{blockWidth:a,blockHeight:o}=this.rasterInfo.storageInfo,c=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:f,height:l}=this.rasterInfo,h=[],u=this._getBandSegmentCount();let d=0,m=-1;for(;d<this._storageIndex.length;){m++;const y=Math.ceil(f/a/c**m)-1,I=Math.ceil(l/o/c**m)-1;d+=(y+1)*(I+1)*u*4,h.push({maxRow:I,maxCol:y,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=h,m>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=m),this.updateTileInfo()}async fetchRawTile(e,s,r,t={}){const{blockWidth:n,blockHeight:i,blockBoundary:a}=this.rasterInfo.storageInfo,o=a[e];if(!o||o.maxRow<s||o.maxCol<r||o.minRow>s||o.minCol>r)return null;const{bandCount:c,pixelType:f}=this.rasterInfo,{ranges:l,actualTileWidth:h,actualTileHeight:u}=this._getTileLocation(e,s,r);if(!l||l.length===0)return null;if(l[0].from===0&&l[0].to===0){const T=new Uint8Array(n*i);return new te({width:n,height:i,pixels:null,mask:T,validPixelCount:0})}const{bandIds:d}=this.ioConfig,m=this._getBandSegmentCount(),p=[];let y=0;for(y=0;y<m;y++)(!d||d.includes(y))&&p.push(this.request(this._files.data,{range:{from:l[y].from,to:l[y].to},responseType:"array-buffer",signal:t.signal}));const I=await Promise.all(p),w=I.map(T=>T.data.byteLength).reduce((T,C)=>T+C),x=new Uint8Array(w);let S=0;for(y=0;y<m;y++)x.set(new Uint8Array(I[y].data),S),S+=I[y].data.byteLength;const b=se.get(this.rasterInfo.storageInfo.compression).decoderFormat,F=await this.decodePixelBlock(x.buffer,{width:n,height:i,format:b,planes:(d==null?void 0:d.length)||c,pixelType:f});if(F==null)return null;let{noDataValue:M}=this.rasterInfo;if(M!=null&&b!=="lerc"&&!F.mask&&(M=M[0],M!=null)){const T=F.width*F.height,C=new Uint8Array(T);if(Math.abs(M)>1e24)for(y=0;y<T;y++)Math.abs((F.pixels[0][y]-M)/M)>1e-6&&(C[y]=1);else for(y=0;y<T;y++)F.pixels[0][y]!==M&&(C[y]=1);F.mask=C}let _=0,P=0;if(h!==n||u!==i){let T=F.mask;if(T)for(y=0;y<i;y++)if(P=y*n,y<u)for(_=h;_<n;_++)T[P+_]=0;else for(_=0;_<n;_++)T[P+_]=0;else for(T=new Uint8Array(n*i),F.mask=T,y=0;y<u;y++)for(P=y*n,_=0;_<h;_++)T[P+_]=1}return F}_parseIndex(e){if(e.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let s,r,t,n,i,a;if(ts){for(r=new Uint8Array(e),n=new ArrayBuffer(e.byteLength),t=new Uint8Array(n),i=0;i<e.byteLength/4;i++)for(a=0;a<4;a++)t[i*4+a]=r[i*4+3-a];s=new Uint32Array(n)}else s=new Uint32Array(e);return s}_getBandSegmentCount(){return se.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(e,s,r){const{blockWidth:t,blockHeight:n,pyramidScalingFactor:i}=this.rasterInfo.storageInfo,{width:a,height:o}=this.rasterInfo,c=this._getBandSegmentCount();let f,l,h,u=0,d=0;for(h=0;h<e;h++)d=i**h,f=Math.ceil(a/t/d),l=Math.ceil(o/n/d),u+=f*l;d=i**e,f=Math.ceil(a/t/d),l=Math.ceil(o/n/d),u+=s*f+r,u*=c*4;const m=this._storageIndex.subarray(u,u+4*c);let p=0,y=0;const I=[];for(let S=0;S<c;S++)p=m[S*4]*2**32+m[S*4+1],y=p+m[S*4+2]*2**32+m[S*4+3],I.push({from:p,to:y});const w=r<f-1?t:Math.ceil(a/d)-t*(f-1),x=s<l-1?n:Math.ceil(o/d)-n*(l-1);return{ranges:I,actualTileWidth:w,actualTileHeight:x}}_parseHeader(e){const s=Y(e,"MRF_META/Raster");if(!s)throw new E("mrf:open","not a valid MRF format");const r=Y(s,"Size"),t=parseInt(r.getAttribute("x"),10),n=parseInt(r.getAttribute("y"),10),i=parseInt(r.getAttribute("c"),10),a=(K(s,"Compression")||"none").toLowerCase();if(!se.has(a))throw new E("mrf:open","currently does not support compression "+a);const o=K(s,"DataType")||"UInt8",c=Z.get(o);if(c==null)throw new E("mrf:open","currently does not support pixel type "+o);const f=Y(s,"PageSize"),l=parseInt(f.getAttribute("x"),10),h=parseInt(f.getAttribute("y"),10),u=Y(s,"DataValues");let d,m;if(u&&(m=u.getAttribute("NoData"),m!=null&&(d=m.trim().split(" ").map(O=>parseFloat(O)))),Y(e,"MRF_META/CachedSource"))throw new E("mrf:open","currently does not support MRF referencing other data files");const y=Y(e,"MRF_META/GeoTags"),I=Y(y,"BoundingBox");let w=!1,x;if(I!=null){const O=parseFloat(I.getAttribute("minx")),D=parseFloat(I.getAttribute("miny")),A=parseFloat(I.getAttribute("maxx")),z=parseFloat(I.getAttribute("maxy")),H=K(y,"Projection")||"";let N=W.WGS84;if(H!=="LOCAL_CS[]")if(H.toLowerCase().startsWith("epsg:")){const j=Number(H.slice(5));!isNaN(j)&&j!==0&&(N=new W({wkid:j}))}else N=Te(H)??W.WGS84;else w=!0,N=new W({wkid:3857});x=new G(O,D,A,z),x.spatialReference=N}else w=!0,x=new G({xmin:-.5,ymin:.5-n,xmax:t-.5,ymax:.5,spatialReference:new W({wkid:3857})});const S=Y(e,"MRF_META/Rsets"),b=parseInt(S&&S.getAttribute("scale")||"2",10),F=x.spatialReference,M=new ye({origin:new L({x:x.xmin,y:x.ymax,spatialReference:F}),blockWidth:l,blockHeight:h,pyramidBlockWidth:l,pyramidBlockHeight:h,compression:a,pyramidScalingFactor:b}),_=new L({x:x.width/t,y:x.height/n,spatialReference:F}),P=new ge({width:t,height:n,extent:x,isPseudoSpatialReference:w,spatialReference:F,bandCount:i,pixelType:c,pixelSize:_,noDataValue:d,storageInfo:M}),T=K(e,"datafile"),C=K(e,"IndexFile"),k={mrf:this.url,index:C||this.url.replace(".mrf",".idx"),data:T||this.url.replace(".mrf",se.get(a).blobExtension)};return{rasterInfo:P,files:k}}async _fetchAuxiliaryData(e){try{const{data:s}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e==null?void 0:e.signal});return Ne(s)}catch{return null}}};R([v()],ce.prototype,"_files",void 0);R([v()],ce.prototype,"_storageIndex",void 0);R([v({type:String,json:{write:!0}})],ce.prototype,"datasetFormat",void 0);ce=R([Q("esri.layers.support.rasterIO.MRFRaster")],ce);const Ks=ce,Pe=(g,e)=>{var s;return(s=g.get(e))==null?void 0:s.values},ue=(g,e)=>{var s,r;return(r=(s=g.get(e))==null?void 0:s.values)==null?void 0:r[0]};let ie=class extends ae{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1024*1024,this.datasetFormat="TIFF"}async open(e){await this.init();const s=e?e.signal:null,{data:r}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:s});if(!r)throw new E("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:t,firstIFDPos:n,isBigTiff:i}=ss(r),a=[];await this._readIFDs(a,r,t,n,0,i?8:4,s);const{imageInfo:o,rasterInfo:c}=this._parseIFDs(a),f=ns(a),l=rs(a);if(this._headerInfo={littleEndian:t,isBigTiff:i,ifds:a,pyramidIFDs:f,maskIFDs:l,...o},this._set("rasterInfo",c),!o.isSupported)throw new E("tiffraster:open","this tiff is not supported: "+o.message);if(!o.tileWidth)throw new E("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");const{skipExtensions:h=[]}=this.ioConfig;if(!h.includes("aux.xml")){const u=await this._fetchAuxiliaryMetaData(e);u!=null&&this._processPAMInfo(u,c)}!h.includes("vat.dbf")&&c.bandCount===1&&c.pixelType==="u8"&&(c.attributeTable=await this._fetchAuxiliaryTable(e),c.attributeTable!=null&&(c.keyProperties.DataType="thematic")),this.updateTileInfo()}async fetchRawTile(e,s,r,t={}){var i;if(!((i=this._headerInfo)!=null&&i.isSupported)||this.isBlockOutside(e,s,r))return null;const n=await this._fetchRawTiffTile(e,s,r,!1,t);if(n!=null&&this._headerInfo.hasMaskBand){const a=await this._fetchRawTiffTile(e,s,r,!0,t);a!=null&&a.pixels[0]instanceof Uint8Array&&(n.mask=a.pixels[0])}return n}_parseIFDs(e){var k,O;const s=is(e),{width:r,height:t,tileWidth:n,tileHeight:i,planes:a,pixelType:o,compression:c,firstPyramidLevel:f,maximumPyramidLevel:l,pyramidBlockWidth:h,pyramidBlockHeight:u,tileBoundary:d,affine:m,metadata:p}=s,y=((k=s.extent.spatialReference)==null?void 0:k.wkt)||((O=s.extent.spatialReference)==null?void 0:O.wkid);let I=Te(y),w=!!s.isPseudoGeographic;I==null&&(w=!0,I=new W({wkid:3857}));const x=new G({...s.extent,spatialReference:I}),S=x?new L({x:x.xmin,y:x.ymax,spatialReference:I}):new L({x:0,y:0}),b=new ye({blockWidth:n,blockHeight:i,pyramidBlockWidth:h,pyramidBlockHeight:u,compression:c,origin:S,firstPyramidLevel:f,maximumPyramidLevel:l,blockBoundary:d}),F=new L({x:(x.xmax-x.xmin)/r,y:(x.ymax-x.ymin)/t,spatialReference:I}),M=p?{BandProperties:p.bandProperties,DataType:p.dataType}:{};let _=null;const P=ue(e[0],"PHOTOMETRICINTERPRETATION"),T=Pe(e[0],"COLORMAP");if(P<=3&&(T==null?void 0:T.length)>3&&T.length%3===0){_=[];const D=T.length/3;for(let A=0;A<D;A++)_.push([A,T[A]>>>8,T[A+D]>>>8,T[A+D*2]>>>8])}const C=new ge({width:r,height:t,bandCount:a,pixelType:o,pixelSize:F,storageInfo:b,spatialReference:I,isPseudoSpatialReference:w,keyProperties:M,extent:x,colormap:_,statistics:p?p.statistics:null});return m!=null&&m.length&&(C.nativeExtent=new G({xmin:-.5,ymin:.5-t,xmax:r-.5,ymax:.5,spatialReference:I}),C.transform=new ze({polynomialOrder:1,forwardCoefficients:[m[2]+m[0]/2,m[5]-m[3]/2,m[0],m[3],-m[1],-m[4]]}),C.extent=C.transform.forwardTransform(C.nativeExtent),C.pixelSize=new L({x:(x.xmax-x.xmin)/r,y:(x.ymax-x.ymin)/t,spatialReference:I}),b.origin.x=-.5,b.origin.y=.5),{imageInfo:s,rasterInfo:C}}_processPAMInfo(e,s){if(s.statistics=e.statistics??s.statistics,s.histograms=e.histograms,e.histograms&&s.statistics==null&&(s.statistics=He(e.histograms)),e.transform&&s.transform==null){s.transform=e.transform,s.nativeExtent=s.extent;const r=s.transform.forwardTransform(s.nativeExtent);s.pixelSize=new L({x:(r.xmax-r.xmin)/s.width,y:(r.ymax-r.ymin)/s.height,spatialReference:s.spatialReference}),s.extent=r}s.isPseudoSpatialReference&&e.spatialReference&&(s.spatialReference=e.spatialReference,s.extent.spatialReference=s.nativeExtent.spatialReference=s.storageInfo.origin.spatialReference=s.spatialReference)}async _readIFDs(e,s,r,t,n,i=4,a){if(!t)return null;(t>=s.byteLength||t<0)&&(s=(await this.request(this.url,{range:{from:t+n,to:t+n+this._bufferSize},responseType:"array-buffer",signal:a})).data,n=t+n,t=0);const o=await this._readIFD(s,r,t,n,Ie.TIFF_TAGS,i,a);if(e.push(o.ifd),!o.nextIFD)return null;await this._readIFDs(e,s,r,o.nextIFD-n,n,i,a)}async _readIFD(e,s,r,t,n=Ie.TIFF_TAGS,i=4,a){var c,f;if(!e)return null;const o=as(e,s,r,t,n,i);if(o.success){const l=[];if((c=o.ifd)==null||c.forEach(h=>{h.values||l.push(h)}),l.length>0){const h=l.map(m=>m.offlineOffsetSize).filter(ke),u=Math.min.apply(null,h.map(m=>m[0]));if(Math.min.apply(null,h.map(m=>m[0]+m[1]))-u<=this._bufferSize){const{data:m}=await this.request(this.url,{range:{from:u,to:u+this._bufferSize},responseType:"array-buffer",signal:a});e=m,t=u,l.forEach(p=>os(e,s,p,t))}}if((f=o.ifd)!=null&&f.has("GEOKEYDIRECTORY")){const h=o.ifd.get("GEOKEYDIRECTORY"),u=h==null?void 0:h.values;if(u&&u.length>4){const d=u[0]+"."+u[1]+"."+u[2],m=await this._readIFD(e,s,h.valueOffset+6-t,t,Ie.GEO_KEYS,2,a);h.data=m.ifd,h.data&&h.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[d]})}}return o}if(o.requiredBufferSize&&o.requiredBufferSize!==e.byteLength)return e=(await this.request(this.url,{range:{from:t,to:t+o.requiredBufferSize+4},responseType:"array-buffer",signal:a})).data,e.byteLength<o.requiredBufferSize?null:this._readIFD(e,s,0,t,Ie.TIFF_TAGS,4,a)}async _fetchRawTiffTile(e,s,r,t,n={}){const i=this._getTileLocation(e,s,r,t);if(!i)return null;const{ranges:a,actualTileWidth:o,actualTileHeight:c,ifd:f}=i,l=a.map(F=>this.request(this.url,{range:F,responseType:"array-buffer",signal:n.signal})),h=await Promise.all(l),u=h.map(F=>F.data.byteLength).reduce((F,M)=>F+M),d=h.length===1?h[0].data:new ArrayBuffer(u),m=[0],p=[0];if(h.length>1){const F=new Uint8Array(d);for(let M=0,_=0;M<h.length;M++){const P=h[M].data;F.set(new Uint8Array(P),_),m[M]=_,_+=P.byteLength,p[M]=P.byteLength}}const{blockWidth:y,blockHeight:I}=this.getBlockWidthHeight(e),w=await this.decodePixelBlock(d,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:f,offsets:m,sizes:p},width:y,height:I,planes:null,pixelType:null});if(w==null)return null;let x,S,b;if(o!==y||c!==I){let F=w.mask;if(F)for(x=0;x<I;x++)if(b=x*y,x<c)for(S=o;S<y;S++)F[b+S]=0;else for(S=0;S<y;S++)F[b+S]=0;else for(F=new Uint8Array(y*I),w.mask=F,x=0;x<c;x++)for(b=x*y,S=0;S<o;S++)F[b+S]=1}return w}_getTileLocation(e,s,r,t=!1){const{firstPyramidLevel:n,blockBoundary:i}=this.rasterInfo.storageInfo,a=e===0?0:e-(n-1),{_headerInfo:o}=this;if(!o)return null;const c=t?o.maskIFDs[a]:a===0?o==null?void 0:o.ifds[0]:o==null?void 0:o.pyramidIFDs[a-1];if(!c)return null;const f=ls(c,o),l=Pe(c,"TILEOFFSETS");if(l===void 0)return null;const h=Pe(c,"TILEBYTECOUNTS"),{minRow:u,minCol:d,maxRow:m,maxCol:p}=i[a];if(s>m||r>p||s<u||r<d)return null;const y=ue(c,"IMAGEWIDTH"),I=ue(c,"IMAGELENGTH"),w=ue(c,"TILEWIDTH"),x=ue(c,"TILELENGTH"),S=f?this.rasterInfo.bandCount:1,b=S*s*(p+1)+r,F=[{from:l[b],to:l[b+S-1]+h[b+S-1]-1}];if(f){let C=!0;for(let k=0;k<S;k++)if(l[b+k]+h[b+k]!==l[b+k+1]){C=!1;break}if(!C)for(let k=0;k<S;k++)F[k]={from:l[b+k],to:l[b+k]+h[b+k]-1}}const M=l[b],_=h[b];if(M==null||_==null)return null;const P=r===p&&y%w||w,T=s===m&&I%x||x;return{ranges:F,ifd:c,actualTileWidth:P,actualTileHeight:T}}async _fetchAuxiliaryMetaData(e){try{const{data:s}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e==null?void 0:e.signal});return Ne(s)}catch{return null}}async _fetchAuxiliaryTable(e){try{const{data:s}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:e==null?void 0:e.signal}),r=dt.parse(s);return r!=null&&r.recordSet?ht.fromJSON(r.recordSet):null}catch{return null}}};R([v()],ie.prototype,"_files",void 0);R([v()],ie.prototype,"_headerInfo",void 0);R([v()],ie.prototype,"_bufferSize",void 0);R([v({type:String,json:{write:!0}})],ie.prototype,"datasetFormat",void 0);ie=R([Q("esri.layers.support.rasterDatasets.TIFFRaster")],ie);const Qs=ie,$=new Map;$.set("CRF",{desc:"Cloud Raster Format",constructor:$s});$.set("MRF",{desc:"Meta Raster Format",constructor:Ks});$.set("TIFF",{desc:"GeoTIFF",constructor:Qs});$.set("RasterTileServer",{desc:"Raster Tile Server",constructor:Xs});$.set("JPG",{desc:"JPG Raster Format",constructor:ve});$.set("PNG",{desc:"PNG Raster Format",constructor:ve});$.set("GIF",{desc:"GIF Raster Format",constructor:ve});$.set("BMP",{desc:"BMP Raster Format",constructor:ve});class Zs{static get supportedFormats(){const e=new Set;return $.forEach((s,r)=>e.add(r)),e}static async open(e){const{url:s,ioConfig:r,sourceJSON:t}=e;let n=e.datasetFormat;n==null&&s.lastIndexOf(".")&&(n=s.slice(s.lastIndexOf(".")+1).toUpperCase()),n==="OVR"||n==="TIF"?n="TIFF":(n==="JPG"||n==="JPEG"||n==="JFIF")&&(n="JPG"),s.toLowerCase().includes("/imageserver")&&!s.toLowerCase().includes("/wcsserver")&&(n="RasterTileServer");const a={url:s,sourceJSON:t,datasetFormat:n,ioConfig:r??{bandIds:null,sampling:null}};let o,c;if(n&&this.supportedFormats.has(n)){if(n==="CRF"&&!(r!=null&&r.enableCRF))throw new E("rasterfactory:open",`cannot open raster: ${s}`);return o=$.get(n).constructor,c=new o(a),await c.open({signal:e.signal}),c}if(n)throw new E("rasterfactory:open","not a supported format "+n);const f=Array.from($.keys());let l=0;const h=()=>(n=f[l++],!n||n==="CRF"&&!(r!=null&&r.enableCRF)?null:(o=$.get(n).constructor,c=new o(a),c.open({signal:e.signal}).then(()=>c).catch(()=>h())));return h()}static register(e,s,r){$.has(e.toUpperCase())||$.set(e.toUpperCase(),{desc:s,constructor:r})}}let J=class extends Wt(ks(Ms(Cs(jt(js(Ds(Lt(Ps(Nt(Pt)))))))))){constructor(...e){super(...e),this._primaryRasters=null,this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null}normalizeCtorArgs(e,s){return typeof e=="string"?{url:e,...s}:e}load(e){const s=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(Tt).then(()=>this._openRaster(s))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){var c;let s=[new fe({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"})];const{rasterInfo:r}=this,t=r==null?void 0:r.attributeTable,n=t!=null?t.fields:null,i="Raster.";if(n){const f=n.filter(l=>l.type!=="oid"&&l.name.toLowerCase()!=="value").map(l=>{const h=l.clone();return h.name=i+l.name,h});s=s.concat(f)}const a=r==null?void 0:r.dataType,o=r==null?void 0:r.multidimensionalInfo;if((a==="vector-magdir"||a==="vector-uv")&&o!=null){const f=(c=o.variables[0].unit)==null?void 0:c.trim(),l="Magnitude"+(f?` (${f})`:"");s.push(new fe({name:"Raster.Magnitude",alias:l,domain:null,editable:!1,type:"double"})),s.push(new fe({name:"Raster.Direction",alias:"Direction (°)",domain:null,editable:!1,type:"double"}))}return s}set renderer(e){this._set("renderer",e),this.updateRenderer()}readRenderer(e,s,r){const t=s&&s.layerDefinition&&s.layerDefinition.drawingInfo&&s.layerDefinition.drawingInfo.renderer,n=Jt(t,r)||void 0;if(n!=null)return n}createPopupTemplate(e){return Bs({fields:this.rasterFields,title:this.title},e)}async generateRasterInfo(e,s){if(e=Je(De,e),!e)return this._primaryRasters[0].rasterInfo;try{const r={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach(i=>r[i.url]=i);const t=Ae(e.toJSON(),r),n=new Be({rasterFunction:t});return await n.open(s),n.rasterInfo}catch{return null}}write(e,s){const{raster:r}=this;if(this.loaded?r.datasetFormat==="RasterTileServer"&&(r.tileType==="Raster"||r.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,s);if(s&&s.messages){const n=`${s.origin}/${s.layerContainerType||"operational-layers"}`;s.messages.push(new E("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${n}'`,{layer:this}))}return null}async _openRaster(e){let s=!1;if(this.raster)this.raster.rasterInfo||await this.raster.open(),this.raster.datasetFormat==="Function"?(s=!0,this._primaryRasters=this.raster.primaryRasters.rasters):this._primaryRasters=[this.raster],this.url=this.raster.url;else{const{rasterFunction:t}=this,n=[this.url];t&&Fs(t.toJSON(),n);const i=await Promise.all(n.map(o=>Zs.open({url:o,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e}))),a=i.findIndex(o=>o==null);if(a>-1)throw new E("imagery-tile-layer:open",`cannot open raster: ${n[a]}`);if(this._primaryRasters=i,t){const o={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach(l=>o[l.url]=l);const c=Ae(t.rasterFunctionDefinition??t.toJSON(),o),f=new Be({rasterFunction:c});try{await f.open(),this.raster=f}catch(l){const h=Oe.getLogger(this.declaredClass);l instanceof E&&h.error("imagery-tile-layer:open",l.message),h.warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=i[0]}}else this.raster=i[0]}const r=this.raster.rasterInfo;if(!r)throw new E("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("rasterInfo",s?r:this._primaryRasters[0].rasterInfo),this._set("spatialReference",r.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null){const t=this.raster.tileType==="Map"&&this.sourceJSON.minLOD!=null&&this.sourceJSON.maxLOD!=null?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(t,{origin:"service"})}this.title||(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(vt(()=>this.customParameters,t=>{this.raster&&(this.raster.ioConfig.customFetchParameters=t)}))}};R([v()],J.prototype,"_primaryRasters",void 0);R([v({type:[_t],json:{write:{overridePolicy(){var g;return{enabled:!this.loaded||this.raster.tileType==="Raster"||((g=this.bandIds)==null?void 0:g.join(","))!=="0,1,2"}}}}})],J.prototype,"bandIds",void 0);R([v({json:{write:{overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"||this.interpolation!=="bilinear"}}}}}),Ft(Ht)],J.prototype,"interpolation",void 0);R([v(Gt)],J.prototype,"legendEnabled",void 0);R([v({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],J.prototype,"isReference",void 0);R([v({type:["show","hide"]})],J.prototype,"listMode",void 0);R([v({json:{read:!0,write:!0}})],J.prototype,"blendMode",void 0);R([v()],J.prototype,"sourceJSON",void 0);R([v({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],J.prototype,"version",void 0);R([v({readOnly:!0,json:{read:!1}})],J.prototype,"type",void 0);R([v({type:["ArcGISTiledImageServiceLayer"]})],J.prototype,"operationalLayerType",void 0);R([v({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader(g,e){return!e.disablePopup}},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(g,e,s){e[s]=!g}}}})],J.prototype,"popupEnabled",void 0);R([v({type:Mt,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],J.prototype,"popupTemplate",void 0);R([v({readOnly:!0})],J.prototype,"defaultPopupTemplate",null);R([v({readOnly:!0,type:[fe]})],J.prototype,"fields",void 0);R([v({readOnly:!0,type:[fe]})],J.prototype,"rasterFields",null);R([v({types:ot,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){var e;const g=((e=this.renderer)==null?void 0:e.type)==="raster-stretch"&&this.renderer.stretchType==="none"&&!this.renderer.useGamma;return{enabled:!this.loaded||this.raster.tileType==="Raster"||!g}}},origins:{"web-scene":{types:zt,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(g){return{enabled:g&&g.type!=="vector-field"&&g.type!=="flow"}}}}}}})],J.prototype,"renderer",null);R([Ct("renderer")],J.prototype,"readRenderer",null);J=R([Q("esri.layers.ImageryTileLayer")],J);const ir=J;export{ir as default};
