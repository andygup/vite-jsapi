import{ah as u,J as f,aB as w,A as h,B as p,an as y,ae as V,ai as _}from"./index-b51e75d5.js";import{C}from"./Container-f527cc41.js";import{G as v}from"./GroupContainer-d45d7763.js";import{L as H,a as b}from"./LayerView-1913516e.js";import{G as c}from"./GraphicContainer-9ee6a935.js";import{G as m}from"./GraphicsView2D-59a4da9e.js";import"./parser-e88e0cee.js";import"./_commonjsHelpers-725317a4.js";import"./definitions-3f56d206.js";import"./enums-08489827.js";import"./TextureDescriptor-f92f0319.js";import"./WGLContainer-f8a4fd03.js";import"./VertexArrayObject-d544b58d.js";import"./VertexElementDescriptor-24e04d97.js";import"./color-05b85ffd.js";import"./enums-eb6e4255.js";import"./ProgramTemplate-f6686d4d.js";import"./MaterialKey-72fa82a6.js";import"./utils-3a381d3c.js";import"./heatmapUtils-a897c480.js";import"./vec4-3dd523e8.js";import"./vec4f64-efdcb593.js";import"./StyleDefinition-edaaf36e.js";import"./config-c06e4a6d.js";import"./GeometryUtils-0ab64fac.js";import"./earcut-db592379.js";import"./featureConversionUtils-87949e9d.js";import"./OptimizedGeometry-af84d2ad.js";import"./OptimizedFeatureSet-5c82fe5a.js";import"./BaseGraphicContainer-67f54a99.js";import"./FeatureContainer-da6d15a7.js";import"./AttributeStoreView-f4627267.js";import"./TiledDisplayObject-be904313.js";import"./visualVariablesUtils-eb7c5ec6.js";import"./visualVariablesUtils-033c8494.js";import"./TileContainer-5e80ae0f.js";import"./lengthUtils-59fc3632.js";import"./vec3f32-ec4c3c20.js";import"./normalizeUtils-ba8520b6.js";import"./normalizeUtilsCommon-62742346.js";import"./ExpandedCIM-e8dcd3e7.js";import"./BidiEngine-cdaf024a.js";import"./GeometryUtils-26dde58c.js";import"./Rect-df8ea165.js";import"./quantizationUtils-57f47ed2.js";import"./floatRGBA-910d7868.js";import"./normalizeUtilsSync-b52b61c4.js";import"./projectionSupport-73dd9596.js";import"./json-9ae8d6f8.js";import"./labelingInfo-14ab3cff.js";import"./labelUtils-df8241fd.js";import"./defaultsJSON-b396ba80.js";import"./jsonUtils-97563038.js";import"./Matcher-9ea16ab6.js";import"./tileUtils-fdb57ff2.js";import"./TurboLine-4458975d.js";import"./LRUCache-3f2a86dd.js";import"./MemCache-467264d5.js";import"./devEnvironmentUtils-e2e22b53.js";import"./styleUtils-10d73057.js";import"./featureFlags-dcf59b6a.js";import"./schemaUtils-5b5d772c.js";import"./sql-c1a5e8cf.js";import"./diffUtils-1090f477.js";import"./clusterUtils-5e98e18f.js";import"./SizeVariable-f0de0a1e.js";import"./colorRamps-78691ea3.js";import"./LegendOptions-c1ffbacd.js";import"./sizeVariableUtils-2914222a.js";import"./util-839d3cdf.js";import"./ComputedAttributeStorage-b3278637.js";import"./FieldsIndex-27b25eac.js";import"./arcadeTimeUtils-0b589737.js";import"./executionError-e2eca390.js";import"./centroid-1116d1e7.js";const g="sublayers",n="layerView",L=Object.freeze({remove(){},pause(){},resume(){}});let l=class extends H(b){constructor(){super(...arguments),this._highlightIds=new Map,this.container=new v}async fetchPopupFeatures(i){return Array.from(this.graphicsViews(),t=>t.hitTest(i).filter(e=>!!e.popupTemplate)).flat()}*graphicsViews(){if(this._graphicsViewsFeatureCollectionMap!=null){yield*this._graphicsViewsFeatureCollectionMap.keys();return}if(this._graphicsViews!=null){yield*this._graphicsViews;return}yield*[]}async hitTest(i,t){return Array.from(this.graphicsViews(),s=>{const a=s.hitTest(i);if(this._graphicsViewsFeatureCollectionMap!=null){const o=this._graphicsViewsFeatureCollectionMap.get(s);for(const r of a)!r.popupTemplate&&o.popupTemplate&&(r.popupTemplate=o.popupTemplate),r.sourceLayer=r.layer=this.layer}return a}).flat().map(s=>({type:"graphic",graphic:s,layer:this.layer,mapPoint:i}))}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof u?t=[i.uid]:Array.isArray(i)&&i.length>0?typeof i[0]=="number"?t=i:t=i.map(s=>s&&s.uid):f.isCollection(i)&&(t=i.map(s=>s&&s.uid).toArray());const e=t==null?void 0:t.filter(w);return e!=null&&e.length?(this._addHighlight(e),{remove:()=>{this._removeHighlight(e)}}):L}update(i){for(const t of this.graphicsViews())t.processUpdate(i)}attach(){const i=this.view,t=()=>this.requestUpdate(),e=this.layer.featureCollections;if(e!=null&&e.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const s of e){const a=new c(this.view.featuresTilingScheme),o=new m({view:i,graphics:s.source,renderer:s.renderer,requestUpdateCallback:t,container:a});this._graphicsViewsFeatureCollectionMap.set(o,s),this.container.addChild(o.container),this.addHandles([h(()=>s.visible,r=>o.container.visible=r,p),h(()=>o.updating,()=>this.notifyChange("updating"),p)],n)}this._updateHighlight()}else this.layer.sublayers!=null&&this.addHandles(y(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),g)}detach(){this._destroyGraphicsViews(),this.removeHandles(g)}moveStart(){}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.removeHandles(n);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),this.layer.sublayers==null)return;const i=[],t=this.view,e=()=>this.requestUpdate();for(const s of this.layer.sublayers){const a=new C,o=new c(this.view.featuresTilingScheme);o.fadeTransitionEnabled=!0;const r=new m({view:t,graphics:s.graphics,requestUpdateCallback:e,container:o});this.addHandles([s.on("graphic-update",r.graphicUpdateHandler),h(()=>s.visible,d=>r.container.visible=d,p),h(()=>r.updating,()=>this.notifyChange("updating"),p)],n),a.addChild(r.container),this.container.addChild(a),i.push(r)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this.graphicsViews())t.setHighlight(i)}};l=V([_("esri.views.2d.layers.MapNotesLayerView2D")],l);const Ki=l;export{Ki as default};
