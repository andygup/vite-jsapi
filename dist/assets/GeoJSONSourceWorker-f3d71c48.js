import{g6 as g,s as _,dD as $,G as C,d as D,J as Q,b9 as v,L as G,bz as x}from"./index-d00ae83f.js";import{r as P,s as Z,e as A,n as M,t as z}from"./featureConversionUtils-b3dda230.js";import{m as N}from"./FeatureStore-68fbe809.js";import{f as F,g as E}from"./projectionSupport-d1f13059.js";import{X as L}from"./QueryEngine-5cc8b004.js";import{L as B,I as J,T as W}from"./geojson-73d9cb58.js";import{o as U,a as V,i as H}from"./clientSideDefaults-0fd63a73.js";import{y as X,d as b,c as w,u as I,h as q}from"./sourceUtils-5e3340d5.js";import{r as S}from"./FieldsIndex-a1eb524c.js";import{i as Y}from"./fieldType-6aab583d.js";import"./OptimizedGeometry-33b2eb0d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./BoundsStore-c9101bce.js";import"./PooledRBush-cbd17515.js";import"./centroid-8e8cfa47.js";import"./utils-f403ec7c.js";import"./normalizeUtils-d6c32ca7.js";import"./normalizeUtilsCommon-b0b526ae.js";import"./json-48e3ea08.js";import"./MemCache-5adf4213.js";import"./QueryEngineResult-a606508d.js";import"./quantizationUtils-192b773d.js";import"./ItemCache-7c757dbe.js";import"./WhereClause-21f34352.js";import"./executionError-fb3f283a.js";import"./utils-2dde34ad.js";import"./generateRendererUtils-1f0dd08e.js";import"./QueryEngineCapabilities-42e44ded.js";import"./timeSupport-fa946245.js";import"./defaultsJSON-b087dd4d.js";const K={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class ke{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=this._fieldsIndex=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const r=[];await this._checkProjection(e.spatialReference);let s=null;e.url&&(s=await this._fetch(t==null?void 0:t.signal));const n=B(s,{geometryType:e.geometryType}),a=e.fields||n.fields||[],u=e.hasZ!=null?e.hasZ:n.hasZ,d=n.geometryType;let c=e.objectIdField||n.objectIdFieldName||"__OBJECTID";const m=e.spatialReference||g;let i=e.timeInfo;a===n.fields&&n.unknownFields.length>0&&r.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:n.unknownFields}});let l=new S(a).get(c);l?(l.type!=="esriFieldTypeString"&&(l.type="esriFieldTypeOID"),l.editable=!1,l.nullable=!1,c=l.name):(l={alias:c,name:c,type:n.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},a.unshift(l));const h={};for(const o of a){if(o.name==null&&(o.name=o.alias),o.alias==null&&(o.alias=o.name),!o.name)throw new _("geojson-layer:invalid-field-name","field name is missing",{field:o});if(!Y.jsonValues.includes(o.type))throw new _("geojson-layer:invalid-field-type",`invalid type for field "${o.name}"`,{field:o});if(o.name!==l.name){const f=$(o);f!==void 0&&(h[o.name]=f)}}this._fieldsIndex=new S(a);const p=this._fieldsIndex.requiredFields.indexOf(l);if(p>-1&&this._fieldsIndex.requiredFields.splice(p,1),i){if(i.startTimeField){const o=this._fieldsIndex.get(i.startTimeField);o?(i.startTimeField=o.name,o.type="esriFieldTypeDate"):i.startTimeField=null}if(i.endTimeField){const o=this._fieldsIndex.get(i.endTimeField);o?(i.endTimeField=o.name,o.type="esriFieldTypeDate"):i.endTimeField=null}if(i.trackIdField){const o=this._fieldsIndex.get(i.trackIdField);o?i.trackIdField=o.name:(i.trackIdField=null,r.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:i}}))}i.startTimeField||i.endTimeField||(r.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:i}}),i=null)}const R=d?U(d):void 0,y={warnings:r,featureErrors:[],layerDefinition:{...K,drawingInfo:R??void 0,templates:V(h),extent:void 0,geometryType:d,objectIdField:c,fields:a,hasZ:!!u,timeInfo:i}};this._queryEngine=new L({fields:a,geometryType:d,hasM:!1,hasZ:u,objectIdField:c,spatialReference:m,timeInfo:i,featureStore:new N({geometryType:d,hasM:!1,hasZ:u}),cacheSpatialQueries:!0}),this._createDefaultAttributes=H(h,c);const T=await this._createFeatures(s);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,T);const O=this._normalizeFeatures(T,y.warnings,y.featureErrors);this._queryEngine.featureStore.addMany(O);const{fullExtent:k,timeExtent:j}=await this._queryEngine.fetchRecomputedExtents();if(y.layerDefinition.extent=k,j){const{start:o,end:f}=j;y.layerDefinition.timeInfo.timeExtent=[o,f]}return y}async applyEdits(e){const{spatialReference:t,geometryType:r}=this._queryEngine;return await Promise.all([X(t,r),F(e.adds,t),F(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){var s;this._loadOptions.customParameters=e,(s=this._snapshotTask)==null||s.abort(),this._snapshotTask=C(this._snapshotFeatures),this._snapshotTask.promise.then(n=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,n);const a=this._normalizeFeatures(n);a&&this._queryEngine.featureStore.addMany(a)},n=>{this._queryEngine.featureStore.clear(),D(n)||Q.getLogger("esri.layers.GeoJSONLayer").error(new _("geojson-layer:refresh","An error occurred during refresh",{error:n}))}),await this._waitSnapshotComplete();const{fullExtent:t,timeExtent:r}=await this._queryEngine.fetchRecomputedExtents();return{extent:t,timeExtent:r}}async _createFeatures(e){if(e==null)return[];const{geometryType:t,hasZ:r,objectIdField:s}=this._queryEngine,n=J(e,{geometryType:t,hasZ:r,objectIdField:s});if(!v(this._queryEngine.spatialReference,g))for(const a of n)a.geometry!=null&&(a.geometry=P(E(Z(a.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),g,this._queryEngine.spatialReference)));return n}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:r}=this._loadOptions,s=(await G(t,{responseType:"json",query:{...r},signal:e})).data;return await W(s),s}_normalizeFeatures(e,t,r){const{objectIdField:s}=this._queryEngine,n=[];for(const a of e){const u=this._createDefaultAttributes(),d=b(this._fieldsIndex,u,a.attributes,!0,t);d?r==null||r.push(d):(this._assignObjectId(u,a.attributes,!0),a.attributes=u,a.objectId=u[s],n.push(a))}return n}async _applyEdits(e){const{adds:t,updates:r,deletes:s}=e,n={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t&&t.length&&this._applyAddEdits(n,t),r&&r.length&&this._applyUpdateEdits(n,r),s&&s.length){for(const d of s)n.deleteResults.push(w(d));this._queryEngine.featureStore.removeManyById(s)}const{fullExtent:a,timeExtent:u}=await this._queryEngine.fetchRecomputedExtents();return{extent:a,timeExtent:u,featureEditResults:n}}_applyAddEdits(e,t){const{addResults:r}=e,{geometryType:s,hasM:n,hasZ:a,objectIdField:u,spatialReference:d,featureStore:c}=this._queryEngine,m=[];for(const i of t){if(i.geometry&&s!==x(i.geometry)){r.push(I("Incorrect geometry type."));continue}const l=this._createDefaultAttributes(),h=b(this._fieldsIndex,l,i.attributes);if(h)r.push(h);else{if(this._assignObjectId(l,i.attributes),i.attributes=l,i.uid!=null){const p=i.attributes[u];e.uidToObjectId[i.uid]=p}if(i.geometry!=null){const p=i.geometry.spatialReference??d;i.geometry=E(q(i.geometry,p),p,d)}m.push(i),r.push(w(i.attributes[u]))}}c.addMany(A([],m,s,a,n,u))}_applyUpdateEdits({updateResults:e},t){const{geometryType:r,hasM:s,hasZ:n,objectIdField:a,spatialReference:u,featureStore:d}=this._queryEngine;for(const c of t){const{attributes:m,geometry:i}=c,l=m&&m[a];if(l==null){e.push(I(`Identifier field ${a} missing`));continue}if(!d.has(l)){e.push(I(`Feature with object id ${l} missing`));continue}const h=M(d.getFeature(l),r,n,s);if(i!=null){if(r!==x(i)){e.push(I("Incorrect geometry type."));continue}const p=i.spatialReference??u;h.geometry=E(q(i,p),p,u)}if(m){const p=b(this._fieldsIndex,h.attributes,m);if(p){e.push(p);continue}}d.add(z(h,r,n,s,a)),e.push(w(l))}}_createObjectIdGenerator(e,t){const r=e.fieldsIndex.get(e.objectIdField);if(r.type==="esriFieldTypeString")return()=>r.name+"-"+Date.now().toString(16);let s=Number.NEGATIVE_INFINITY;for(const n of t)n.objectId&&(s=Math.max(s,n.objectId));return s=Math.max(0,s)+1,()=>s++}_assignObjectId(e,t,r=!1){const s=this._queryEngine.objectIdField;e[s]=r&&s in t?t[s]:this._objectIdGenerator()}async _checkProjection(e){try{await F(g,e)}catch{throw new _("geojson-layer","Projection not supported")}}}export{ke as default};
