import{J as L,be as f,j5 as K,s,j6 as j,P as F,I as R,du as D,ex as q,j7 as z}from"./index-175d32d0.js";import{i as w}from"./originUtils-1469eeaf.js";import C from"./FeatureLayer-bfa60a8f.js";import{r as M}from"./fetchService-35c55299.js";import{o as v}from"./jsonContext-27afb552.js";import{i as c,a as U,c as S,u as m}from"./portalItemUtils-2b04e7ed.js";import"./multiOriginJSONSupportUtils-c978f4c3.js";import"./UniqueValueRenderer-288172e9.js";import"./LegendOptions-8e12359c.js";import"./diffUtils-1e0b45c5.js";import"./SizeVariable-41a3e64d.js";import"./colorRamps-f4ee9bc5.js";import"./sizeVariableUtils-d4870b0d.js";import"./lengthUtils-349f6f20.js";import"./ColorStop-b164d74d.js";import"./jsonUtils-a54641ba.js";import"./styleUtils-659e6a41.js";import"./featureFlags-a084cf3d.js";import"./jsonUtils-10bdfdc6.js";import"./DictionaryLoader-9b7beab2.js";import"./LRUCache-05c2e0c8.js";import"./MemCache-8e066c91.js";import"./FieldsIndex-2024344c.js";import"./heatmapUtils-4fba0b55.js";import"./vec4f64-aa64c7e9.js";import"./MultiOriginJSONSupport-717d0bca.js";import"./sql-d95c95ff.js";import"./FeatureLayerBase-04bbcd1e.js";import"./Field-b346df3f.js";import"./fieldType-0ef39ec5.js";import"./commonProperties-1c6cac45.js";import"./ElevationInfo-ed295995.js";import"./AttachmentQuery-9dd68404.js";import"./Query-91daeb60.js";import"./RelationshipQuery-84aa24cd.js";import"./serviceCapabilitiesUtils-2941b77b.js";import"./editsZScale-fe0015a8.js";import"./queryZScale-e9f696ed.js";import"./FeatureSet-abad50cc.js";import"./APIKeyMixin-f34e52f8.js";import"./ArcGISService-f83509f7.js";import"./BlendLayer-5b5c1cfc.js";import"./jsonUtils-82684178.js";import"./parser-be52f54c.js";import"./CustomParametersMixin-1f4c24f4.js";import"./EditBusLayer-a7eac63b.js";import"./FeatureReductionLayer-41ba8738.js";import"./FeatureEffect-5be74af9.js";import"./clusterUtils-64f88ebd.js";import"./labelingInfo-ffafbf0b.js";import"./labelUtils-358af0bc.js";import"./defaultsJSON-b087dd4d.js";import"./OperationalLayer-99f6f269.js";import"./OrderedLayer-3d96b800.js";import"./PortalLayer-52ac5aae.js";import"./RefreshableLayer-b8ac4210.js";import"./ScaleRangeLayer-89d5cd65.js";import"./TemporalLayer-bc0a0246.js";import"./FeatureTemplate-58d57d25.js";import"./FeatureType-5988a10a.js";import"./fieldProperties-534769d4.js";import"./versionUtils-6b85bef6.js";import"./styleUtils-7b847a1c.js";import"./TopFeaturesQuery-0e608672.js";import"./popupUtils-10b246d3.js";const Y=L.getLogger("esri.layers.FeatureLayer"),d="Feature Service";function u(t,r){return`Layer (title: ${t.title}, id: ${t.id}) of type '${t.declaredClass}' ${r}`}function P(t,r){if(r.type!==d)throw new s("feature-layer:portal-item-wrong-type",u(t,`should have portal item of type "${d}"`))}async function A(t){if(await t.load(),K(t))throw new s("feature-layer:save",u(t,"using an in-memory source cannot be saved to a portal item"))}function _(t,r){let e=(t.messages??[]).filter(({type:a})=>a==="error").map(({name:a,message:i,details:o})=>new s(a,i,o));if(r!=null&&r.ignoreUnsupported&&(e=e.filter(({name:a})=>a!=="layer:unsupported"&&a!=="symbol:unsupported"&&a!=="symbol-layer:unsupported"&&a!=="property:unsupported"&&a!=="url:unsupported")),e.length>0)throw new s("feature-layer:save","Failed to save feature layer due to unsupported or invalid content. See 'details.errors' for more detailed information",{errors:e})}async function h(t,r,e){"beforeSave"in t&&typeof t.beforeSave=="function"&&await t.beforeSave();const a=t.write({},r);return _(r,e),a}function N(t){const{layer:r,layerJSON:e}=t;return r.isTable?{layers:[],tables:[e]}:{layers:[e],tables:[]}}function b(t){c(t,m.JSAPI),t.typeKeywords&&(t.typeKeywords=t.typeKeywords.filter((r,e,a)=>a.indexOf(r)===e))}function B(t){const r=t.portalItem;if(!r)throw Y.error("save: requires the portalItem property to be set"),new s("feature-layer:portal-item-not-set",u(t,"requires the portalItem property to be set"));if(!r.loaded)throw new s("feature-layer:portal-item-not-loaded",u(t,"cannot be saved to a portal item that does not exist or is inaccessible"));P(t,r)}async function O(t,r){return/\/\d+\/?$/.test(t.url??"")?N(r[0]):G(t,r)}async function G(t,r){const{layer:{url:e,customParameters:a,apiKey:i}}=r[0];let o=await t.fetchData("json");o&&o.layers!=null&&o.tables!=null||(o=await H(o,{url:e??"",customParameters:a,apiKey:i},r.map(l=>l.layer.layerId)));for(const l of r)x(l.layer,l.layerJSON,o);return o}async function H(t,r,e){var a,i;t||(t={}),(a=t).layers||(a.layers=[]),(i=t).tables||(i.tables=[]);const{url:o,customParameters:l,apiKey:n}=r,{serviceJSON:p,layersJSON:y}=await M(o,{customParameters:l,apiKey:n}),I=g(t.layers,p.layers,e),$=g(t.tables,p.tables,e);t.layers=I.itemResources,t.tables=$.itemResources;const T=[...I.added,...$.added],E=y?[...y.layers,...y.tables]:[];return await k(t,T,o,E),t}function g(t,r,e){const a=j(t,r,(o,l)=>o.id===l.id);t=t.filter(o=>!a.removed.some(l=>l.id===o.id));const i=a.added.map(({id:o})=>({id:o}));return i.forEach(({id:o})=>{t.push({id:o})}),{itemResources:t,added:i.filter(({id:o})=>!e.includes(o))}}async function k(t,r,e,a){const i=r.map(({id:o})=>new C({url:e,layerId:o,sourceJSON:a.find(({id:l})=>l===o)}));await F(i.map(o=>o.load())),i.forEach(o=>{const{layerId:l,loaded:n,defaultPopupTemplate:p}=o;!n||p==null||x(o,{id:l,popupInfo:p.toJSON()},t)})}function x(t,r,e){t.isTable?J(e.tables,r):J(e.layers,r)}function J(t,r){if(!t)return;const e=t.findIndex(({id:a})=>a===r.id);e===-1?t.push(r):t[e]=r}function Q(t){const{portalItem:r}=t;return z(t)&&!t.dynamicDataSource&&!!(r!=null&&r.loaded)&&r.type===d}async function V(t){if(!(t!=null&&t.length))throw new s("feature-layer-utils-saveall:missing-parameters","'layers' array should contain at least one feature layer");await Promise.all(t.map(a=>a.load()));for(const a of t)if(!Q(a))throw new s("feature-layer-utils-saveall:invalid-parameters",`'layers' array should only contain layers or tables in a feature service loaded from 'Feature Service' item. ${u(a,"does not conform")}`,{layer:a});const r=t.map(a=>a.portalItem.id);if(new Set(r).size>1)throw new s("feature-layer-utils-saveall:invalid-parameters","All layers in the 'layers' array should be loaded from the same portal item");const e=t.map(a=>a.layerId);if(new Set(e).size!==e.length)throw new s("feature-layer-utils-saveall:invalid-parameters","'layers' array should contain only one instance each of layer or table in a feature service")}function W(t,r){var e,a;let i=R.from(r);return i.id&&(i=i.clone(),i.id=null),(e=i).type??(e.type=d),(a=i).portal??(a.portal=D.getDefault()),P(t,i),i}async function X(t,r){const{url:e,layerId:a,title:i,fullExtent:o,isTable:l}=t,n=q(e),p=n!=null&&n.serverType==="FeatureServer";r.url=p?e:`${e}/${a}`,r.title||(r.title=i),r.extent=null,l||o==null||(r.extent=await U(o)),S(r,m.METADATA),S(r,m.MULTI_LAYER),c(r,m.SINGLE_LAYER),l&&c(r,m.TABLE),b(r)}async function Z(t,r,e){var i;const a=t.portal;await(a==null?void 0:a.signIn()),await((i=a==null?void 0:a.user)==null?void 0:i.addItem({item:t,data:r,folder:e==null?void 0:e.folder}))}const yr=f(tt);async function tt(t,r){await A(t),B(t);const e=t.portalItem,a=v(e),i=await h(t,a,r),o=await O(e,[{layer:t,layerJSON:i}]);return b(e),await e.update({data:o}),w(a),e}const cr=f(async(t,r)=>{await V(t);const e=t[0].portalItem,a=v(e),i=await Promise.all(t.map(l=>h(l,a,r))),o=await O(e,t.map((l,n)=>({layer:l,layerJSON:i[n]})));return b(e),await e.update({data:o}),await Promise.all(t.slice(1).map(l=>l.portalItem.reload())),w(a),e.clone()}),fr=f(rt);async function rt(t,r,e){await A(t);const a=W(t,r),i=v(a),o=N({layer:t,layerJSON:await h(t,i,e)});return await X(t,a),await Z(a,o,e),t.portalItem=a,w(i),a}export{yr as save,cr as saveAll,fr as saveAs};
