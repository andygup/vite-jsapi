import{a as b}from"./Error-bd05b442.js";import{e as d}from"./typedArrayUtil-2bcf3cee.js";import"./string-3d0ebcd3.js";let u;function h(n,t){let e=t.responseType;e?e!=="array-buffer"&&e!=="blob"&&e!=="json"&&e!=="native"&&e!=="native-request-init"&&e!=="text"&&(e="text"):e="json",t.responseType=e;const c=d(t.signal);return delete t.signal,globalThis.invokeStaticMessage("request",{url:n,options:t},{signal:c}).then(async r=>{let i,a,f,l,s;if(r.data)if(r.data instanceof ArrayBuffer){if(!(e!=="json"&&e!=="text"&&e!=="blob"||(i=new Blob([r.data]),e!=="json"&&e!=="text"||(u||(u=new FileReaderSync),l=u.readAsText(i),e!=="json")))){try{a=JSON.parse(l||null)}catch(o){const p={...o,url:n,requestOptions:t};throw new b("request:server",o.message,p)}if(a.error){const o={...a.error,url:n,requestOptions:t};throw new b("request:server",a.error.message,o)}}}else e==="native"&&(r.data.signal=c,f=await fetch(r.data.url,r.data));switch(e){case"blob":s=i;break;case"json":s=a;break;case"native":s=f;break;case"text":s=l;break;default:s=r.data}return{data:s,requestOptions:t,ssl:r.ssl,url:n}})}export{h as execute};
