import{J as L,bi as f,j9 as K,s,ja as j,P as F,I as R,dy as D,eB as q,jb as z}from"./index-65afe59f.js";import{i as w}from"./originUtils-1469eeaf.js";import C from"./FeatureLayer-d29725e7.js";import{r as M}from"./fetchService-01391f31.js";import{o as v}from"./jsonContext-a0b4627b.js";import{i as c,a as U,c as S,u as m}from"./portalItemUtils-44900d59.js";import"./multiOriginJSONSupportUtils-c978f4c3.js";import"./UniqueValueRenderer-c45fa812.js";import"./LegendOptions-d5bf6b73.js";import"./diffUtils-0f0e8cfe.js";import"./SizeVariable-e7f3c0e2.js";import"./colorRamps-08b57831.js";import"./sizeVariableUtils-d4870b0d.js";import"./lengthUtils-00939dab.js";import"./ColorStop-03954883.js";import"./jsonUtils-15c906c8.js";import"./styleUtils-00c8d6d5.js";import"./featureFlags-acda3469.js";import"./jsonUtils-cf75a5b6.js";import"./DictionaryLoader-b3115f22.js";import"./LRUCache-fba88a6d.js";import"./MemCache-b8f96232.js";import"./FieldsIndex-6df00c0a.js";import"./heatmapUtils-1ed1bbca.js";import"./vec4f64-aa64c7e9.js";import"./MultiOriginJSONSupport-94ddedfa.js";import"./sql-c4c85944.js";import"./FeatureLayerBase-6ded2ba8.js";import"./Field-f17f32a3.js";import"./fieldType-d8edb871.js";import"./commonProperties-605b6017.js";import"./ElevationInfo-926fbbdf.js";import"./AttachmentQuery-02a78654.js";import"./Query-380d10a1.js";import"./RelationshipQuery-8b36d96a.js";import"./serviceCapabilitiesUtils-722c1e48.js";import"./editsZScale-c8ac5d3c.js";import"./queryZScale-2ed7be3c.js";import"./FeatureSet-725ad5ad.js";import"./APIKeyMixin-a73b4a94.js";import"./ArcGISService-d205da9a.js";import"./BlendLayer-bf12370f.js";import"./jsonUtils-7e0542f0.js";import"./parser-8554880e.js";import"./CustomParametersMixin-c6bdaa0b.js";import"./EditBusLayer-418a86f7.js";import"./FeatureReductionLayer-3b76ad31.js";import"./FeatureEffect-8de6067b.js";import"./clusterUtils-a342a95a.js";import"./labelingInfo-a25619a7.js";import"./labelUtils-ec59d2a3.js";import"./defaultsJSON-b087dd4d.js";import"./OperationalLayer-87798fca.js";import"./OrderedLayer-73c6bf5c.js";import"./PortalLayer-22d5b96f.js";import"./RefreshableLayer-25a5ecc8.js";import"./ScaleRangeLayer-bcba2562.js";import"./TemporalLayer-2faea16c.js";import"./FeatureTemplate-e720f0c6.js";import"./FeatureType-cefa53ac.js";import"./fieldProperties-776bdeb8.js";import"./versionUtils-87e003f4.js";import"./styleUtils-c510b82d.js";import"./TopFeaturesQuery-a106986f.js";import"./popupUtils-15651f00.js";const Y=L.getLogger("esri.layers.FeatureLayer"),d="Feature Service";function u(t,r){return`Layer (title: ${t.title}, id: ${t.id}) of type '${t.declaredClass}' ${r}`}function P(t,r){if(r.type!==d)throw new s("feature-layer:portal-item-wrong-type",u(t,`should have portal item of type "${d}"`))}async function A(t){if(await t.load(),K(t))throw new s("feature-layer:save",u(t,"using an in-memory source cannot be saved to a portal item"))}function _(t,r){let e=(t.messages??[]).filter(({type:a})=>a==="error").map(({name:a,message:i,details:o})=>new s(a,i,o));if(r!=null&&r.ignoreUnsupported&&(e=e.filter(({name:a})=>a!=="layer:unsupported"&&a!=="symbol:unsupported"&&a!=="symbol-layer:unsupported"&&a!=="property:unsupported"&&a!=="url:unsupported")),e.length>0)throw new s("feature-layer:save","Failed to save feature layer due to unsupported or invalid content. See 'details.errors' for more detailed information",{errors:e})}async function b(t,r,e){"beforeSave"in t&&typeof t.beforeSave=="function"&&await t.beforeSave();const a=t.write({},r);return _(r,e),a}function N(t){const{layer:r,layerJSON:e}=t;return r.isTable?{layers:[],tables:[e]}:{layers:[e],tables:[]}}function h(t){c(t,m.JSAPI),t.typeKeywords&&(t.typeKeywords=t.typeKeywords.filter((r,e,a)=>a.indexOf(r)===e))}function B(t){const r=t.portalItem;if(!r)throw Y.error("save: requires the portalItem property to be set"),new s("feature-layer:portal-item-not-set",u(t,"requires the portalItem property to be set"));if(!r.loaded)throw new s("feature-layer:portal-item-not-loaded",u(t,"cannot be saved to a portal item that does not exist or is inaccessible"));P(t,r)}async function O(t,r){return/\/\d+\/?$/.test(t.url??"")?N(r[0]):G(t,r)}async function G(t,r){const{layer:{url:e,customParameters:a,apiKey:i}}=r[0];let o=await t.fetchData("json");o&&o.layers!=null&&o.tables!=null||(o=await H(o,{url:e??"",customParameters:a,apiKey:i},r.map(l=>l.layer.layerId)));for(const l of r)T(l.layer,l.layerJSON,o);return o}async function H(t,r,e){var a,i;t||(t={}),(a=t).layers||(a.layers=[]),(i=t).tables||(i.tables=[]);const{url:o,customParameters:l,apiKey:n}=r,{serviceJSON:p,layersJSON:y}=await M(o,{customParameters:l,apiKey:n}),I=g(t.layers,p.layers,e),$=g(t.tables,p.tables,e);t.layers=I.itemResources,t.tables=$.itemResources;const x=[...I.added,...$.added],E=y?[...y.layers,...y.tables]:[];return await k(t,x,o,E),t}function g(t,r,e){const a=j(t,r,(o,l)=>o.id===l.id);t=t.filter(o=>!a.removed.some(l=>l.id===o.id));const i=a.added.map(({id:o})=>({id:o}));return i.forEach(({id:o})=>{t.push({id:o})}),{itemResources:t,added:i.filter(({id:o})=>!e.includes(o))}}async function k(t,r,e,a){const i=r.map(({id:o})=>new C({url:e,layerId:o,sourceJSON:a.find(({id:l})=>l===o)}));await F(i.map(o=>o.load())),i.forEach(o=>{const{layerId:l,loaded:n,defaultPopupTemplate:p}=o;!n||p==null||T(o,{id:l,popupInfo:p.toJSON()},t)})}function T(t,r,e){t.isTable?J(e.tables,r):J(e.layers,r)}function J(t,r){if(!t)return;const e=t.findIndex(({id:a})=>a===r.id);e===-1?t.push(r):t[e]=r}function Q(t){const{portalItem:r}=t;return z(t)&&!t.dynamicDataSource&&!!(r!=null&&r.loaded)&&r.type===d}async function V(t){if(!(t!=null&&t.length))throw new s("feature-layer-utils-saveall:missing-parameters","'layers' array should contain at least one feature layer");await Promise.all(t.map(a=>a.load()));for(const a of t)if(!Q(a))throw new s("feature-layer-utils-saveall:invalid-parameters",`'layers' array should only contain layers or tables in a feature service loaded from 'Feature Service' item. ${u(a,"does not conform")}`,{layer:a});const r=t.map(a=>a.portalItem.id);if(new Set(r).size>1)throw new s("feature-layer-utils-saveall:invalid-parameters","All layers in the 'layers' array should be loaded from the same portal item");const e=t.map(a=>a.layerId);if(new Set(e).size!==e.length)throw new s("feature-layer-utils-saveall:invalid-parameters","'layers' array should contain only one instance each of layer or table in a feature service")}function W(t,r){var e,a;let i=R.from(r);return i.id&&(i=i.clone(),i.id=null),(e=i).type??(e.type=d),(a=i).portal??(a.portal=D.getDefault()),P(t,i),i}async function X(t,r){const{url:e,layerId:a,title:i,fullExtent:o,isTable:l}=t,n=q(e),p=n!=null&&n.serverType==="FeatureServer";r.url=p?e:`${e}/${a}`,r.title||(r.title=i),r.extent=null,l||o==null||(r.extent=await U(o)),S(r,m.METADATA),S(r,m.MULTI_LAYER),c(r,m.SINGLE_LAYER),l&&c(r,m.TABLE),h(r)}async function Z(t,r,e){var i;const a=t.portal;await(a==null?void 0:a.signIn()),await((i=a==null?void 0:a.user)==null?void 0:i.addItem({item:t,data:r,folder:e==null?void 0:e.folder}))}const yr=f(tt);async function tt(t,r){await A(t),B(t);const e=t.portalItem,a=v(e),i=await b(t,a,r),o=await O(e,[{layer:t,layerJSON:i}]);return h(e),await e.update({data:o}),w(a),e}const cr=f(async(t,r)=>{await V(t);const e=t[0].portalItem,a=v(e),i=await Promise.all(t.map(l=>b(l,a,r))),o=await O(e,t.map((l,n)=>({layer:l,layerJSON:i[n]})));return h(e),await e.update({data:o}),await Promise.all(t.slice(1).map(l=>l.portalItem.reload())),w(a),e.clone()}),fr=f(rt);async function rt(t,r,e){await A(t);const a=W(t,r),i=v(a),o=N({layer:t,layerJSON:await b(t,i,e)});return await X(t,a),await Z(a,o,e),t.portalItem=a,w(i),a}export{yr as save,cr as saveAll,fr as saveAs};
