import{ab as w,f as b,w as d,h as g,l as E,aW as k,ap as C,cv as h,d as F,C as c,au as A,V as $,v as G,hx as m,a9 as R,W as x,hJ as P,f4 as I,eL as O,e as a,y as l,b as H,a0 as Z,dn as z}from"./index-df1c7459.js";import{p as L}from"./normalizeUtilsSync-7d22b6b0.js";import{g as W}from"./FeatureStore-418dd9e9.js";import{e as M}from"./QueryEngine-311866fa.js";import{y as j}from"./elevationInfoUtils-10fbf022.js";import{d as q,b as T}from"./DimensionAnalysisView3D-3e1bbd13.js";import{i as B,p as J}from"./queryEngineUtils-78d19d5b.js";import{r as _,a as V,n as f}from"./symbologySnappingCandidates-f885f78f.js";import"./BoundsStore-968ad8c4.js";import"./PooledRBush-47b3e53d.js";import"./quickselect-56c5966e.js";import"./optimizedFeatureQueryEngineAdapter-9cf4c9eb.js";import"./centroid-0a3057d6.js";import"./QueryEngineResult-a75eda3b.js";import"./WhereClause-2e7ef2fe.js";import"./executionError-fb3f283a.js";import"./utils-a8845e41.js";import"./generateRendererUtils-f1e35d90.js";import"./json-48e3ea08.js";import"./QueryEngineCapabilities-42e44ded.js";import"./LineVisualElement-901b3a69.js";import"./LengthDimension-5c564e9a.js";import"./Segment-6c61f9bf.js";import"./analysisViewUtils-40ed6f5d.js";import"./ImageMaterial-292dd32e.js";import"./Factory-8829b7a4.js";import"./RightAngleQuadVisualElement-d6319a8f.js";import"./VisualElementResources-a5b06114.js";import"./PointVisualElement-34f1a7e7.js";import"./colorUtils-c0f43caf.js";import"./EditGeometryOperations-0319718a.js";import"./dehydratedFeatureComparison-aa5ddb9e.js";import"./RenderTexture-a5186133.js";import"./VertexSnappingCandidate-9132cf51.js";const v="graphics-collections";let n=class extends w(b){get updating(){return this.updatingHandles.updating}get _hasZ(){const e=this.view;return d(e)&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes"}get _snappingElevationAligner(){const{view:e}=this,{layer:t}=this.layerSource,i=d(e)&&e.type==="3d";if(!i||t.type==="map-notes")return _();const s=async(r,o)=>(await Z(e.whenLayerView(t),o)).elevationAlignPointsInFeatures(r,o);return _(i,{elevationInfo:t.elevationInfo,alignPointsInFeatures:s,spatialReference:e.spatialReference})}get _snappingElevationFilter(){const{view:e}=this,t=d(e)&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes";return V(t)}get _symbologySnappingFetcher(){const{view:e}=this,{layer:t}=this.layerSource,i=d(e)&&e.type==="3d",s=this._extrudedPolygonSymbolsCount>0;return i&&t.type!=="map-notes"&&s?f(s,async(r,o)=>{const p=await e.whenLayerView(t);return h(o),p.queryForSymbologySnapping({candidates:r,spatialReference:e.spatialReference},o)}):f()}constructor(e){super(e),this.availability=1,this._sources={multipoint:null,point:null,polygon:null,polyline:null},this._loadedWkids=new Set,this._loadedWkts=new Set,this._pendingAdds=[],this._extrudedPolygonSymbolsCount=0}destroy(){for(const e of this._pendingAdds)e.task.abort();this._pendingAdds.length=0,this._mapSources(e=>this._destroySource(e))}initialize(){this.updatingHandles.add(()=>this.getGraphicsLayers(),i=>{this.updatingHandles.removeHandles(v);for(const s of i)this._addMany(s.graphics.toArray()),this.handles.add([s.on("graphic-update",r=>this._onGraphicUpdate(r)),this.updatingHandles.addOnCollectionChange(()=>s.graphics,r=>this._onGraphicsChanged(r))],v)},g);const{view:e}=this,{layer:t}=this.layerSource;d(e)&&e.type==="3d"&&t.type!=="map-notes"&&this.addHandles([e.elevationProvider.on("elevation-change",({context:i})=>{j(i,t.elevationInfo)&&this._snappingElevationAligner.notifyElevationSourceChange()}),E(()=>t.elevationInfo,()=>this._snappingElevationAligner.notifyElevationSourceChange(),g),k(()=>t,["edits","apply-edits","graphic-update"],()=>this._symbologySnappingFetcher.notifySymbologyChange())])}async fetchCandidates(e,t){const{point:i}=e,s=await C(this._mapSources(p=>this._fetchCandidatesForSource(p,e,t)));h(t);const r=this._getGroundElevation,o=s.flat().map(p=>B(p,r));return q(i,o),o}get _getGroundElevation(){return J(this.view)}async _fetchCandidatesForSource(e,t,i){var y;const s=T(t,((y=F(this.view))==null?void 0:y.type)??"2d"),r=await e.queryEngine.executeQueryForSnapping(s,i);h(i);const o=await this._snappingElevationAligner.alignCandidates(r.candidates,i);h(i);const p=await this._symbologySnappingFetcher.fetch(o,i);h(i);const S=p.length===0?o:[...o,...p];return this._snappingElevationFilter.filter(s,S)}refresh(){}_onGraphicUpdate(e){if(this.getGraphicsLayers().some(t=>t.graphics.includes(e.graphic)))switch(e.property){case"geometry":case"visible":this._remove(e.graphic),this._addMany([e.graphic])}}_onGraphicsChanged(e){for(const t of e.removed)this._remove(t);this._addMany(e.added)}_addMany(e){const t=[],i=new Map;for(const s of e)c(s.geometry)||(this._needsInitializeProjection(s.geometry.spatialReference)?(t.push(s.geometry.spatialReference),i.set(s.uid,s)):this._add(s));this._createPendingAdd(t,i)}_createPendingAdd(e,t){if(!e.length)return;const i=A(async o=>{await $(e.map(p=>({source:p,dest:this.spatialReference})),{signal:o}),this._markLoadedSpatialReferences(e);for(const[,p]of t)this._add(p)});this.updatingHandles.addPromise(i.promise);const s={task:i,graphics:t},r=()=>z(this._pendingAdds,s);i.promise.then(r,r),this._pendingAdds.push(s)}_markLoadedSpatialReferences(e){for(const t of e)t.wkid!=null&&this._loadedWkids.add(t.wkid),t.wkt!=null&&this._loadedWkts.add(t.wkt)}_add(e){if(c(e.geometry)||!e.visible)return;let t=e.geometry;if(t.type==="mesh")return;t.type==="extent"&&(t=G.fromExtent(t));const i=this._ensureSource(t.type);if(c(i))return;const s=this._createOptimizedFeature(e.uid,t);c(s)||(i.featureStore.add(s),m(e.symbol)&&this._extrudedPolygonSymbolsCount++)}_needsInitializeProjection(e){return(e.wkid==null||!this._loadedWkids.has(e.wkid))&&(e.wkt==null||!this._loadedWkts.has(e.wkt))&&!R(e,this.spatialReference)}_createOptimizedFeature(e,t){const i=x(L(t),this.spatialReference);if(!i)return null;const s=this._ensureGeometryHasZ(i),r=P(s,this._hasZ,!1);return new I(r,{[u]:e},null,e)}_ensureGeometryHasZ(e){if(!this._hasZ)return e;const t=s=>{for(;s.length<3;)s.push(0)},i=e.clone();switch(i.hasZ=!0,i.type){case"point":i.z=i.z??0;break;case"multipoint":i.points.forEach(t);break;case"polyline":i.paths.forEach(s=>s.forEach(t));break;case"polygon":i.rings.forEach(s=>s.forEach(t))}return i}_ensureSource(e){const t=this._sources[e];if(d(t))return t;const i=this._createSource(e);return this._sources[e]=i,i}_createSource(e){const t=O.toJSON(e),i=this._hasZ,s=new W({geometryType:t,hasZ:i,hasM:!1});return{featureStore:s,queryEngine:new M({featureStore:s,fields:[{name:u,type:"esriFieldTypeOID",alias:u}],geometryType:t,hasM:!1,hasZ:i,objectIdField:u,spatialReference:this.spatialReference,scheduler:d(this.view)&&this.view.type==="3d"?this.view.resourceController.scheduler:null}),type:e}}_remove(e){this._mapSources(t=>this._removeFromSource(t,e));for(const t of this._pendingAdds)t.graphics.delete(e.uid),t.graphics.size===0&&t.task.abort()}_removeFromSource(e,t){const i=t.uid;e.featureStore.has(i)&&(e.featureStore.removeById(t.uid),m(t.symbol)&&this._extrudedPolygonSymbolsCount--)}_destroySource(e){e.queryEngine.destroy(),this._sources[e.type]=null}_mapSources(e){const{point:t,polygon:i,polyline:s,multipoint:r}=this._sources,o=[];return d(t)&&o.push(e(t)),d(i)&&o.push(e(i)),d(s)&&o.push(e(s)),d(r)&&o.push(e(r)),o}};a([l()],n.prototype,"getGraphicsLayers",void 0),a([l({constructOnly:!0})],n.prototype,"layerSource",void 0),a([l({constructOnly:!0})],n.prototype,"spatialReference",void 0),a([l({constructOnly:!0})],n.prototype,"view",void 0),a([l({readOnly:!0})],n.prototype,"updating",null),a([l({readOnly:!0})],n.prototype,"availability",void 0),a([l()],n.prototype,"_hasZ",null),a([l()],n.prototype,"_snappingElevationAligner",null),a([l()],n.prototype,"_snappingElevationFilter",null),a([l()],n.prototype,"_symbologySnappingFetcher",null),a([l()],n.prototype,"_extrudedPolygonSymbolsCount",void 0),a([l()],n.prototype,"_getGroundElevation",null),n=a([H("esri.views.interactive.snapping.featureSources.GraphicsSnappingSource")],n);const u="OBJECTID";export{n as GraphicsSnappingSource};
