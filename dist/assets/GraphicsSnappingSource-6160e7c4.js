import{aq as v,m as S,h as u,g as w,ai as b,bi as k,df as d,bn as E,R as C,j as F,jx as y,b6 as P,P as R,k1 as A,fP as G,ft as I,e as a,y as l,a as x,X as O,e2 as $}from"./index-c18a96f3.js";import{a as Z}from"./normalizeUtilsSync-e06bfdcb.js";import{m as z}from"./FeatureStore-138406a2.js";import{K as H}from"./QueryEngine-e3cb4f5a.js";import{m as L}from"./elevationInfoUtils-0942f737.js";import{u as M,b as W}from"./DimensionAnalysisView3D-940dc329.js";import{i as j,o as q}from"./queryEngineUtils-26a45d4c.js";import{i as m,r as T,n as g}from"./symbologySnappingCandidates-016b4418.js";import"./normalizeUtilsCommon-f4f57432.js";import"./BoundsStore-7e7c2c1f.js";import"./PooledRBush-24cc671a.js";import"./quickselect-228eff3e.js";import"./optimizedFeatureQueryEngineAdapter-ead78535.js";import"./centroid-8e8cfa47.js";import"./normalizeUtils-55909f8c.js";import"./WhereClause-d48af787.js";import"./executionError-c92d3b85.js";import"./json-48e3ea08.js";import"./QueryEngineCapabilities-42e44ded.js";import"./utils-9410323d.js";import"./generateRendererUtils-339821e1.js";import"./FieldsIndex-b071eb44.js";import"./LineVisualElement-b8f3b4e1.js";import"./LengthDimension-337b3314.js";import"./Segment-9c153a75.js";import"./unitFormatUtils-39366885.js";import"./analysisViewUtils-69ec7df1.js";import"./ImageMaterial-407709d5.js";import"./Factory-da39f36c.js";import"./RightAngleQuadVisualElement-c5560eb4.js";import"./VisualElementResources-34ee4b9f.js";import"./PointVisualElement-1e124b61.js";import"./colorUtils-c0f43caf.js";import"./EditGeometryOperations-a08283b2.js";import"./dehydratedFeatureComparison-4aa61d0c.js";import"./RenderTexture-01b4d2e8.js";import"./VertexSnappingCandidate-8f07d060.js";import"./LRUCache-126d04a0.js";const _="graphics-collections";let r=class extends v(S){get updating(){return this.updatingHandles.updating}get _hasZ(){const e=this.view;return e!=null&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes"}get _snappingElevationAligner(){const{view:e}=this,{layer:t}=this.layerSource,i=e!=null&&e.type==="3d";if(!i||t.type==="map-notes")return m();const o=async(n,s)=>(await O(e.whenLayerView(t),s)).elevationAlignPointsInFeatures(n,s);return m(i,{elevationInfo:t.elevationInfo,alignPointsInFeatures:o,spatialReference:e.spatialReference})}get _snappingElevationFilter(){const{view:e}=this,t=e!=null&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes";return T(t)}get _symbologySnappingFetcher(){const{view:e}=this,{layer:t}=this.layerSource,i=e!=null&&e.type==="3d",o=this._extrudedPolygonSymbolsCount>0;return i&&t.type!=="map-notes"&&o?g(o,async(n,s)=>{const p=await e.whenLayerView(t);return d(s),p.queryForSymbologySnapping({candidates:n,spatialReference:e.spatialReference},s)}):g()}constructor(e){super(e),this.availability=1,this._sources={multipoint:null,point:null,polygon:null,polyline:null},this._loadedWkids=new Set,this._loadedWkts=new Set,this._pendingAdds=[],this._extrudedPolygonSymbolsCount=0}destroy(){for(const e of this._pendingAdds)e.task.abort();this._pendingAdds.length=0,this._mapSources(e=>this._destroySource(e))}initialize(){this.updatingHandles.add(()=>this.getGraphicsLayers(),i=>{this.updatingHandles.removeHandles(_);for(const o of i)this._addMany(o.graphics.toArray()),this.handles.add([o.on("graphic-update",n=>this._onGraphicUpdate(n)),this.updatingHandles.addOnCollectionChange(()=>o.graphics,n=>this._onGraphicsChanged(n))],_)},u);const{view:e}=this,{layer:t}=this.layerSource;e!=null&&e.type==="3d"&&t.type!=="map-notes"&&this.addHandles([e.elevationProvider.on("elevation-change",({context:i})=>{L(i,t.elevationInfo)&&this._snappingElevationAligner.notifyElevationSourceChange()}),w(()=>t.elevationInfo,()=>this._snappingElevationAligner.notifyElevationSourceChange(),u),b(()=>t,["edits","apply-edits","graphic-update"],()=>this._symbologySnappingFetcher.notifySymbologyChange())])}async fetchCandidates(e,t){const{point:i}=e,o=await k(this._mapSources(p=>this._fetchCandidatesForSource(p,e,t)));d(t);const n=this._getGroundElevation,s=o.flat().map(p=>j(p,n));return M(i,s),s}get _getGroundElevation(){return q(this.view)}async _fetchCandidatesForSource(e,t,i){var h;const o=W(t,((h=this.view)==null?void 0:h.type)??"2d"),n=await e.queryEngine.executeQueryForSnapping(o,i);d(i);const s=await this._snappingElevationAligner.alignCandidates(n.candidates,i);d(i);const p=await this._symbologySnappingFetcher.fetch(s,i);d(i);const f=p.length===0?s:[...s,...p];return this._snappingElevationFilter.filter(o,f)}refresh(){}_onGraphicUpdate(e){if(this.getGraphicsLayers().some(t=>t.graphics.includes(e.graphic)))switch(e.property){case"geometry":case"visible":this._remove(e.graphic),this._addMany([e.graphic])}}_onGraphicsChanged(e){for(const t of e.removed)this._remove(t);this._addMany(e.added)}_addMany(e){const t=[],i=new Map;for(const o of e)o.geometry!=null&&(this._needsInitializeProjection(o.geometry.spatialReference)?(t.push(o.geometry.spatialReference),i.set(o.uid,o)):this._add(o));this._createPendingAdd(t,i)}_createPendingAdd(e,t){if(!e.length)return;const i=E(async s=>{await C(e.map(p=>({source:p,dest:this.spatialReference})),{signal:s}),this._markLoadedSpatialReferences(e);for(const[,p]of t)this._add(p)});this.updatingHandles.addPromise(i.promise);const o={task:i,graphics:t},n=()=>$(this._pendingAdds,o);i.promise.then(n,n),this._pendingAdds.push(o)}_markLoadedSpatialReferences(e){for(const t of e)t.wkid!=null&&this._loadedWkids.add(t.wkid),t.wkt!=null&&this._loadedWkts.add(t.wkt)}_add(e){if(e.geometry==null||!e.visible)return;let t=e.geometry;if(t.type==="mesh")return;t.type==="extent"&&(t=F.fromExtent(t));const i=this._ensureSource(t.type);if(i==null)return;const o=this._createOptimizedFeature(e.uid,t);o!=null&&(i.featureStore.add(o),y(e.symbol)&&this._extrudedPolygonSymbolsCount++)}_needsInitializeProjection(e){return(e.wkid==null||!this._loadedWkids.has(e.wkid))&&(e.wkt==null||!this._loadedWkts.has(e.wkt))&&!P(e,this.spatialReference)}_createOptimizedFeature(e,t){const i=R(Z(t),this.spatialReference);if(!i)return null;const o=this._ensureGeometryHasZ(i),n=A(o,this._hasZ,!1);return new G(n,{[c]:e},null,e)}_ensureGeometryHasZ(e){if(!this._hasZ)return e;const t=o=>{for(;o.length<3;)o.push(0)},i=e.clone();switch(i.hasZ=!0,i.type){case"point":i.z=i.z??0;break;case"multipoint":i.points.forEach(t);break;case"polyline":i.paths.forEach(o=>o.forEach(t));break;case"polygon":i.rings.forEach(o=>o.forEach(t))}return i}_ensureSource(e){const t=this._sources[e];if(t!=null)return t;const i=this._createSource(e);return this._sources[e]=i,i}_createSource(e){const t=I.toJSON(e),i=this._hasZ,o=new z({geometryType:t,hasZ:i,hasM:!1});return{featureStore:o,queryEngine:new H({featureStore:o,fields:[{name:c,type:"esriFieldTypeOID",alias:c}],geometryType:t,hasM:!1,hasZ:i,objectIdField:c,spatialReference:this.spatialReference,scheduler:this.view!=null&&this.view.type==="3d"?this.view.resourceController.scheduler:null}),type:e}}_remove(e){this._mapSources(t=>this._removeFromSource(t,e));for(const t of this._pendingAdds)t.graphics.delete(e.uid),t.graphics.size===0&&t.task.abort()}_removeFromSource(e,t){const i=t.uid;e.featureStore.has(i)&&(e.featureStore.removeById(t.uid),y(t.symbol)&&this._extrudedPolygonSymbolsCount--)}_destroySource(e){e.queryEngine.destroy(),this._sources[e.type]=null}_mapSources(e){const{point:t,polygon:i,polyline:o,multipoint:n}=this._sources,s=[];return t!=null&&s.push(e(t)),i!=null&&s.push(e(i)),o!=null&&s.push(e(o)),n!=null&&s.push(e(n)),s}};a([l()],r.prototype,"getGraphicsLayers",void 0),a([l({constructOnly:!0})],r.prototype,"layerSource",void 0),a([l({constructOnly:!0})],r.prototype,"spatialReference",void 0),a([l({constructOnly:!0})],r.prototype,"view",void 0),a([l({readOnly:!0})],r.prototype,"updating",null),a([l({readOnly:!0})],r.prototype,"availability",void 0),a([l()],r.prototype,"_hasZ",null),a([l()],r.prototype,"_snappingElevationAligner",null),a([l()],r.prototype,"_snappingElevationFilter",null),a([l()],r.prototype,"_symbologySnappingFetcher",null),a([l()],r.prototype,"_extrudedPolygonSymbolsCount",void 0),a([l()],r.prototype,"_getGroundElevation",null),r=a([x("esri.views.interactive.snapping.featureSources.GraphicsSnappingSource")],r);const c="OBJECTID";export{r as GraphicsSnappingSource};
