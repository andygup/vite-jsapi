"use strict";(self.webpackChunkRemoteClient=self.webpackChunkRemoteClient||[]).push([[8510],{84470:(e,t,s)=>{s.d(t,{JG:()=>l,NZ:()=>a,fV:()=>c,vj:()=>y});var r=s(2981);function a(e){const t=e?.source;return!!t&&(Array.isArray(t)?t.some((e=>i(e))):i(t))}function n(e){return Array.isArray(e)?0!==e.length&&n(e[0]):!(e instanceof File)}const o=/^(model\/gltf\+json)|(model\/gltf-binary)$/,u=/\.(gltf|glb)/i;function i(e){if(e instanceof File){const{type:t,name:s}=e;return o.test(t)||u.test(s)}return o.test(e.assetMimeType)||u.test(e.assetName)||u.test(e.assetUrl)}function l(e,t){if(!e)return!1;const{source:s}=e;return Array.isArray(s)?function(e,t){return e.every((e=>f(e,t)))}(s,t):f(s,t)}function c(e,t){if(e===t)return!0;const{source:s}=e,{source:r}=t;if(s===r)return!0;if(n(s)&&n(r)){if(Array.isArray(s)&&Array.isArray(r)){if(s.length!==r.length)return!1;const e=(e,t)=>e.assetHash<t.assetHash?-1:e.assetHash>t.assetHash?1:0,t=[...s].sort(e),a=[...r].sort(e);for(let e=0;e<t.length;++e)if(!p(t[e],a[e]))return!1;return!0}if(!Array.isArray(s)&&!Array.isArray(r))return p(s,r)}return!1}function p(e,t){return e.assetUrl===t.assetUrl}function f(e,t){return!(e instanceof File)&&e.assetUrl.startsWith(`${t.path}/assets/`)}function y(e,t){return e instanceof File?(0,r.Ow)(e.name,t)??(0,r.S0)(e.type,t):(0,r.S0)(e.assetMimeType,t)??(0,r.Ow)(e.assetName,t)}},58510:(e,t,s)=>{s.d(t,{uploadAssets:()=>p});var r=s(3172),a=s(20102),n=s(92604),o=s(95330),u=s(17452),i=s(41123),l=s(84470),c=s(2981);async function p(e,t,s){return e.length?Promise.all(e.map((e=>async function(e,{layer:t,ongoingUploads:s},r){const n=s.get(e);if(n)return n;if(!function(e){return!!e.infoFor3D}(t))throw new a.Z(`${t.type}-layer:upload-failure`,"Layer does not support asset uploads.",new Error);if(function(e,t){const{parsedUrl:s}=t;return null!=s&&e.metadata.externalSources.some((e=>(0,l.JG)(e,s)))}(e,t))return e;const u=async function(e,t,s){const{metadata:r}=e,{displaySource:n}=r,u=f(n?.source,t),l=!!u,p=r.externalSources.length>0,y=l&&1===u.length&&"model/gltf-binary"===(0,c.d1)(u[0].assetType,t.infoFor3D.supportedFormats)?async function(e,t,s){return{source:h(await d(e,t,s))}}(u,t,s):p?async function(e,t,s){const r=g(t),{externalSources:n}=e.metadata,o=function(e,t){for(const s of e){const e=f(s.source,t);if(e)return e}return null}(n,t);if(!o)throw new a.Z(`${t.type}-layer:upload-failure`,"Could not find an external source that is supported by the service.",new Error);const u=await d(o,t,s);return{source:h(await w(u,t,r))}}(e,t,s):async function(e,t,s){const r=async function(e,t,s){const r=g(t),a=await e.load(s),n=await a.toBinaryGLTF({ignoreLocalTransform:!0});(0,o.k_)(s);const u=await n.buffer();return(0,o.k_)(s),{blob:new Blob([u.data],{type:u.type}),assetName:`${(0,i.z)()}.glb`,assetType:r}}(e,t,s);return{source:h(await m([r],t,s)),extent:e.extent.clone()}}(e,t,s),T=await y;return(0,o.k_)(s),e.addExternalSources([T]),e}(e,t,r);s.set(e,u);try{await u}finally{s.delete(e)}return e}(e,t,s)))):[]}function f(e,t){if(!e)return null;const{infoFor3D:{supportedFormats:s,editFormats:r}}=t,a=function(e){return Array.isArray(e)?e:(File,[e])}(e),n=new Array;let o=!1;for(let e=0;e<a.length;++e){const t=y(a[e],s);if(!t)return null;r.includes(t.assetType)&&(o=!0),n.push(t)}return o?n:null}function y(e,t){const s=(0,l.vj)(e,t);return s?{asset:e,assetType:s}:null}async function d(e,t,s){return m(e.map((e=>async function(e,t){const{asset:s,assetType:a}=e;if(s instanceof File)return{blob:s,assetName:s.name,assetType:a};const{data:n}=await(0,r.default)(s.assetUrl,{responseType:"blob"});return(0,o.k_)(t),{blob:n,assetName:s.assetName,assetType:a}}(e,s))),t,s)}async function m(e,t,s){const i=await Promise.all(e.map((async e=>{const i=async function(e,t,s){const{blob:i,assetType:l,assetName:c}=e;let p=null;try{const e=new FormData;e.append("f","json"),e.append("file",i,`${c}`);const f={body:e,method:"post",responseType:"json"},{data:y}=await(0,r.default)((0,u.v_)(t.url,"uploads/upload"),f);if((0,o.k_)(s),!y.success)throw n.Z.getLogger("esri.layers.graphics.sources.support.uploadAssets").warnOnce(`Service ${t.url} does not support the REST Uploads API.`),new a.Z(`${t.type}-layer:upload-failure`,"Expected upload to be successful.",new Error);p={assetType:l,assetUploadId:y.item.itemID}}catch(e){p=null}if(!p){const e=await(0,u.IR)(i);if((0,o.k_)(s),!e.isBase64)throw new a.Z(`${t.type}-layer:uploadAssets-failure`,"Expected gltf data in base64 format after conversion.",new Error);p={assetType:l,assetData:e.data}}if(!p)throw new a.Z(`${t.type}-layer:uploadAssets-failure`,"Unable to prepare uploadAsset request options.",new Error);return{assetName:c,item:p}}(await e,t,s);return(0,o.k_)(s),i})));(0,o.k_)(s);const{uploadResults:l}=await async function(e,t,s){const n={query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"},i=await(0,r.default)((0,u.v_)(t.parsedUrl.path,"uploadAssets"),n);if((0,o.k_)(s),i.data.uploadResults.length!==e.length)throw new a.Z(`${t.type}-layer:uploadAssets-failure`,`Bad response. Uploaded ${e.length} items and received ${i.data.uploadResults.length} results.`,new Error);return i.data}(i.map((({item:e})=>e)),t,s);return(0,o.k_)(s),e.map(((e,s)=>function(e,t,s){const{success:r}=t;if(!r){const{error:r}=t;throw new a.Z(`${s.type}-layer:upload-failure`,`Failed to upload mesh file ${e.assetName}. Error code: ${r.code}. Error message: ${r.messages}`,new Error)}const{assetHash:n}=t,{assetName:o,item:{assetType:u}}=e,{infoFor3D:{supportedFormats:i}}=s,l=(0,c.d1)(u,i);if(!l)throw new a.Z(`${s.type}-layer:upload-failure`,`The service allowed us to upload an asset of FormatID ${u}, but it does not list it in its supported formats.`,new Error);return{assetUrl:`${s.parsedUrl.path}/assets/${n}`,assetName:o,assetHash:n,assetMimeType:l}}(i[s],l[s],t)))}async function w(e,t,s){const n=e.map((({assetName:e,assetHash:t})=>({assetName:e,assetHash:t}))),o={query:{f:"json",assets:JSON.stringify(n),transportType:"esriTransportTypeUrl",targetFormat:s},responseType:"json"},i=(await(0,r.default)((0,u.v_)(t.parsedUrl.path,"convert3D"),o)).data,{infoFor3D:{supportedFormats:l}}=t;return i.assets.map((e=>{const s=(0,c.S0)(e.contentType,l);if(!s)throw new a.Z(`${t.type}-layer:upload-failure`,`The service allowed us to upload an asset of FormatID ${s}, but it does not list it in its supported formats.`,new Error);return{assetUrl:e.assetURL,assetName:e.assetName,assetHash:e.assetHash,assetMimeType:e.contentType,assetType:s}}))}function h(e){return Array.isArray(e)&&1===e.length?e[0]:e}function g(e){const{infoFor3D:t}=e,s=(0,c.S0)("model/gltf-binary",t.supportedFormats)??(0,c.Ow)("glb",t.supportedFormats);if(!s)throw new a.Z(`${e.type}-layer:upload-failure`,"Layer does not support glb.",new Error);return s}}}]);