import{g4 as r}from"./index-ffb342b4.js";import{j as i}from"./json-9ae8d6f8.js";function c(e){return r.extendedSpatialReferenceInfo(e)}function f(e,n,t){return r.clip(i,e,n,t)}function l(e,n,t){return r.cut(i,e,n,t)}function p(e,n,t){return r.contains(i,e,n,t)}function d(e,n,t){return r.crosses(i,e,n,t)}function g(e,n,t,a){return r.distance(i,e,n,t,a)}function m(e,n,t){return r.equals(i,e,n,t)}function h(e,n,t){return r.intersects(i,e,n,t)}function x(e,n,t){return r.touches(i,e,n,t)}function S(e,n,t){return r.within(i,e,n,t)}function A(e,n,t){return r.disjoint(i,e,n,t)}function w(e,n,t){return r.overlaps(i,e,n,t)}function y(e,n,t,a){return r.relate(i,e,n,t,a)}function D(e,n){return r.isSimple(i,e,n)}function E(e,n){return r.simplify(i,e,n)}function R(e,n,t=!1){return r.convexHull(i,e,n,t)}function j(e,n,t){return r.difference(i,e,n,t)}function L(e,n,t){return r.symmetricDifference(i,e,n,t)}function T(e,n,t){return r.intersect(i,e,n,t)}function b(e,n,t=null){return r.union(i,e,n,t)}function v(e,n,t,a,u,s,o){return r.offset(i,e,n,t,a,u,s,o)}function z(e,n,t,a,u=!1){return r.buffer(i,e,n,t,a,u)}function I(e,n,t,a,u,s,o){return r.geodesicBuffer(i,e,n,t,a,u,s,o)}function V(e,n,t,a=!0){return r.nearestCoordinate(i,e,n,t,a)}function H(e,n,t){return r.nearestVertex(i,e,n,t)}function _(e,n,t,a,u){return r.nearestVertices(i,e,n,t,a,u)}function q(e,n,t,a){if(n==null||a==null)throw new Error("Illegal Argument Exception");const u=r.rotate(n,t,a);return u.spatialReference=e,u}function B(e,n,t){if(n==null||t==null)throw new Error("Illegal Argument Exception");const a=r.flipHorizontal(n,t);return a.spatialReference=e,a}function C(e,n,t){if(n==null||t==null)throw new Error("Illegal Argument Exception");const a=r.flipVertical(n,t);return a.spatialReference=e,a}function P(e,n,t,a,u){return r.generalize(i,e,n,t,a,u)}function G(e,n,t,a){return r.densify(i,e,n,t,a)}function J(e,n,t,a,u=0){return r.geodesicDensify(i,e,n,t,a,u)}function M(e,n,t){return r.planarArea(i,e,n,t)}function N(e,n,t){return r.planarLength(i,e,n,t)}function k(e,n,t,a){return r.geodesicArea(i,e,n,t,a)}function F(e,n,t,a){return r.geodesicLength(i,e,n,t,a)}function K(e,n,t){return n==null||t==null?[]:r.intersectLinesToPoints(i,e,n,t)}function O(e,n){r.changeDefaultSpatialReferenceTolerance(e,n)}function Q(e){r.clearDefaultSpatialReferenceTolerance(e)}const X=Object.freeze(Object.defineProperty({__proto__:null,buffer:z,changeDefaultSpatialReferenceTolerance:O,clearDefaultSpatialReferenceTolerance:Q,clip:f,contains:p,convexHull:R,crosses:d,cut:l,densify:G,difference:j,disjoint:A,distance:g,equals:m,extendedSpatialReferenceInfo:c,flipHorizontal:B,flipVertical:C,generalize:P,geodesicArea:k,geodesicBuffer:I,geodesicDensify:J,geodesicLength:F,intersect:T,intersectLinesToPoints:K,intersects:h,isSimple:D,nearestCoordinate:V,nearestVertex:H,nearestVertices:_,offset:v,overlaps:w,planarArea:M,planarLength:N,relate:y,rotate:q,simplify:E,symmetricDifference:L,touches:x,union:b,within:S},Symbol.toStringTag,{value:"Module"}));export{V as A,H as B,_ as C,v as D,w as E,M as F,N as G,y as H,q as I,E as J,L as K,x as L,b as M,S as N,Q as a,z as b,O as c,f as d,p as e,R as f,X as g,d as h,l as i,G as j,j as k,A as l,g as m,m as n,c as o,B as p,C as q,P as r,k as s,I as t,J as u,F as v,T as w,K as x,h as y,D as z};
