import{E as d}from"./index-1ff2b83b.js";let u;function x(i,a){let e=a.responseType;e?e!=="array-buffer"&&e!=="blob"&&e!=="json"&&e!=="native"&&e!=="native-request-init"&&e!=="text"&&(e="text"):e="json",a.responseType=e;const b=a.signal;return delete a.signal,globalThis.invokeStaticMessage("request",{url:i,options:a},{signal:b}).then(async t=>{let n,s,f,c;if(t.data)if(t.data instanceof ArrayBuffer){if((e==="json"||e==="text"||e==="blob")&&(n=new Blob([t.data]),(e==="json"||e==="text")&&(u||(u=new FileReaderSync),c=u.readAsText(n),e==="json"))){try{s=JSON.parse(c||null)}catch(l){const o={...l,url:i,requestOptions:a};throw new d("request:server",l.message,o)}if(s.error){const l={...s.error,url:i,requestOptions:a};throw new d("request:server",s.error.message,l)}}}else e==="native"&&(t.data.signal=b,f=await fetch(t.data.url,t.data),t.httpStatus=f.status);let r;switch(e){case"blob":r=n;break;case"json":r=s;break;case"native":r=f;break;case"text":r=c;break;default:r=t.data}return{data:r,httpStatus:t.httpStatus,requestOptions:a,ssl:t.ssl,url:i}})}export{x as execute};
