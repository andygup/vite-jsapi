import{au as _,Z as b,bt as v,du as T,r as m,bx as O,hv as w,E as h,ev as A,fg as L,ej as R,f_ as M,ae as a,af as o,bF as P,bG as I,ag as U,ai as W,a$ as j}from"./index-6dc9db96.js";import{M as B}from"./MultiOriginJSONSupport-7ecf77ee.js";import{A as C}from"./APIKeyMixin-d15dee57.js";import{A as k}from"./ArcGISCachedService-5664166c.js";import{S as G,A as $,a as q}from"./SublayersOwner-ab8b707e.js";import{A as D}from"./ArcGISService-ce9fb6fe.js";import{B as J}from"./BlendLayer-44e08164.js";import{C as N}from"./CustomParametersMixin-70a50c3c.js";import{O as x}from"./OperationalLayer-23105ae4.js";import{P as E}from"./PortalLayer-0bd426bc.js";import{R as V}from"./RefreshableLayer-fc3e0b7f.js";import{S as F}from"./ScaleRangeLayer-45b0bfd3.js";import{u as H}from"./commonProperties-c36316d9.js";import{c as y}from"./imageBitmapUtils-69c5c59c.js";import"./TilemapCache-35bf5d67.js";import"./ByteSizeUnit-c0a244d3.js";import"./LRUCache-bc64d2cb.js";import"./MemCache-0cc92381.js";import"./Version-bb3aca60.js";import"./UniqueValueRenderer-b93f27da.js";import"./LegendOptions-cc110a3d.js";import"./diffUtils-66662ab6.js";import"./SizeVariable-b7dbfdc4.js";import"./colorRamps-41492d1d.js";import"./sizeVariableUtils-2914222a.js";import"./lengthUtils-811009ad.js";import"./ColorStop-482cf285.js";import"./jsonUtils-f6daff54.js";import"./styleUtils-ec6b3892.js";import"./featureFlags-f733b4cc.js";import"./jsonUtils-5baaec8b.js";import"./DictionaryLoader-c69819a7.js";import"./FieldsIndex-b896860f.js";import"./heatmapUtils-848fe493.js";import"./vec4-3dd523e8.js";import"./vec4f64-efdcb593.js";import"./sql-3b6d1fa0.js";import"./QueryTask-18b9458b.js";import"./infoFor3D-91dff30a.js";import"./Query-fdbf0a11.js";import"./Field-d6c8b493.js";import"./fieldType-1a5c92c9.js";import"./executeForIds-fcca8156.js";import"./query-65b29238.js";import"./normalizeUtils-148d7373.js";import"./normalizeUtilsCommon-e56b3eb1.js";import"./pbfQueryUtils-de951081.js";import"./pbf-a61616bd.js";import"./OptimizedGeometry-af84d2ad.js";import"./OptimizedFeatureSet-5c82fe5a.js";import"./queryZScale-ae56a036.js";import"./executeQueryJSON-925689f1.js";import"./FeatureSet-18382b13.js";import"./featureConversionUtils-c8751c7a.js";import"./FeatureType-2c1f8530.js";import"./FeatureTemplate-7866faa0.js";import"./labelingInfo-e05bf5ef.js";import"./labelUtils-a7861eb5.js";import"./defaultsJSON-b396ba80.js";import"./serviceCapabilitiesUtils-9e84fd9a.js";import"./AttachmentQuery-87ea83fb.js";import"./popupUtils-e93715c7.js";import"./sublayerUtils-bfe6e8e8.js";import"./jsonUtils-243cf7d6.js";import"./parser-dcc1ce26.js";import"./_commonjsHelpers-725317a4.js";import"./portalItemUtils-77a20bc9.js";import"./ElevationInfo-cf71e4b9.js";var d;const f=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let i=d=class extends J(G(F(x(E(k($(D(B(_(V(C(N(j))))))))))))){constructor(...e){super(...e),this.listMode="show",this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(b).then(()=>this._fetchService(r))),Promise.resolve(this)}get attributionDataUrl(){var r;const e=(r=this.parsedUrl)==null?void 0:r.path.toLowerCase();return e?this._getDefaultAttribution(this._getMapName(e)):null}readSpatialReference(e,r){return e=e||r.tileInfo&&r.tileInfo.spatialReference,e&&v.fromJSON(e)}writeSublayers(e,r,t,s){if(!this.loaded||!e)return;const l=e.slice().reverse().flatten(({sublayers:p})=>p&&p.toArray().reverse()).toArray(),n=[],u={writeSublayerStructure:!1,...s};l.forEach(p=>{const g=p.write({},u);n.push(g)}),n.some(p=>Object.keys(p).length>1)&&(r.layers=n)}get tileServers(){var e;return this._getDefaultTileServers((e=this.parsedUrl)==null?void 0:e.path)}castTileServers(e){return Array.isArray(e)?e.map(r=>T(r).path):null}fetchTile(e,r,t,s={}){const{signal:l}=s,n=this.getTileUrl(e,r,t),u={responseType:"image",signal:l,query:{...this.refreshParameters}};return m(n,u).then(c=>c.data)}async fetchImageBitmapTile(e,r,t,s={}){const{signal:l}=s;if(this.fetchTile!==d.prototype.fetchTile){const p=await this.fetchTile(e,r,t,s);return y(p,e,r,t,l)}const n=this.getTileUrl(e,r,t),u={responseType:"blob",signal:l,query:{...this.refreshParameters}},{data:c}=await m(n,u);return y(c,e,r,t,l)}getTileUrl(e,r,t){var c,p;const s=!this.tilemapCache&&this.supportsBlankTile,l=O({...(c=this.parsedUrl)==null?void 0:c.query,blankTile:s?!1:null,...this.customParameters,token:this.apiKey}),n=this.tileServers;return`${n&&n.length?n[r%n.length]:(p=this.parsedUrl)==null?void 0:p.path}/tile/${e}/${r}/${t}${l?"?"+l:""}`}loadAll(){return w(this,e=>{e(this.allSublayers)})}_fetchService(e){return new Promise((r,t)=>{if(this.sourceJSON){if(this.sourceJSON.bandCount!=null&&this.sourceJSON.pixelSizeX!=null)throw new h("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");const l={data:this.sourceJSON};r(l);return}if(!this.parsedUrl)throw new h("tile-layer:undefined-url","layer's url is not defined");const s=A(this.parsedUrl.path);if(s!=null&&s.serverType==="ImageServer")throw new h("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");m(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(r,t)}).then(r=>{let t=this.url;if(r.ssl&&(t=this.url=t.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),this.version===10.1&&!L(t))return this._fetchServerVersion(t,e).then(s=>{this.read({currentVersion:s})}).catch(()=>{})})}_fetchServerVersion(e,r){if(!R(e))return Promise.reject();const t=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return m(t,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:r}).then(s=>{if(s.data&&s.data.currentVersion)return s.data.currentVersion;throw new h("tile-layer:version-not-available")})}_getMapName(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);return r?r[2]:void 0}_getDefaultAttribution(e){if(e==null)return null;let r;e=e.toLowerCase();for(let t=0,s=f.length;t<s;t++)if(r=f[t],r.toLowerCase().includes(e))return M("//static.arcgis.com/attribution/"+r);return null}_getDefaultTileServers(e){if(e==null)return[];const r=e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i)!==-1,t=e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i)!==-1;return r||t?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return!this.fetchTile[S]}};a([o({readOnly:!0})],i.prototype,"attributionDataUrl",null);a([o({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0);a([o({json:{read:!0,write:!0}})],i.prototype,"blendMode",void 0);a([o({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0);a([o({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0);a([o({type:Boolean})],i.prototype,"resampling",void 0);a([o()],i.prototype,"sourceJSON",void 0);a([o({type:v})],i.prototype,"spatialReference",void 0);a([P("spatialReference",["spatialReference","tileInfo"])],i.prototype,"readSpatialReference",null);a([o({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],i.prototype,"path",void 0);a([o({readOnly:!0})],i.prototype,"sublayers",void 0);a([I("sublayers",{layers:{type:[q]}})],i.prototype,"writeSublayers",null);a([o({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0);a([o()],i.prototype,"tileServers",null);a([U("tileServers")],i.prototype,"castTileServers",null);a([o({readOnly:!0,json:{read:!1}})],i.prototype,"type",void 0);a([o(H)],i.prototype,"url",void 0);i=d=a([W("esri.layers.TileLayer")],i);const S=Symbol("default-fetch-tile");i.prototype.fetchTile[S]=!0;const cr=i;export{cr as default};
