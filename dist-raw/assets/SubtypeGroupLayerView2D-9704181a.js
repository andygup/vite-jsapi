import{ae as d,ai as u,A as y,B as h,m as c}from"./index-30d9bb6f.js";import{F as b}from"./FeatureEffect-05e911f4.js";import g from"./FeatureLayerView2D-7db40165.js";import"./jsonUtils-c56e6dc2.js";import"./parser-94597809.js";import"./_commonjsHelpers-725317a4.js";import"./Query-0803ea89.js";import"./Field-23f750c1.js";import"./fieldType-3bdcd079.js";import"./Container-dd9fb403.js";import"./definitions-3f56d206.js";import"./enums-08489827.js";import"./TextureDescriptor-858da8a2.js";import"./FeatureSet-62b3105d.js";import"./LayerView-33afe039.js";import"./schemaUtils-59d1c3a8.js";import"./sql-445b0f6c.js";import"./diffUtils-655e0682.js";import"./labelingInfo-23c70cec.js";import"./labelUtils-50ed6798.js";import"./defaultsJSON-b396ba80.js";import"./jsonUtils-862b891c.js";import"./color-977d7a1a.js";import"./enums-eb6e4255.js";import"./VertexElementDescriptor-24e04d97.js";import"./utils-74241be0.js";import"./MaterialKey-88073895.js";import"./heatmapUtils-9ca00d5c.js";import"./vec4-3dd523e8.js";import"./vec4f64-efdcb593.js";import"./visualVariablesUtils-289ca1be.js";import"./ExpandedCIM-41280455.js";import"./BidiEngine-cdaf024a.js";import"./GeometryUtils-26dde58c.js";import"./Rect-df8ea165.js";import"./quantizationUtils-1e7672b6.js";import"./floatRGBA-5807634e.js";import"./featureFlags-c871b15a.js";import"./clusterUtils-b3fde70e.js";import"./SizeVariable-ce357129.js";import"./colorRamps-8d992597.js";import"./LegendOptions-90b1cfd6.js";import"./sizeVariableUtils-2914222a.js";import"./lengthUtils-37919cf3.js";import"./util-65e1c3e7.js";import"./commonProperties-50a31c94.js";import"./ElevationInfo-fc3e610f.js";import"./floorFilterUtils-0e56040f.js";import"./popupUtils-f2bb1a21.js";import"./RefreshableLayerView-95221bd0.js";function f(o,t){return!o.visible||o.minScale!==0&&t>o.minScale||o.maxScale!==0&&t<o.maxScale}let n=class extends g{initialize(){this.addHandles([y(()=>this.view.scale,()=>this._update(),h)],"constructor")}isUpdating(){var l;const t=this.layer.sublayers.some(m=>m.renderer!=null),e=this._commandsQueue.updating,s=this._updatingRequiredFieldsPromise!=null,r=!this._proxy||!this._proxy.isReady,i=this._pipelineIsUpdating,p=this.tileRenderer==null||((l=this.tileRenderer)==null?void 0:l.updating),a=t&&(e||s||r||i||p);return c("esri-2d-log-updating")&&console.log(`Updating FLV2D: ${a}
  -> hasRenderer ${t}
  -> hasPendingCommand ${e}
  -> updatingRequiredFields ${s}
  -> updatingProxy ${r}
  -> updatingPipeline ${i}
  -> updatingTileRenderer ${p}
`),a}_injectOverrides(t){let e=super._injectOverrides(t);const s=this.view.scale,r=this.layer.sublayers.filter(p=>f(p,s)).map(p=>p.subtypeCode);if(!r.length)return e;e=e??new b().toJSON();const i=`NOT ${this.layer.subtypeField} IN (${r.join(",")})`;return e.where=e.where?`(${e.where}) AND (${i})`:i,e}_setLayersForFeature(t){const e=this.layer.fieldsIndex.get(this.layer.subtypeField),s=t.attributes[e.name],r=this.layer.sublayers.find(i=>i.subtypeCode===s);t.layer=t.sourceLayer=r}_createSchemaConfig(){const t={subtypeField:this.layer.subtypeField,sublayers:Array.from(this.layer.sublayers).map(i=>({featureReduction:null,geometryType:this.layer.geometryType,labelingInfo:i.labelingInfo,labelsVisible:i.labelsVisible,renderer:i.renderer,subtypeCode:i.subtypeCode,orderBy:null}))},e=this.layer.sublayers.map(i=>i.subtypeCode).join(","),s=this.layer.sublayers.length?`${this.layer.subtypeField} IN (${e})`:"1=2";let r=this.layer.definitionExpression?this.layer.definitionExpression+" AND ":"";return r+=s,{...super._createSchemaConfig(),...t,definitionExpression:r}}};n=d([u("esri.views.2d.layers.SubtypeGroupLayerView2D")],n);const be=n;export{be as default};
