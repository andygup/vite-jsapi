import{L as P,be as y,iS as x,E as s,iT as R,I as _,P as K,dt as U,ev as q,iU as M}from"./index-ffb342b4.js";import{u as w}from"./originUtils-dad1432b.js";import D from"./FeatureLayer-5d8499e3.js";import{a as W}from"./fetchService-ed1edb02.js";import{a as v}from"./jsonContext-df308fb5.js";import{a as f,b as z,r as g,T as c}from"./portalItemUtils-b3ac2156.js";import"./multiOriginJSONSupportUtils-ad07e08e.js";import"./UniqueValueRenderer-9d1002cf.js";import"./LegendOptions-0798b0b9.js";import"./diffUtils-d9e7d9d5.js";import"./SizeVariable-5571e455.js";import"./colorRamps-bcaaf237.js";import"./sizeVariableUtils-2914222a.js";import"./lengthUtils-81eb77d2.js";import"./ColorStop-69649184.js";import"./jsonUtils-d970b431.js";import"./styleUtils-7b70a1b4.js";import"./featureFlags-b0a4f6c7.js";import"./jsonUtils-fcc69467.js";import"./DictionaryLoader-cef2ab61.js";import"./LRUCache-7d80c941.js";import"./MemCache-0b9a9ce4.js";import"./FieldsIndex-19734375.js";import"./heatmapUtils-a1ba5203.js";import"./vec4-3dd523e8.js";import"./vec4f64-efdcb593.js";import"./MultiOriginJSONSupport-8a274e44.js";import"./sql-46e4bdd9.js";import"./FeatureLayerBase-6c8dbc52.js";import"./Field-9647a27a.js";import"./fieldType-b14303b4.js";import"./commonProperties-ac9466c5.js";import"./ElevationInfo-3858b8bb.js";import"./AttachmentQuery-a81b6c0b.js";import"./Query-b9f237df.js";import"./RelationshipQuery-df8a4aee.js";import"./serviceCapabilitiesUtils-c15cc356.js";import"./editsZScale-93f171ff.js";import"./queryZScale-b5ad7594.js";import"./FeatureSet-b9324b47.js";import"./APIKeyMixin-bb8d3f14.js";import"./ArcGISService-36126778.js";import"./BlendLayer-f2397c0f.js";import"./jsonUtils-83529e2a.js";import"./parser-b7037908.js";import"./_commonjsHelpers-725317a4.js";import"./CustomParametersMixin-4f7843a4.js";import"./EditBusLayer-726c0dac.js";import"./FeatureReductionLayer-e0eca34b.js";import"./FeatureEffect-9a976584.js";import"./clusterUtils-2ed109d6.js";import"./labelingInfo-df91e583.js";import"./labelUtils-ebd7215b.js";import"./defaultsJSON-b396ba80.js";import"./OperationalLayer-43bf6295.js";import"./OrderedLayer-9f7c5530.js";import"./PortalLayer-641234b2.js";import"./RefreshableLayer-7e7030e9.js";import"./ScaleRangeLayer-c00a5713.js";import"./TemporalLayer-dfef6fde.js";import"./FeatureTemplate-0ec4ad27.js";import"./FeatureType-d55aca33.js";import"./fieldProperties-9d112e1c.js";import"./versionUtils-7acaee31.js";import"./styleUtils-69730ec3.js";import"./TopFeaturesQuery-ef9a39c0.js";import"./popupUtils-28cf220f.js";const C=P.getLogger("esri.layers.FeatureLayer"),d="Feature Service";function m(e,t){return`Layer (title: ${e.title}, id: ${e.id}) of type '${e.declaredClass}' ${t}`}function T(e,t){if(t.type!==d)throw new s("feature-layer:portal-item-wrong-type",m(e,`should have portal item of type "${d}"`))}async function O(e){if(await e.load(),x(e))throw new s("feature-layer:save",m(e,"using an in-memory source cannot be saved to a portal item"))}function Y(e,t){let r=(e.messages??[]).filter(({type:a})=>a==="error").map(({name:a,message:i,details:o})=>new s(a,i,o));if(t!=null&&t.ignoreUnsupported&&(r=r.filter(({name:a})=>a!=="layer:unsupported"&&a!=="symbol:unsupported"&&a!=="symbol-layer:unsupported"&&a!=="property:unsupported"&&a!=="url:unsupported")),r.length>0)throw new s("feature-layer:save","Failed to save feature layer due to unsupported or invalid content. See 'details.errors' for more detailed information",{errors:r})}async function I(e,t,r){"beforeSave"in e&&typeof e.beforeSave=="function"&&await e.beforeSave();const a=e.write({},t);return Y(t,r),a}function A(e){const{layer:t,layerJSON:r}=e;return t.isTable?{layers:[],tables:[r]}:{layers:[r],tables:[]}}function S(e){f(e,c.JSAPI),e.typeKeywords&&(e.typeKeywords=e.typeKeywords.filter((t,r,a)=>a.indexOf(t)===r))}function G(e){const t=e.portalItem;if(!t)throw C.error("save: requires the portalItem property to be set"),new s("feature-layer:portal-item-not-set",m(e,"requires the portalItem property to be set"));if(!t.loaded)throw new s("feature-layer:portal-item-not-loaded",m(e,"cannot be saved to a portal item that does not exist or is inaccessible"));T(e,t)}async function F(e,t){return/\/\d+\/?$/.test(e.url??"")?A(t[0]):j(e,t)}async function j(e,t){const{layer:{url:r,customParameters:a,apiKey:i}}=t[0];let o=await e.fetchData("json");(!o||o.layers==null||o.tables==null)&&(o=await B(o,{url:r??"",customParameters:a,apiKey:i},t.map(n=>n.layer.layerId)));for(const n of t)J(n.layer,n.layerJSON,o);return o}async function B(e,t,r){var a,i;e||(e={}),(a=e).layers||(a.layers=[]),(i=e).tables||(i.tables=[]);const{url:o,customParameters:n,apiKey:l}=t,{serviceJSON:p,layersJSON:u}=await W(o,{customParameters:n,apiKey:l}),h=L(e.layers,p.layers,r),b=L(e.tables,p.tables,r);e.layers=h.itemResources,e.tables=b.itemResources;const N=[...h.added,...b.added],$=u?[...u.layers,...u.tables]:[];return await V(e,N,o,$),e}function L(e,t,r){const a=R(e,t,(o,n)=>o.id===n.id);e=e.filter(o=>!a.removed.some(n=>n.id===o.id));const i=a.added.map(({id:o})=>({id:o}));return i.forEach(({id:o})=>{e.push({id:o})}),{itemResources:e,added:i.filter(({id:o})=>!r.includes(o))}}async function V(e,t,r,a){const i=t.map(({id:o})=>new D({url:r,layerId:o,sourceJSON:a.find(({id:n})=>n===o)}));await _(i.map(o=>o.load())),i.forEach(o=>{const{layerId:n,loaded:l,defaultPopupTemplate:p}=o;if(!l||p==null)return;const u={id:n,popupInfo:p.toJSON()};J(o,u,e)})}function J(e,t,r){e.isTable?E(r.tables,t):E(r.layers,t)}function E(e,t){if(!e)return;const r=e.findIndex(({id:a})=>a===t.id);r===-1?e.push(t):e[r]=t}function k(e){const{portalItem:t}=e;return M(e)&&!e.dynamicDataSource&&!!(t!=null&&t.loaded)&&t.type===d}async function H(e){if(!(e!=null&&e.length))throw new s("feature-layer-utils-saveall:missing-parameters","'layers' array should contain at least one feature layer");await Promise.all(e.map(o=>o.load()));for(const o of e)if(!k(o))throw new s("feature-layer-utils-saveall:invalid-parameters",`'layers' array should only contain layers or tables in a feature service loaded from 'Feature Service' item. ${m(o,"does not conform")}`,{layer:o});const t=e.map(o=>o.portalItem.id);if(new Set(t).size>1)throw new s("feature-layer-utils-saveall:invalid-parameters","All layers in the 'layers' array should be loaded from the same portal item");const a=e.map(o=>o.layerId);if(new Set(a).size!==a.length)throw new s("feature-layer-utils-saveall:invalid-parameters","'layers' array should contain only one instance each of layer or table in a feature service")}function Q(e,t){var r,a;let i=K.from(t);return i.id&&(i=i.clone(),i.id=null),(r=i).type??(r.type=d),(a=i).portal??(a.portal=U.getDefault()),T(e,i),i}async function X(e,t){const{url:r,layerId:a,title:i,fullExtent:o,isTable:n}=e,l=q(r),p=l!=null&&l.serverType==="FeatureServer";t.url=p?r:`${r}/${a}`,t.title||(t.title=i),t.extent=null,!n&&o!=null&&(t.extent=await z(o)),g(t,c.METADATA),g(t,c.MULTI_LAYER),f(t,c.SINGLE_LAYER),n&&f(t,c.TABLE),S(t)}async function Z(e,t,r){var i;const a=e.portal;await(a==null?void 0:a.signIn()),await((i=a==null?void 0:a.user)==null?void 0:i.addItem({item:e,data:t,folder:r==null?void 0:r.folder}))}const wt=y(ee);async function ee(e,t){await O(e),G(e);const r=e.portalItem,a=v(r),i=await I(e,a,t),o=await F(r,[{layer:e,layerJSON:i}]);return S(r),await r.update({data:o}),w(a),r}const te=async(e,t)=>{await H(e);const r=e[0].portalItem,a=v(r),i=await Promise.all(e.map(n=>I(n,a,t))),o=await F(r,e.map((n,l)=>({layer:n,layerJSON:i[l]})));return S(r),await r.update({data:o}),await Promise.all(e.slice(1).map(n=>n.portalItem.reload())),w(a),r.clone()},vt=y(te),It=y(re);async function re(e,t,r){await O(e);const a=Q(e,t),i=v(a),o=await I(e,i,r),n=A({layer:e,layerJSON:o});return await X(e,a),await Z(a,n,r),e.portalItem=a,w(i),a}export{wt as save,vt as saveAll,It as saveAs};
