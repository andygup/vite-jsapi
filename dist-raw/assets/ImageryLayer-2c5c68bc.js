import{cE as $,ae as s,af as l,bG as P,ai as F,bD as z,bt as ce,f0 as ne,e$ as Ne,hI as _e,K as G,bw as ie,bI as fe,bJ as he,r as D,bf as De,dX as Ve,cG as wt,bA as et,bz as we,bC as lt,bB as ut,a1 as vt,eD as It,bF as E,du as xt,L as tt,E as A,bE as H,cc as Ft,A as Pt,ah as Tt,hJ as Dt,eM as Nt,Z as _t,bb as Vt,a$ as Ct}from"./index-468a9268.js";import{M as At}from"./MultiOriginJSONSupport-401b6783.js";import{R as I,i as se,n as Ie,M as U,a as jt,r as Mt,w as Ot,b as Jt,I as it,f as Et,g as Lt,c as zt,d as Gt,e as Ht,h as Ut,j as Bt}from"./ImageHistogramParameters-eb031527.js";import{f as $t,u as kt,a as Qt,p as Wt}from"./commonProperties-99999309.js";import{i as Ge,g as Kt,D as Xt,a as Zt}from"./multidimensionalUtils-31908b33.js";import{p as qt,P as He,k as Yt,C as ei}from"./dataUtils-bb32051f.js";import{o as pt,h as ct,p as ti,q as ii,t as ri,u as si,a as mt,R as ni,d as rt,v as ai}from"./RasterSymbolizer-cac9fd42.js";import{S as oi}from"./SizeVariable-e8cc32d6.js";import{F as pe}from"./Field-88bfb4af.js";import{F as li}from"./FieldsIndex-ab7b931c.js";import{a as st}from"./imageBitmapUtils-80e0bffb.js";import{n as Ee}from"./normalizeUtils-9dd6c69b.js";import{F as dt}from"./FeatureSet-09da8445.js";import{Q as Ue}from"./Query-ee569148.js";import{e as ui}from"./executeQueryJSON-8379d0d8.js";import"./featureConversionUtils-78a5344c.js";import"./pbf-77fea3f9.js";import"./AttachmentInfo-dfdfa0a1.js";import"./AttachmentQuery-43ef875d.js";import{e as pi,a as ci}from"./executeForIds-d48309c8.js";import"./RelationshipQuery-5d7161f1.js";import"./TopFeaturesQuery-c849ff6c.js";import{A as mi}from"./ArcGISService-3a9fd22b.js";import{B as di}from"./BlendLayer-3dc4b03d.js";import{C as fi}from"./CustomParametersMixin-dd84a15e.js";import{O as hi}from"./OperationalLayer-22d46980.js";import{P as yi}from"./PortalLayer-4b72e3f9.js";import{R as gi}from"./RefreshableLayer-66cdb688.js";import{S as Ri}from"./ScaleRangeLayer-58703611.js";import{T as bi}from"./TemporalLayer-60387239.js";import{s as Si}from"./versionUtils-694bf051.js";import{c as wi}from"./popupUtils-59ed80cd.js";import"./UniqueValueRenderer-ac017c28.js";import"./LegendOptions-dcb522eb.js";import"./diffUtils-71027438.js";import"./ColorStop-60446843.js";import"./jsonUtils-123a2bd9.js";import"./styleUtils-cc56472a.js";import"./featureFlags-2a723cce.js";import"./colorRamps-4cbb7a49.js";import"./utils-bcdf0f89.js";import"./parser-0c644652.js";import"./_commonjsHelpers-725317a4.js";import"./ItemCache-68f957f2.js";import"./MemCache-3df47c80.js";import"./generateRendererUtils-7b55d4c3.js";import"./ElevationInfo-3032ca55.js";import"./lengthUtils-edd0ce65.js";import"./colorUtils-6f72410e.js";import"./sizeVariableUtils-2914222a.js";import"./fieldType-31d95250.js";import"./normalizeUtilsCommon-6cabd780.js";import"./query-96f83d41.js";import"./pbfQueryUtils-5838fd47.js";import"./OptimizedGeometry-af84d2ad.js";import"./OptimizedFeatureSet-5c82fe5a.js";import"./queryZScale-5d7016ca.js";import"./jsonUtils-e00c5139.js";import"./portalItemUtils-a011a0ff.js";const vi={StretchFunction:{arguments:{ComputeGamma:{isDataset:!1,isPublic:!1,name:"ComputeGamma",type:"RasterFunctionVariable",value:!1},DRA:{isDataset:!1,isPublic:!1,name:"DRA",type:"RasterFunctionVariable",value:!1},EstimateStatsHistogram:{isDataset:!1,isPublic:!1,name:"EstimateStatsHistogram",type:"RasterFunctionVariable",value:!1},Gamma:{displayName:"Gamma",isDataset:!1,isPublic:!1,name:"Gamma",type:"RasterFunctionVariable"},Histograms:{isDataset:!1,isPublic:!1,name:"Histograms",type:"RasterFunctionVariable"},Max:{isDataset:!1,isPublic:!1,name:"Max",type:"RasterFunctionVariable",value:255},MaxPercent:{isDataset:!1,isPublic:!1,name:"MaxPercent",type:"RasterFunctionVariable",value:.5},Min:{isDataset:!1,isPublic:!1,name:"Min",type:"RasterFunctionVariable",value:0},MinPercent:{isDataset:!1,isPublic:!1,name:"MinPercent",type:"RasterFunctionVariable",value:.25},NumberOfStandardDeviations:{isDataset:!1,isPublic:!1,name:"NumberOfStandardDeviation",type:"RasterFunctionVariable",value:2},Raster:{isDataset:!0,isPublic:!1,name:"Raster",type:"RasterFunctionVariable"},SigmoidStrengthLevel:{isDataset:!1,isPublic:!1,name:"SigmoidStrengthLevel",type:"RasterFunctionVariable",value:2},Statistics:{isDataset:!1,isPublic:!1,name:"Statistics",type:"RasterFunctionVariable"},StretchType:{isDataset:!1,isPublic:!1,name:"StretchType",type:"RasterFunctionVariable",value:0},type:"StretchFunctionArguments",UseGamma:{isDataset:!1,isPublic:!1,name:"UseGamma",type:"RasterFunctionVariable",value:!1}},description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",function:{description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",name:"Stretch",pixelType:"UNKNOWN",type:"StretchFunction"},functionType:0,name:"Stretch",thumbnail:""},RemapFunction:{name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table.",function:{type:"RemapFunction",pixelType:"UNKNOWN",name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},UseTable:{name:"UseTable",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},InputRanges:{name:"InputRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Input Ranges"},OutputValues:{name:"OutputValues",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Output Values"},NoDataRanges:{name:"NoDataRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"NoData Ranges"},Table:{name:"Table",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputField:{name:"InputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},OutputField:{name:"OutputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputMaxField:{name:"InputMaxField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},RemapTableType:{name:"RemapTableType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},AllowUnmatched:{name:"AllowUnmatched",isPublic:!1,isDataset:!1,value:!0,type:"RasterFunctionVariable"},type:"RemapFunctionArguments"},functionType:0,thumbnail:""},ColormapFunction:{name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp.",function:{type:"ColormapFunction",pixelType:"UNKNOWN",name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},ColormapName:{name:"ColormapName",isPublic:!1,isDataset:!1,value:"Gray",type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},type:"ColormapFunctionArguments"},functionType:0,thumbnail:""},ShadedReliefFunction:{name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image.",function:{type:"ShadedReliefFunction",pixelType:"UNKNOWN",name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"ShadedReliefFunctionArguments"},functionType:0,thumbnail:""},HillshadeFunction:{name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image",function:{type:"HillshadeFunction",pixelType:"UNKNOWN",name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image"},arguments:{DEM:{name:"DEM",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"HillshadeFunctionArguments"},functionType:0,thumbnail:""},ResampleFunction:{name:"Resample",description:"Changes the cell size of a raster.",function:{type:"ResampleFunction",pixelType:"UNKNOWN",name:"Resample",description:"Changes the cell size of a raster."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ResamplingType:{name:"ResamplingType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},InputCellSize:{name:"InputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},OutputCellSize:{name:"OutputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},type:"ResampleFunctionArguments"},functionType:0,thumbnail:""}},Ii=new Set(["u1","u2","u4","u8","s8","u16","s16"]),xi={simple_scalar:"Simple Scalar",wind_barb:"Wind Barb",single_arrow:"Single Arrow",beaufort_kn:"Beaufort Wind (Knots)",beaufort_m:"Beaufort Wind (MetersPerSecond)",ocean_current_m:"Ocean Current (MetersPerSecond)",ocean_current_kn:"Ocean Current (Knots)"},Fi=new Set(["raster-stretch","unique-value","class-breaks","raster-shaded-relief","vector-field","raster-colormap"]);function ft(u){return Fi.has(u.type)}function Be(u,i){var o;if(!u||!i)return $(u||i);const n=$(u);if(n.rasterFunctionDefinition&&i.rasterFunctionDefinition){const e=i.rasterFunctionDefinition;(e.thumbnail||e.thumbnailEx)&&(e.thumbnail=e.thumbnailEx=void 0),ht(n.rasterFunctionDefinition.arguments,i)}else if(((o=i.functionName)==null?void 0:o.toLowerCase())!=="none"){const e=yt(n.functionArguments);e.Raster=i}return n}function ht(u,i){for(const n in u)n.toLowerCase()==="raster"&&(u[n].type==="RasterFunctionVariable"?(u[n]=i.rasterFunctionDefinition,u[n].type="RasterFunctionTemplate"):u[n].type==="RasterFunctionTemplate"&&ht(u[n].arguments,i))}function X(u){const i=$(vi[u.functionName+"Function"]),n=u.functionArguments;for(const o in n)o.toLowerCase()==="raster"?(i.arguments[o]=X(n[o]),i.arguments[o].type="RasterFunctionTemplate"):o.toLowerCase()==="colormap"?(i.arguments[o].value=ji(n[o]),i.arguments.ColorSchemeType.value=0):i.arguments[o].value=n[o];return i}function Pi(u,i){switch(i=i||{},u.type){case"raster-stretch":return Ni(u,i);case"class-breaks":return _i(u,i);case"unique-value":return Vi(u,i);case"raster-colormap":return Ci(u,i);case"vector-field":return Ti(u,i);case"raster-shaded-relief":return Di(u,i);case"flow":throw new Error("Unsupported rendering rule.")}}function yt(u){const i=u==null?void 0:u.Raster;return i&&i.declaredClass==="esri.layers.support.RasterFunction"?yt(i.functionArguments):u}const ve={none:0,standardDeviation:3,histogramEqualization:4,minMax:5,percentClip:6,sigmoid:9};function Ti(u,i){const n=new I;n.functionName="VectorFieldRenderer";const{dataType:o,bandNames:e}=i,t=o==="vector-uv";let r,a;if(e&&e.length===2){const d=e.map(h=>h.toLowerCase());r=d.indexOf("magnitude"),a=d.indexOf("direction")}(r===-1||r===null)&&(r=0,a=1);const p=u.rotationType==="arithmetic"?1:2,c=u.flowRepresentation==="flow-from"?0:1,m=u.visualVariables?u.visualVariables.find(d=>d.field==="Magnitude"):new oi,f={magnitudeBandID:r,directionBandID:a,isUVComponents:t,referenceSystem:p,massFlowAngleRepresentation:c,symbolTileSize:50,symbolTileSizeUnits:100,calculationMethod:"Vector Average",symbologyName:xi[u.style.toLowerCase().replace("-","_")],minimumMagnitude:m.minDataValue,maximumMagnitude:m.maxDataValue,minimumSymbolSize:m.minSize,maximumSymbolSize:m.maxSize};return n.functionArguments=f,i.convertToRFT?new I({rasterFunctionDefinition:X(n)}):n}function Di(u,i){const n=i.convertToRFT;if(!(i.dataType==="elevation"||i.dataType==="generic"&&i.bandCount===1&&(i.pixelType==="s16"||i.pixelType==="s32"||i.pixelType==="f32"||i.pixelType==="f64")))return new I;const o=new I;o.functionName="Hillshade";const e=u.hillshadeType==="traditional"?0:1,t=u.scalingType==="none"?1:3,r={HillshadeType:e,SlopeType:t,ZFactor:u.zFactor};return e===0&&(r.Azimuth=u.azimuth,r.Altitude=u.altitude),t===3&&(r.PSPower=u.pixelSizePower,r.PSZFactor=u.pixelSizeFactor),o.functionArguments=r,o.variableName="Raster",u.colorRamp&&(o.functionName="ShadedRelief",n?r.ColorRamp=pt(u.colorRamp):r.Colormap=ct(u.colorRamp)),n?new I({rasterFunctionDefinition:X(o)}):o}function Ni(u,i){var p;const n=i.convertToRFT,o=new I;o.functionName="Stretch";const e=ve[ti.toJSON(u.stretchType)],t="u8",r=Ai(u.statistics??[]),a={StretchType:e,Statistics:r,DRA:u.dynamicRangeAdjustment,UseGamma:u.useGamma,Gamma:u.gamma,ComputeGamma:u.computeGamma};if(u.outputMin!=null&&(a.Min=u.outputMin),u.outputMax!=null&&(a.Max=u.outputMax),e===ve.standardDeviation?(a.NumberOfStandardDeviations=u.numberOfStandardDeviations,o.outputPixelType=t):e===ve.percentClip?(a.MinPercent=u.minPercent,a.MaxPercent=u.maxPercent,o.outputPixelType=t):e===ve.minMax?o.outputPixelType=t:e===ve.sigmoid&&(a.SigmoidStrengthLevel=u.sigmoidStrengthLevel),o.functionArguments=a,o.variableName="Raster",u.colorRamp){const c=u.colorRamp,m=new I;if(n)m.functionArguments={ColorRamp:pt(c)};else{const f=ii(c);if(f)m.functionArguments={colorRamp:f};else if(i.convertColorRampToColormap&&(c.type==="algorithmic"||c.type==="multipart"))m.functionArguments={Colormap:ct(c)};else{const d=u.colorRamp.toJSON();d.type==="algorithmic"?d.algorithm=d.algorithm||"esriCIELabAlgorithm":d.type==="multipart"&&((p=d.colorRamps)!=null&&p.length)&&d.colorRamps.forEach(h=>h.algorithm=h.algorithm||"esriCIELabAlgorithm"),m.functionArguments={colorRamp:d}}}return m.variableName="Raster",m.functionName="Colormap",m.functionArguments.Raster=o,n?new I({rasterFunctionDefinition:X(m)}):m}return n?new I({rasterFunctionDefinition:X(o)}):o}function _i(u,i){const n=[],o=[],e=[],t=[],{pixelType:a,rasterAttributeTable:p}=i,c=p==null?null:p.features,m=gt(p);if(m&&c&&Array.isArray(c)&&u.classBreakInfos){u.classBreakInfos.forEach((g,w)=>{var x;const y=(x=g.symbol)==null?void 0:x.color;let R;!(y!=null&&y.a)||g.minValue==null||g.maxValue==null||c.forEach(T=>{g.minValue==null||g.maxValue==null||(R=T.attributes[u.field],(R>=g.minValue&&R<g.maxValue||w===u.classBreakInfos.length-1&&R>=g.minValue)&&t.push([T.attributes[m],y.r,y.g,y.b]))})});const b=a?Ce(t,a):t,S=new I;return S.functionName="Colormap",S.functionArguments={},S.functionArguments.Colormap=b,S.variableName="Raster",i.convertToRFT?new I({rasterFunctionDefinition:X(S)}):S}u.classBreakInfos.forEach((b,S)=>{if(b.minValue==null||b.maxValue==null)return;const g=b.symbol&&b.symbol.color;g!=null&&g.a?(S===0?n.push(b.minValue,b.maxValue+1e-6):n.push(b.minValue+1e-6,b.maxValue+1e-6),o.push(S),t.push([S,g.r,g.g,g.b])):e.push(b.minValue,b.maxValue)});const f=a?Ce(t,a):t,d=new I;d.functionName="Remap",d.functionArguments={InputRanges:n,OutputValues:o,NoDataRanges:e},d.variableName="Raster";const h=new I;return h.functionName="Colormap",h.functionArguments={Colormap:f,Raster:d},i.convertToRFT?new I({rasterFunctionDefinition:X(h)}):h}function Ce(u,i){const n=Ii.has(i)?qt(i):null;return n&&u.push([Math.floor(n[0]-1),0,0,0],[Math.ceil(n[1]+1),0,0,0]),u}function gt(u){if(u==null)return;const{fields:i}=u,n=i&&i.find(o=>o&&o.name&&o.name.toLowerCase()==="value");return n&&n.name}function Vi(u,i){var f,d,h;const n=[],{pixelType:o,rasterAttributeTable:e}=i,t=e==null?null:e.features,r=gt(e),a=(d=(f=u.defaultSymbol)==null?void 0:f.color)==null?void 0:d.toRgb(),p=u.uniqueValueInfos;if(p)if(t){if(r){const b=new Map;p.forEach(g=>{var R;const w=g.value,y=(R=g.symbol)==null?void 0:R.color;w!=null&&y&&y.a&&b.set(String(w),y.toRgb())});const S=u.field;t.forEach(({attributes:g})=>{const w=String(g[S]),y=g[r],R=b.get(w);R?n.push([y,...R]):a&&n.push([y,...a])})}}else for(let b=0;b<p.length;b++){const S=p[b],g=(h=S.symbol)==null?void 0:h.color,w=+S.value;if(g!=null&&g.a){if(isNaN(w))return null;n.push([w,g.r,g.g,g.b])}}const c=o&&n.length>0?Ce(n,o):n,m=new I;return m.functionName="Colormap",m.functionArguments={},m.functionArguments.Colormap=c,m.variableName="Raster",i.convertToRFT?new I({rasterFunctionDefinition:X(m)}):m}function Ci(u,i){const n=u.extractColormap();if(!n||n.length===0)return null;const{pixelType:o}=i,e=o?Ce(n,o):n,t=new I;return t.functionName="Colormap",t.functionArguments={},t.functionArguments.Colormap=e,i.convertToRFT?new I({rasterFunctionDefinition:X(t)}):t}function Ai(u){const i=[];return u==null||u.forEach(n=>{const o=n;if(Array.isArray(o))i.push(o);else{if(o.min==null||o.max==null)return;const e=[o.min,o.max,o.avg||0,o.stddev||0];i.push(e)}}),i}function ji(u){const i=[],n=[];return u.forEach(o=>{i.push(o[0]),n.push(ri([...o.slice(1),255]))}),{type:"RasterColormap",values:i,colors:n}}let N=class extends z{constructor(){super(...arguments),this.layer=null,this.compression=void 0,this.pixelType=void 0,this.lercVersion=2}get adjustAspectRatio(){return this.layer.adjustAspectRatio}writeAdjustAspectRatio(i,n,o){this.layer.version<10.3||(n[o]=i)}get bandIds(){return this.layer.bandIds}get compressionQuality(){return this.layer.compressionQuality}writeCompressionQuality(i,n,o){this.format&&this.format.toLowerCase().includes("jpg")&&i!=null&&(n[o]=i)}get compressionTolerance(){return this.layer.compressionTolerance}writeCompressionTolerance(i,n,o){this.format==="lerc"&&i!=null&&(n[o]=i)}get format(){var i;return((i=this.layer.renderer)==null?void 0:i.type)==="vector-field"?"lerc":this.layer.format}get interpolation(){return this.layer.interpolation}get noData(){return this.layer.noData}get noDataInterpretation(){return this.layer.noDataInterpretation}writeLercVersion(i,n,o){this.format==="lerc"&&this.layer.version>=10.5&&(n[o]=i)}get version(){const i=this.layer;return i.commitProperty("bandIds"),i.commitProperty("format"),i.commitProperty("compressionQuality"),i.commitProperty("compressionTolerance"),i.commitProperty("interpolation"),i.commitProperty("noData"),i.commitProperty("noDataInterpretation"),i.commitProperty("mosaicRule"),i.commitProperty("renderingRule"),i.commitProperty("adjustAspectRatio"),i.commitProperty("pixelFilter"),i.commitProperty("definitionExpression"),i.commitProperty("multidimensionalSubset"),(this._get("version")||0)+1}set version(i){this._set("version",i)}get mosaicRule(){const i=this.layer;let n=i.mosaicRule;const o=i.definitionExpression;return n?o&&o!==n.where&&(n=n.clone(),n.where=o):o&&(n=new U({where:o})),n}get renderingRule(){var r,a;const i=this.layer;let n=i.renderingRule;const o=i.pixelFilter,e=!i.format||i.format.includes("jpg")||i.format.includes("png");n=this._addResampleRasterFunction(n);const t=(r=i.multidimensionalSubset)==null?void 0:r.areaOfInterest;return t&&(n=this._addClipFunction(n,t)),e&&!o&&((a=i.renderer)==null?void 0:a.type)!=="vector-field"&&(n=this.combineRendererWithRenderingRule(n)),n}combineRendererWithRenderingRule(i){const n=this.layer,{rasterInfo:o,renderer:e}=n;return i=i||n.renderingRule,e&&ft(e)?Be(Pi(e,{rasterAttributeTable:o.attributeTable,pixelType:o.pixelType,dataType:o.dataType,bandNames:o.bandInfos.map(({name:r})=>r),convertColorRampToColormap:n.version<10.6,convertToRFT:!!(i!=null&&i.rasterFunctionDefinition),bandCount:o.bandCount}),i):i}_addResampleRasterFunction(i){var r;if(!(((r=this.layer.renderer)==null?void 0:r.type)==="vector-field")||(i==null?void 0:i.functionName)==="Resample")return i;const o=this.layer.serviceDataType==="esriImageServiceDataTypeVector-UV"?7:10,e=this.layer.serviceRasterInfo.pixelSize;let t=new I({functionName:"Resample",functionArguments:{ResamplingType:o,InputCellSize:e}});return t=i!=null&&i.rasterFunctionDefinition?new I({rasterFunctionDefinition:X(t)}):t,Be(t,i)}_addClipFunction(i,n){const o=new I({functionName:"Clip",functionArguments:{ClippingGeometry:n.toJSON(),ClippingType:1}});return Be(o,i)}};s([l()],N.prototype,"layer",void 0);s([l({json:{write:!0}})],N.prototype,"adjustAspectRatio",null);s([P("adjustAspectRatio")],N.prototype,"writeAdjustAspectRatio",null);s([l({json:{write:!0}})],N.prototype,"bandIds",null);s([l({json:{write:!0}})],N.prototype,"compression",void 0);s([l({json:{write:!0}})],N.prototype,"compressionQuality",null);s([P("compressionQuality")],N.prototype,"writeCompressionQuality",null);s([l({json:{write:!0}})],N.prototype,"compressionTolerance",null);s([P("compressionTolerance")],N.prototype,"writeCompressionTolerance",null);s([l({json:{write:!0}})],N.prototype,"format",null);s([l({type:String,json:{read:{reader:se.read},write:{writer:se.write}}})],N.prototype,"interpolation",null);s([l({json:{write:!0}})],N.prototype,"noData",null);s([l({type:String,json:{read:{reader:Ie.read},write:{writer:Ie.write}}})],N.prototype,"noDataInterpretation",null);s([l({json:{write:!0}})],N.prototype,"pixelType",void 0);s([l({json:{write:!0}})],N.prototype,"lercVersion",void 0);s([P("lercVersion")],N.prototype,"writeLercVersion",null);s([l({type:Number})],N.prototype,"version",null);s([l({json:{write:!0}})],N.prototype,"mosaicRule",null);s([l({json:{write:!0}})],N.prototype,"renderingRule",null);N=s([F("esri.layers.mixins.ExportImageServiceParameters")],N);let ge=class extends z{constructor(i){super(i),this.north=null,this.up=null,this.spatialReference=null}};s([l({type:Number,json:{write:!0}})],ge.prototype,"north",void 0);s([l({type:Number,json:{write:!0}})],ge.prototype,"up",void 0);s([l({type:ce,json:{write:!0}})],ge.prototype,"spatialReference",void 0);ge=s([F("esri.rest.support.ImageAngleResult")],ge);const Mi=ge;let ae=class extends z{constructor(){super(...arguments),this.value=null,this.displayValue=null,this.uncertainty=null}};s([l({type:Number,json:{read:!0,write:!0}})],ae.prototype,"value",void 0);s([l({type:String,json:{read:!0,write:!0}})],ae.prototype,"displayValue",void 0);s([l({type:Number,json:{read:!0,write:!0}})],ae.prototype,"uncertainty",void 0);ae=s([F("esri.rest.support.ImageMeasureResultValue")],ae);let Re=class extends ae{constructor(){super(...arguments),this.unit=null}};s([l({type:String,json:{read:ne.read,write:ne.write}})],Re.prototype,"unit",void 0);Re=s([F("esri.rest.support.ImageMeasureResultLengthValue")],Re);let Ae=class extends ae{constructor(){super(...arguments),this.unit=null}};s([l({type:String,json:{read:Ne.read,write:Ne.write}})],Ae.prototype,"unit",void 0);Ae=s([F("esri.rest.support.ImageMeasureResultAreaValue")],Ae);let xe=class extends ae{constructor(){super(...arguments),this.unit=null}};s([l({type:String,json:{read:_e.read,write:_e.write}})],xe.prototype,"unit",void 0);xe=s([F("esri.rest.support.ImageMeasureResultAngleValue")],xe);let oe=class extends z{constructor(){super(...arguments),this.name=null,this.sensorName=null}};s([l({type:String,json:{read:!0,write:!0}})],oe.prototype,"name",void 0);s([l({type:String,json:{read:!0,write:!0}})],oe.prototype,"sensorName",void 0);oe=s([F("esri.rest.support.BaseImageMeasureResult")],oe);let Fe=class extends oe{constructor(){super(...arguments),this.area=null,this.perimeter=null}};s([l({type:Ae,json:{read:!0,write:!0}})],Fe.prototype,"area",void 0);s([l({type:Re,json:{read:!0,write:!0}})],Fe.prototype,"perimeter",void 0);Fe=s([F("esri.rest.support.ImageAreaResult")],Fe);const Oi=Fe;let be=class extends oe{constructor(){super(...arguments),this.distance=null,this.azimuthAngle=null,this.elevationAngle=null}};s([l({type:Re,json:{read:!0,write:!0}})],be.prototype,"distance",void 0);s([l({type:xe,json:{read:!0,write:!0}})],be.prototype,"azimuthAngle",void 0);s([l({type:xe,json:{read:!0,write:!0}})],be.prototype,"elevationAngle",void 0);be=s([F("esri.rest.support.ImageDistanceResult")],be);const Ji=be;let je=class extends oe{constructor(){super(...arguments),this.height=null}};s([l({type:Re,json:{read:!0,write:!0}})],je.prototype,"height",void 0);je=s([F("esri.rest.support.ImageHeightResult")],je);const Ei=je;let W=class extends z{constructor(){super(...arguments),this.catalogItemVisibilities=null,this.catalogItems=null,this.location=null,this.name=null,this.objectId=null,this.processedValues=null,this.properties=null,this.value=null}};s([l({json:{write:!0}})],W.prototype,"catalogItemVisibilities",void 0);s([l({type:dt,json:{write:!0}})],W.prototype,"catalogItems",void 0);s([l({type:G,json:{write:!0}})],W.prototype,"location",void 0);s([l({json:{write:!0}})],W.prototype,"name",void 0);s([l({json:{write:!0}})],W.prototype,"objectId",void 0);s([l({json:{write:!0}})],W.prototype,"processedValues",void 0);s([l({json:{write:!0}})],W.prototype,"properties",void 0);s([l({json:{write:!0}})],W.prototype,"value",void 0);W=s([F("esri.rest.support.ImageIdentifyResult")],W);const Li=W;let Me=class extends z{constructor(){super(...arguments),this.geometries=null}};s([l({json:{write:!0}})],Me.prototype,"geometries",void 0);Me=s([F("esri.rest.support.ImagePixelLocationResult")],Me);const zi=Me;let Oe=class extends oe{constructor(){super(...arguments),this.point=null}};s([l({type:G,json:{name:"point.value",read:!0,write:!0}})],Oe.prototype,"point",void 0);Oe=s([F("esri.rest.support.ImagePointResult")],Oe);const Gi=Oe;let Y=class extends z{constructor(){super(...arguments),this.attributes=null,this.location=null,this.locationId=null,this.rasterId=null,this.resolution=null,this.pixelValue=null}};s([l({json:{write:!0}})],Y.prototype,"attributes",void 0);s([l({type:G,json:{write:!0}})],Y.prototype,"location",void 0);s([l({json:{write:!0}})],Y.prototype,"locationId",void 0);s([l({json:{write:!0}})],Y.prototype,"rasterId",void 0);s([l({json:{write:!0}})],Y.prototype,"resolution",void 0);s([l({json:{write:!0}})],Y.prototype,"pixelValue",void 0);Y=s([F("esri.rest.support.ImageSample")],Y);const Hi=Y;let Je=class extends z{constructor(){super(...arguments),this.samples=null}};s([l({type:[Hi],json:{write:!0}})],Je.prototype,"samples",void 0);Je=s([F("esri.rest.support.ImageSampleResult")],Je);const Ui=Je;function Rt(u){const i=u==null?void 0:u.time;if(i&&(i.start!=null||i.end!=null)){const n=[];i.start!=null&&n.push(i.start),i.end!=null&&!n.includes(i.end)&&n.push(i.end),u.time=n.join(",")}}async function bt(u,i,n){const o=ie(u),e=i.geometry?[i.geometry]:[],t=await Ee(e),r=i.toJSON();Rt(r);const a=t&&t[0];a!=null&&(r.geometry=a.toJSON());const p=fe({...o.query,f:"json",...r});return he(p,n)}async function Bi(u,i,n){var p;const o=i.toJSON();o.angleName!=null&&(o.angleName=o.angleName.join(",")),i.point!=null&&((p=i.point.spatialReference)!=null&&p.imageCoordinateSystem)&&(o.point.spatialReference=ze(i.point.spatialReference)),i.spatialReference!=null&&i.spatialReference.imageCoordinateSystem&&(o.spatialReference=St(i.spatialReference));const e=ie(u),t=fe({...e.query,f:"json",...o}),r=he(t,n),{data:a}=await D(`${e.path}/computeAngles`,r);return a.spatialReference=a.spatialReference?a.spatialReference.geodataXform!=null?new ce({wkid:0,imageCoordinateSystem:a.spatialReference}):ce.fromJSON(a.spatialReference):null,a.north==="NaN"&&(a.north=null),a.up==="NaN"&&(a.up=null),new Mi(a)}async function $i(u,i,n){var c;const o=i.toJSON(),{geometries:e}=i;if(e)for(let m=0;m<e.length;m++)(c=e[m].spatialReference)!=null&&c.imageCoordinateSystem&&(o.geometries.geometries[m].spatialReference=ze(e[m].spatialReference));const t=ie(u),r=fe({...t.query,f:"json",...o}),a=he(r,n),{data:p}=await D(`${t.path}/computePixelLocation`,a);return zi.fromJSON(p)}async function ki(u,i,n){const o=await bt(u,i,n),e=ie(u),{data:t}=await D(`${e.path}/computeStatisticsHistograms`,o),{statistics:r}=t;return r!=null&&r.length&&r.forEach(a=>{a.avg=a.mean,a.stddev=a.standardDeviation}),{statistics:r,histograms:t.histograms}}async function Qi(u,i,n){const o=await bt(u,i,n),e=ie(u),{data:t}=await D(`${e.path}/computeHistograms`,o);return{histograms:t.histograms}}async function Wi(u,i,n){var f,d;const o=i.toJSON();Rt(o),(f=o.outFields)!=null&&f.length&&(o.outFields=o.outFields.join(","));const e=await Ee(i.geometry),t=e==null?void 0:e[0];t!=null&&(o.geometry=t.toJSON());const r=ie(u),a=fe({...r.query,f:"json",...o}),p=he(a,n),{data:c}=await D(`${r.path}/getSamples`,p),m=(d=c==null?void 0:c.samples)==null?void 0:d.map(h=>{const b=h.value==="NaN"||h.value===""?null:h.value.split(" ").map(S=>Number(S));return{...h,pixelValue:b}});return Ui.fromJSON({samples:m})}async function nt(u,i,n){const o=ie(u),e=i.geometry?[i.geometry]:[];return Ee(e).then(t=>{const r=i.toJSON(),a=t&&t[0];a!=null&&(r.geometry=JSON.stringify(a.toJSON()));const p=fe({...o.query,f:"json",...r}),c=he(p,n);return D(o.path+"/identify",c)}).then(t=>Li.fromJSON(t.data))}async function Ki(u,i,n){const o=await Le(u,i,[i.fromGeometry,i.toGeometry],n);return Ei.fromJSON(o)}async function Xi(u,i,n){const o=await Le(u,i,[i.geometry],n);return Oi.fromJSON(o)}async function Zi(u,i,n){const o=await Le(u,i,[i.geometry],n);return Gi.fromJSON(o)}async function qi(u,i,n){const o=await Le(u,i,[i.fromGeometry,i.toGeometry],n);return Ji.fromJSON(o)}async function Le(u,i,n,o){const e=ie(u),t=await Ee(n),r=i.toJSON();t[0]!=null&&(r.fromGeometry=JSON.stringify(at(t[0]))),t[1]!=null&&(r.toGeometry=JSON.stringify(at(t[1])));const a=fe({...e.query,f:"json",...r}),p=he(a,o),{data:c}=await D(e.path+"/measure",p);return c}function at(u){var n;const i=u.toJSON();return(n=u.spatialReference)!=null&&n.imageCoordinateSystem&&(i.spatialReference=ze(u.spatialReference)),i}function ze(u){const{imageCoordinateSystem:i}=u;if(i){const{id:n,referenceServiceName:o}=i;return n!=null?o?{icsid:n,icsns:o}:{icsid:n}:{ics:i}}return u.toJSON()}function St(u,i){const n=ze(u),{icsid:o,icsns:e,wkid:t}=n;return o!=null?e==null||i!=null&&i.toLowerCase().includes("/"+e.toLowerCase()+"/")?`0:${o}`:JSON.stringify(n):t?t.toString():JSON.stringify(n)}async function Yi(u,i,n){var x,T;const o=ie(u),e=fe({...o==null?void 0:o.query,f:"json"}),t=he(e,n),r=`${o==null?void 0:o.path}/${i}/info`,a=D(`${r}`,t),p=D(`${r}/keyProperties`,t),c=await Promise.allSettled([a,p]),m=c[0].status==="fulfilled"?c[0].value.data:null,f=c[1].status==="fulfilled"?c[1].value.data:null;let d=null;(x=m.statistics)!=null&&x.length&&(d=m.statistics.map(M=>({min:M[0],max:M[1],avg:M[2],stddev:M[3]})));const h=De.fromJSON(m.extent),b=Math.ceil(h.width/m.pixelSizeX-.1),S=Math.ceil(h.height/m.pixelSizeY-.1),g=h.spatialReference,w=new G({x:m.pixelSizeX,y:m.pixelSizeY,spatialReference:g}),y=(T=m.histograms)!=null&&T.length?m.histograms:null,R=new si({origin:m.origin,blockWidth:m.blockWidth,blockHeight:m.blockHeight,firstPyramidLevel:m.firstPyramidLevel,maximumPyramidLevel:m.maxPyramidLevel});return new mt({width:b,height:S,bandCount:m.bandCount,extent:h,spatialReference:g,pixelSize:w,pixelType:m.pixelType.toLowerCase(),statistics:d,histograms:y,keyProperties:f,storageInfo:R})}var ke;let me=ke=class extends z{constructor(i){super(i),this.angleNames=null,this.point=null,this.spatialReference=null,this.rasterId=null}clone(){return new ke($({angleNames:this.angleNames,point:this.point,spatialReference:this.spatialReference,rasterId:this.rasterId}))}};s([l({type:[String],json:{name:"angleName",write:!0}})],me.prototype,"angleNames",void 0);s([l({type:G,json:{write:!0}})],me.prototype,"point",void 0);s([l({type:ce,json:{write:!0}})],me.prototype,"spatialReference",void 0);s([l({type:Ve,json:{write:!0}})],me.prototype,"rasterId",void 0);me=ke=s([F("esri.rest.support.ImageAngleParameters")],me);const er=me,B=new wt({esriMensurationPoint:"point",esriMensurationCentroid:"centroid",esriMensurationDistanceAndAngle:"distance-and-angle",esriMensurationAreaAndPerimeter:"area-and-perimeter",esriMensurationHeightFromBaseAndTop:"base-and-top",esriMensurationHeightFromBaseAndTopShadow:"base-and-top-shadow",esriMensurationHeightFromTopAndTopShadow:"top-and-top-shadow",esriMensurationPoint3D:"point-3D",esriMensurationCentroid3D:"centroid-3D",esriMensurationDistanceAndAngle3D:"distance-and-angle-3D",esriMensurationAreaAndPerimeter3D:"area-and-perimeter-3D"});let k=class extends z{constructor(){super(...arguments),this.type=null,this.measureOperation=null,this.mosaicRule=null,this.renderingRule=null,this.pixelSize=null,this.raster=void 0}};s([l()],k.prototype,"type",void 0);s([l({type:B.apiValues,json:{read:B.read,write:B.write}})],k.prototype,"measureOperation",void 0);s([l({type:U,json:{write:!0}})],k.prototype,"mosaicRule",void 0);s([l({type:I,json:{write:!0}})],k.prototype,"renderingRule",void 0);s([l({type:G,json:{write:!0}})],k.prototype,"pixelSize",void 0);s([l({json:{write:!0}})],k.prototype,"raster",void 0);k=s([F("esri.rest.support.BaseImageMeasureParameters")],k);var Qe;let ee=Qe=class extends k{constructor(){super(...arguments),this.type="area-perimeter",this.geometry=null,this.is3D=!1,this.linearUnit="meters",this.areaUnit="square-meters"}writeGeometry(i,n,o){i!=null&&(n.geometryType=we(i),n[o]=i.toJSON())}get measureOperation(){return this.is3D?"area-and-perimeter-3D":"area-and-perimeter"}clone(){return new Qe($({geometry:this.geometry,is3D:this.is3D,linearUnit:this.linearUnit,areaUnit:this.areaUnit,mosaicRule:this.mosaicRule,renderingRule:this.renderingRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([l({types:et,json:{name:"fromGeometry",read:!0,write:!0}})],ee.prototype,"geometry",void 0);s([P("geometry")],ee.prototype,"writeGeometry",null);s([l({type:B.apiValues,json:{write:B.write}})],ee.prototype,"measureOperation",null);s([l({json:{read:!0}})],ee.prototype,"is3D",void 0);s([l({type:String,json:{read:ne.read,write:ne.write}})],ee.prototype,"linearUnit",void 0);s([l({type:String,json:{read:Ne.read,write:Ne.write}})],ee.prototype,"areaUnit",void 0);ee=Qe=s([F("esri.rest.support.ImageAreaParameters")],ee);const tr=ee;var We;let Z=We=class extends k{constructor(){super(...arguments),this.type="distance-angle",this.fromGeometry=null,this.toGeometry=null,this.is3D=!1,this.linearUnit="meters",this.angularUnit="degrees"}writeFromGeometry(i,n,o){i!=null&&(n.geometryType=we(i),n[o]=i.toJSON())}get measureOperation(){return this.is3D?"distance-and-angle-3D":"distance-and-angle"}clone(){return new We($({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,is3D:this.is3D,linearUnit:this.linearUnit,angularUnit:this.angularUnit,mosaicRule:this.mosaicRule,renderingRule:this.renderingRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([l({type:G,json:{read:!0,write:!0}})],Z.prototype,"fromGeometry",void 0);s([P("fromGeometry")],Z.prototype,"writeFromGeometry",null);s([l({type:G,json:{read:!0,write:!0}})],Z.prototype,"toGeometry",void 0);s([l({type:B.apiValues,json:{write:B.write}})],Z.prototype,"measureOperation",null);s([l({json:{read:!0}})],Z.prototype,"is3D",void 0);s([l({type:String,json:{read:ne.read,write:ne.write}})],Z.prototype,"linearUnit",void 0);s([l({type:String,json:{read:_e.read,write:_e.write}})],Z.prototype,"angularUnit",void 0);Z=We=s([F("esri.rest.support.ImageDistanceParameters")],Z);const ir=Z;var Ke;let te=Ke=class extends k{constructor(){super(...arguments),this.type="height",this.fromGeometry=null,this.toGeometry=null,this.operationType="base-and-top",this.linearUnit="meters"}writeFromGeometry(i,n,o){i!=null&&(n.geometryType=we(i),n[o]=i.toJSON())}get measureOperation(){return this.operationType}clone(){return new Ke($({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,operationType:this.operationType,linearUnit:this.linearUnit,mosaicRule:this.mosaicRule,renderingRule:this.renderingRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([l({type:G,json:{read:!0}})],te.prototype,"fromGeometry",void 0);s([P("fromGeometry")],te.prototype,"writeFromGeometry",null);s([l({type:G,json:{read:!0,write:!0}})],te.prototype,"toGeometry",void 0);s([l({type:B.apiValues,json:{write:B.write}})],te.prototype,"measureOperation",null);s([l({json:{read:!0}})],te.prototype,"operationType",void 0);s([l({type:String,json:{read:ne.read,write:ne.write}})],te.prototype,"linearUnit",void 0);te=Ke=s([F("esri.rest.support.ImageHeightParameters")],te);const rr=te;var Xe;let _=Xe=class extends z{constructor(){super(...arguments),this.geometry=null,this.renderingRules=null,this.pixelSize=null,this.returnGeometry=!0,this.returnCatalogItems=!0,this.returnPixelValues=!0,this.maxItemCount=null,this.timeExtent=null,this.raster=void 0,this.viewId=void 0,this.processAsMultidimensional=!1}writeGeometry(i,n,o){i!=null&&(n.geometryType=we(i),n[o]=JSON.stringify(i.toJSON()))}set mosaicRule(i){let n=i;n&&n.mosaicMethod&&(n=U.fromJSON({...n.toJSON(),mosaicMethod:n.mosaicMethod,mosaicOperation:n.mosaicOperation})),this._set("mosaicRule",n)}writeMosaicRule(i,n,o){i!=null&&(n[o]=JSON.stringify(i.toJSON()))}set renderingRule(i){let n=i;n&&n.rasterFunction&&(n=I.fromJSON({...n.toJSON(),rasterFunction:n.rasterFunction,rasterFunctionArguments:n.rasterFunctionArguments})),this._set("renderingRule",n)}writeRenderingRule(i,n,o){i!=null&&(n[o]=JSON.stringify(i.toJSON())),i.rasterFunctionDefinition&&(n[o]=JSON.stringify(i.rasterFunctionDefinition))}writeRenderingRules(i,n,o){i!=null&&(n[o]=JSON.stringify(i.map(e=>e.rasterFunctionDefinition||e.toJSON())))}writePixelSize(i,n,o){i!=null&&(n[o]=JSON.stringify(i))}writeTimeExtent(i,n,o){if(i!=null){const e=i.start!=null?i.start.getTime():null,t=i.end!=null?i.end.getTime():null;n[o]=e!=null?t!=null?`${e},${t}`:`${e}`:null}}clone(){return new Xe($({geometry:this.geometry,mosaicRule:this.mosaicRule,renderingRule:this.renderingRule,pixelSize:this.pixelSize,returnGeometry:this.returnGeometry,returnCatalogItems:this.returnCatalogItems,returnPixelValues:this.returnPixelValues,maxItemCount:this.maxItemCount,processAsMultidimensional:this.processAsMultidimensional,raster:this.raster,viewId:this.viewId,timeExtent:this.timeExtent}))}};s([l({json:{write:!0}})],_.prototype,"geometry",void 0);s([P("geometry")],_.prototype,"writeGeometry",null);s([l({type:U,json:{write:!0}})],_.prototype,"mosaicRule",null);s([P("mosaicRule")],_.prototype,"writeMosaicRule",null);s([l({type:I,json:{write:!0}})],_.prototype,"renderingRule",null);s([P("renderingRule")],_.prototype,"writeRenderingRule",null);s([l({type:[I],json:{write:!0}})],_.prototype,"renderingRules",void 0);s([P("renderingRules")],_.prototype,"writeRenderingRules",null);s([l({type:G,json:{write:!0}})],_.prototype,"pixelSize",void 0);s([P("pixelSize")],_.prototype,"writePixelSize",null);s([l({type:Boolean,json:{write:!0}})],_.prototype,"returnGeometry",void 0);s([l({type:Boolean,json:{write:!0}})],_.prototype,"returnCatalogItems",void 0);s([l({type:Boolean,json:{write:!0}})],_.prototype,"returnPixelValues",void 0);s([l({type:Number,json:{write:!0}})],_.prototype,"maxItemCount",void 0);s([l({type:lt,json:{write:{target:"time"}}})],_.prototype,"timeExtent",void 0);s([P("timeExtent")],_.prototype,"writeTimeExtent",null);s([l({json:{write:!0}})],_.prototype,"raster",void 0);s([l({json:{write:!0}})],_.prototype,"viewId",void 0);s([l({type:Boolean,json:{write:!0}})],_.prototype,"processAsMultidimensional",void 0);_=Xe=s([F("esri.rest.support.ImageIdentifyParameters")],_);const ot=_;var Ze;let Se=Ze=class extends z{constructor(){super(...arguments),this.geometries=null,this.rasterId=null}writeGeometry(i,n,o){n.geometries={geometryType:"esriGeometryPoint",geometries:i.map(e=>e.toJSON())}}clone(){var i;return new Ze({geometries:((i=this.geometries)==null?void 0:i.map(n=>n.clone()))??[],rasterId:this.rasterId})}};s([l({type:[G],json:{write:!0}})],Se.prototype,"geometries",void 0);s([P("geometries")],Se.prototype,"writeGeometry",null);s([l({type:Ve,json:{write:!0}})],Se.prototype,"rasterId",void 0);Se=Ze=s([F("esri.rest.support.ImagePixelLocationParameters")],Se);const sr=Se;var qe;let de=qe=class extends k{constructor(){super(...arguments),this.type="point",this.geometry=null,this.is3D=!1}writeGeometry(i,n,o){i!=null&&(n.geometryType=we(i),n[o]=i.toJSON())}get measureOperation(){const{is3D:i,geometry:n}=this;return n.type==="point"?i?"point-3D":"point":i?"centroid-3D":"centroid"}clone(){return new qe($({geometry:this.geometry,is3D:this.is3D,mosaicRule:this.mosaicRule,renderingRule:this.renderingRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([l({types:et,json:{name:"fromGeometry",read:ut}})],de.prototype,"geometry",void 0);s([P("geometry")],de.prototype,"writeGeometry",null);s([l({type:B.apiValues,json:{read:B.read,write:B.write}})],de.prototype,"measureOperation",null);s([l({json:{read:!0}})],de.prototype,"is3D",void 0);de=qe=s([F("esri.rest.support.ImagePointParameters")],de);const nr=de;var Ye;let O=Ye=class extends z{constructor(){super(...arguments),this.geometry=null,this.interpolation="nearest",this.mosaicRule=null,this.outFields=null,this.pixelSize=null,this.returnFirstValueOnly=!0,this.sampleDistance=null,this.sampleCount=null,this.sliceId=null,this.timeExtent=null}writeGeometry(i,n,o){i!=null&&(n.geometryType=we(i),n[o]=i.toJSON())}set locations(i){if(i!=null&&i.length){const n=new vt({spatialReference:i[0].spatialReference});n.points=i.map(o=>[o.x,o.y]),this._set("locations",i),this.geometry=n}}clone(){return new Ye($({geometry:this.geometry,locations:this.locations,interpolation:this.interpolation,mosaicRule:this.mosaicRule,outFields:this.outFields,raster:this.raster,returnFirstValueOnly:this.returnFirstValueOnly,sampleDistance:this.sampleDistance,sampleCount:this.sampleCount,sliceId:this.sliceId,pixelSize:this.pixelSize,timeExtent:this.timeExtent}))}};s([l({types:et,json:{read:ut}})],O.prototype,"geometry",void 0);s([P("geometry")],O.prototype,"writeGeometry",null);s([l()],O.prototype,"locations",null);s([l({type:String,json:{type:se.jsonValues,read:se.read,write:se.write}})],O.prototype,"interpolation",void 0);s([l({type:U,json:{write:!0}})],O.prototype,"mosaicRule",void 0);s([l({type:[String],json:{write:!0}})],O.prototype,"outFields",void 0);s([l({type:G,json:{write:!0}})],O.prototype,"pixelSize",void 0);s([l({type:String,json:{write:!0}})],O.prototype,"raster",void 0);s([l({type:Boolean,json:{write:!0}})],O.prototype,"returnFirstValueOnly",void 0);s([l({type:Number,json:{write:!0}})],O.prototype,"sampleDistance",void 0);s([l({type:Number,json:{write:!0}})],O.prototype,"sampleCount",void 0);s([l({type:Number,json:{write:!0}})],O.prototype,"sliceId",void 0);s([l({type:lt,json:{read:{source:"time"},write:{target:"time"}}})],O.prototype,"timeExtent",void 0);O=Ye=s([F("esri.rest.support.ImageSampleParameters")],O);const ar=O,$e=It()({U1:"u1",U2:"u2",U4:"u4",U8:"u8",S8:"s8",U16:"u16",S16:"s16",U32:"u32",S32:"s32",F32:"f32",F64:"f64",C64:"c64",C128:"c128",UNKNOWN:"unknown"}),or=new Set(["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"]),lr=Dt(Nt,{min:0,max:255});function ur(u){if(!u)return null;const n=JSON.stringify(u).match(/"rasterFunction":"(.*?")/gi),o=n==null?void 0:n.map(e=>e.replace('"rasterFunction":"',"").replace('"',""));return o?o.join("/"):null}const pr=u=>{let i=class extends u{constructor(){super(...arguments),this._functionRasterInfos={},this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this._cachedRendererJson=null,this._serviceSupportsMosaicRule=null,this._rasterAttributeTableFieldPrefix="Raster.",this.adjustAspectRatio=null,this.bandIds=void 0,this.capabilities=null,this.compressionQuality=void 0,this.compressionTolerance=.01,this.copyright=null,this.defaultMosaicRule=null,this.definitionExpression=null,this.exportImageServiceParameters=null,this.rasterInfo=null,this.fields=null,this.fullExtent=null,this.hasMultidimensions=!1,this.imageMaxHeight=4100,this.imageMaxWidth=4100,this.interpolation=void 0,this.minScale=0,this.maxScale=0,this.multidimensionalInfo=null,this.multidimensionalSubset=null,this.noData=null,this.noDataInterpretation=void 0,this.objectIdField=null,this.geometryType="polygon",this.typeIdField=null,this.types=[],this.pixelFilter=null,this.raster=void 0,this.sourceType=null,this.viewId=void 0,this.symbolizer=null,this.rasterFunctionInfos=null,this.serviceDataType=null,this.spatialReference=null,this.pixelType=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.url=null,this.version=void 0}initialize(){this._set("exportImageServiceParameters",new N({layer:this}))}readServiceSupportsMosaicRule(e,t){return this._isMosaicRuleSupported(t)}get _rasterFunctionNamesIndex(){const e=new Map;return!this.rasterFunctionInfos||this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.length<1||this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.forEach(t=>{e.set(t.name.toLowerCase().replace(/ /gi,"_"),t.name)}),e}readBandIds(e,t){if(Array.isArray(e)&&e.length>0&&e.every(r=>typeof r=="number"))return e}readCapabilities(e,t){return this._readCapabilities(t)}writeCompressionQuality(e,t,r){e!=null&&this.format!=="lerc"&&(t[r]=e)}writeCompressionTolerance(e,t,r){this.format==="lerc"&&e!=null&&(t[r]=e)}readDefaultMosaicRule(e,t){return this._serviceSupportsMosaicRule?U.fromJSON(t):null}get fieldsIndex(){return this.fields?new li(this.fields):null}set format(e){e&&or.has(e.toLowerCase())&&this._set("format",e.toLowerCase())}readFormat(e,t){return t.serviceDataType==="esriImageServiceDataTypeVector-UV"||t.serviceDataType==="esriImageServiceDataTypeVector-MagDir"||this.pixelFilter!=null?"lerc":"jpgpng"}readMinScale(e,t){return t.minLOD!=null&&t.maxLOD!=null?e:0}readMaxScale(e,t){return t.minLOD!=null&&t.maxLOD!=null?e:0}set mosaicRule(e){let t=e;t&&t.mosaicMethod&&(t=U.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}readMosaicRule(e,t){const r=e||t.mosaicRule;return r?U.fromJSON(r):this._isMosaicRuleSupported(t)?U.fromJSON(t):null}writeMosaicRule(e,t,r){let a=this.mosaicRule;const p=this.definitionExpression;a?p&&p!==a.where&&(a=a.clone(),a.where=p):p&&(a=new U({where:p})),this._isValidCustomizedMosaicRule(a)&&(t[r]=a.toJSON())}writeNoData(e,t,r){e!=null&&typeof e=="number"&&(t[r]=lr(e))}readObjectIdField(e,t){if(!e){const r=t.fields.filter(a=>a.type==="esriFieldTypeOID"||a.type==="oid");e=r&&r[0]&&r[0].name}return e}get parsedUrl(){return xt(this.url)}readSourceType(e,t){return this._isMosaicDataset(t)?"mosaic-dataset":"raster-dataset"}set renderer(e){this.loaded&&(e=this._configRenderer(e)),this._set("renderer",e)}readRenderer(e,t,r){var c,m;const a=(m=(c=t==null?void 0:t.layerDefinition)==null?void 0:c.drawingInfo)==null?void 0:m.renderer,p=Jt(a,r);return p==null?null:(p.type==="vector-field"&&t.symbolTileSize&&!a.symbolTileSize&&(p.symbolTileSize=t.symbolTileSize),ft(p)||tt.getLogger(this.declaredClass).warn("ArcGISImageService","Imagery layer doesn't support given renderer type."),p)}writeRenderer(e,t,r){t.layerDefinition=t.layerDefinition||{},t.layerDefinition.drawingInfo=t.layerDefinition.drawingInfo||{},t.layerDefinition.drawingInfo.renderer=e.toJSON(),e.type==="vector-field"&&(t.symbolTileSize=e.symbolTileSize)}get rasterFields(){var m;const e=this._rasterAttributeTableFieldPrefix||"Raster.",t=new pe({name:"Raster.ItemPixelValue",alias:"Item Pixel Value",domain:null,editable:!1,length:50,type:"string"}),r=new pe({name:"Raster.ServicePixelValue",alias:"Service Pixel Value",domain:null,editable:!1,length:50,type:"string"}),a=new pe({name:"Raster.ServicePixelValue.Raw",alias:"Raw Service Pixel Value",domain:null,editable:!1,length:50,type:"string"});let p=this.fields?$(this.fields):[];p.push(r),(m=this.capabilities)!=null&&m.operations.supportsQuery&&this.fields&&this.fields.length>0&&p.push(t),this.version>=10.4&&this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.some(f=>f.name.toLowerCase()==="none")&&p.push(a),this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.filter(f=>f.name.toLowerCase()!=="none").forEach(f=>{p.push(new pe({name:"Raster.ServicePixelValue."+f.name,alias:f.name,domain:null,editable:!1,length:50,type:"string"}))}),this._isVectorDataSet()&&(p.push(new pe({name:"Raster.Magnitude",alias:"Magnitude",domain:null,editable:!1,type:"double"})),p.push(new pe({name:"Raster.Direction",alias:"Direction",domain:null,editable:!1,type:"double"})));const{attributeTable:c}=this.rasterInfo??{};if(c!=null){const f=c.fields.filter(d=>d.type!=="esriFieldTypeOID"&&d.name.toLowerCase()!=="value").map(d=>{const h=$(d);return h.name=e+d.name,h});p=p.concat(f)}return p}set renderingRule(e){let t=e;t&&t.rasterFunction&&(t=I.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("renderingRule",t)}readRenderingRule(e,t){const r=t.rasterFunctionInfos;return!t.renderingRule&&(!r||!r.length||r[0].name==="None")?null:this._isRFTJson(t.renderingRule)?I.fromJSON({rasterFunctionDefinition:t.renderingRule}):I.fromJSON(t.renderingRule||{rasterFunctionInfos:t.rasterFunctionInfos})}writeRenderingRule(e,t,r){const a=e.toJSON();if(a.rasterFunctionDefinition){t[r]=a.rasterFunctionDefinition;return}t[r]=a}readSpatialReference(e,t){const r=e||t.extent.spatialReference;return r?ce.fromJSON(r):null}readPixelType(e){return $e.fromJSON(e)||e}writePixelType(e,t,r){(this.serviceRasterInfo==null||this.pixelType!==this.serviceRasterInfo.pixelType)&&(t[r]=$e.toJSON(e))}readVersion(e,t){let r=t.currentVersion;return r||(t.hasOwnProperty("fields")||t.hasOwnProperty("timeInfo")?r=10:r=9.3),r}applyFilter(e){let t=e;return this.pixelFilter&&(t=this._clonePixelData(e),this.pixelFilter(t)),t}async applyRenderer(e,t){let r=e;const{renderer:a,symbolizer:p,pixelFilter:c,bandIds:m}=this;if(!this._isPicture()&&a&&p&&!c){const f=JSON.stringify(this._cachedRendererJson)!==JSON.stringify(a.toJSON()),d=this._rasterJobHandler.instance;if(d){f&&(p.bind(),await d.updateSymbolizer(p,t),this._cachedRendererJson=a.toJSON());const h=await d.symbolize({bandIds:m,...e},t);r={extent:e.extent,pixelBlock:h}}else r={extent:e.extent,pixelBlock:p.symbolize({bandIds:m,...e})}}return r}destroy(){this._shutdownJobHandler()}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}async computeAngles(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsComputeAngles)throw new A("imagery-layer:compute-angles","this operation is not supported on the input image service");return e=H(er,e).clone(),Bi(this.url,e,this._getRequestOptions(t))}async computePixelSpaceLocations(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsComputePixelLocation)throw new A("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return e=H(sr,e).clone(),$i(this.url,e,this._getRequestOptions(t))}async computeHistograms(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsComputeHistograms)throw new A("imagery-layer:compute-histograms","this operation is not supported on the input image service");return e=H(it,e).clone(),this._applyMosaicAndRenderingRules(e),Qi(this.url,e,this._getRequestOptions(t))}async computeStatisticsHistograms(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsComputeStatisticsHistograms)throw new A("imagery-layer:compute-statistics-histograms","this operation is not supported on the input image service");return e=H(it,e).clone(),this._applyMosaicAndRenderingRules(e),ki(this.url,e,this._getRequestOptions(t))}async measureHeight(e,t){const r=await this._fetchCapabilities(t==null?void 0:t.signal);if(!(e.operationType==="base-and-top"?r.mensuration.supportsHeightFromBaseAndTop:e.operationType==="base-and-top-shadow"?r.mensuration.supportsHeightFromBaseAndTopShadow:r.mensuration.supportsHeightFromTopAndTopShadow))throw new A("imagery-layer:measure-height","this operation is not supported on the input image service");return e=H(rr,e).clone(),this._applyMosaicAndRenderingRules(e),Ki(this.url,e,this._getRequestOptions(t))}async measureAreaAndPerimeter(e,t){const r=await this._fetchCapabilities(t==null?void 0:t.signal);if(!(r.mensuration.supportsAreaAndPerimeter&&(!e.is3D||r.mensuration.supports3D)))throw new A("imagery-layer:measure-area-and-perimeter","this operation is not supported on the input image service");return e=H(tr,e).clone(),this._applyMosaicAndRenderingRules(e),Xi(this.url,e,this._getRequestOptions(t))}async measureDistanceAndAngle(e,t){const r=await this._fetchCapabilities(t==null?void 0:t.signal);if(!(r.mensuration.supportsDistanceAndAngle&&(!e.is3D||r.mensuration.supports3D)))throw new A("imagery-layer:measure-distance-and-angle","this operation is not supported on the input image service");return e=H(ir,e).clone(),this._applyMosaicAndRenderingRules(e),qi(this.url,e,this._getRequestOptions(t))}async measurePointOrCentroid(e,t){const r=await this._fetchCapabilities(t==null?void 0:t.signal);if(!(r.mensuration.supportsPointOrCentroid&&(!e.is3D||r.mensuration.supports3D)))throw new A("imagery-layer:measure-point-or-centroid","this operation is not supported on the input image service");return e=H(nr,e).clone(),this._applyMosaicAndRenderingRules(e),Zi(this.url,e,this._getRequestOptions(t))}getField(e){const{fieldsIndex:t}=this;return t!=null?t.get(e):void 0}getFieldDomain(e,t){const r=this.getField(e);return r?r.domain:null}async fetchImage(e,t,r,a={}){if(e==null||t==null||r==null)throw new A("imagery-layer:fetch-image","Insufficient parameters for requesting an image. A valid extent, width and height values are required.");if(this.renderer||this.symbolizer){const d=await this.generateRasterInfo(this.renderingRule,{signal:a.signal});d&&(this.rasterInfo=d)}const p=this.getExportImageServiceParameters(e,t,r,a.timeExtent);if(p==null){if(a.requestAsImageElement&&this._canRequestImageElement(this.format)){const R=document.createElement("canvas");return R.width=t,R.height=r,a.returnImageBitmap?{imageBitmap:await st(R,`${n(this.parsedUrl)}/exportImage`,a.signal)}:{imageOrCanvasElement:R}}const{bandIds:d,rasterInfo:h}=this,b=((d==null?void 0:d.length)||h.bandCount)??0,S=t*r,g=h.pixelType,w=[];for(let R=0;R<b;R++)w.push(He.createEmptyBand(g,S));return{pixelData:{pixelBlock:new He({width:t,height:r,pixels:w,mask:new Uint8Array(S),pixelType:g}),extent:e}}}const c=!!a.requestAsImageElement&&!this.pixelFilter,m=c&&!!a.returnImageBitmap,f={imageServiceParameters:p,imageProps:{extent:e,width:t,height:r,format:this.format},requestAsImageElement:c,returnImageBitmap:m,signal:a.signal};return this._requestArrayBuffer(f)}fetchKeyProperties(e){return D(n(this.parsedUrl)+"/keyProperties",{query:this._getQueryParams({renderingRule:this.version>=10.3?e==null?void 0:e.renderingRule:null})}).then(t=>t.data)}fetchRasterAttributeTable(e){return this.version<10.1?Promise.reject(new A("#fetchRasterAttributeTable()","Failed to get rasterAttributeTable")):D(n(this.parsedUrl)+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.3?e==null?void 0:e.renderingRule:null})}).then(t=>dt.fromJSON(t.data))}getCatalogItemRasterInfo(e,t){const r=this._getQueryParams(),a={...t,query:r};return Yi(n(this.parsedUrl),e,a)}async getCatalogItemICSInfo(e,t){var le,ue,q;const{data:r}=await D(n(this.parsedUrl)+"/"+e+"/info/ics",{query:this._getQueryParams(),...t}),a=r&&r.ics;if(!a)return;let p=null;try{p=(await D(n(this.parsedUrl)+"/"+e+"/info",{query:this._getQueryParams(),...t})).data.extent}catch{}if(!(p&&p.spatialReference))return{ics:a,icsToPixelTransform:null,icsExtent:null,northDirection:null};const c=this.version>=10.7?D(n(this.parsedUrl)+"/"+e+"/info/icstopixel",{query:this._getQueryParams(),...t}).then(v=>v.data).catch(()=>({})):{},m=p.spatialReference,f={geometries:JSON.stringify({geometryType:"esriGeometryEnvelope",geometries:[p]}),inSR:m.wkid||JSON.stringify(m),outSR:"0:"+e},d=D(n(this.parsedUrl)+"/project",{query:this._getQueryParams(f),...t}).then(v=>v.data).catch(()=>({})),h=5,b=(p.xmin+p.xmax)/2,S=(p.ymax-p.ymin)/(h+1),g=p.ymin+S,w=[];for(let v=0;v<h;v++)w.push({x:b,y:g+S*v});const y={geometries:JSON.stringify({geometryType:"esriGeometryPoint",geometries:w}),inSR:m.wkid||JSON.stringify(m),outSR:"0:"+e},R=D(n(this.parsedUrl)+"/project",{query:this._getQueryParams(y),...t}).then(v=>v.data).catch(()=>({})),x=await Promise.all([c,d,R]);let T=x[0].ipxf;if(T==null){const v=(le=a.geodataXform)==null?void 0:le.xf_0;((ue=v==null?void 0:v.name)==null?void 0:ue.toLowerCase())==="topup"&&((q=v==null?void 0:v.coefficients)==null?void 0:q.length)===6&&(T={affine:{name:"ics [sensor: Frame] to pixel (column, row) transformation",coefficients:v.coefficients,cellsizeRatio:0,type:"GeometricXform"}})}const M=De.fromJSON(x[1]&&x[1].geometries&&x[1].geometries[0]);M&&(M.spatialReference=new ce({wkid:0,imageCoordinateSystem:a}));const j=x[2].geometries?x[2].geometries.filter(v=>v!=null&&v.x!=null&&v.y!=null&&v.x!=="NaN"&&v.y!=="NaN"):[],K=j.length;if(K<3)return{ics:a,icsToPixelTransform:T,icsExtent:M,northDirection:null};let C=0,V=0,J=0,ye=0;for(let v=0;v<K;v++)C+=j[v].x,V+=j[v].y,J+=j[v].x*j[v].x,ye+=j[v].x*j[v].y;const L=(K*ye-C*V)/(K*J-C*C);let re=0;const Pe=j[h-1].x>j[0].x,Te=j[h-1].y>j[0].y;return L===1/0?re=Te?90:270:L===0?re=Pe?0:180:L>0?re=Pe?Math.atan(L)*180/Math.PI:Math.atan(L)*180/Math.PI+180:L<0&&(re=Te?180+Math.atan(L)*180/Math.PI:360+Math.atan(L)*180/Math.PI),{ics:a,icsToPixelTransform:T,icsExtent:M,northDirection:re}}async generateRasterInfo(e,t){var p;if(e=H(I,e),this.serviceRasterInfo&&(!e||((p=e.functionName)==null?void 0:p.toLowerCase())==="none"||this._isVectorFieldResampleFunction(e)))return this.serviceRasterInfo;const r=ur(e);if(!r)return null;if(this._functionRasterInfos[r])return this._functionRasterInfos[r];const a=this._generateRasterInfo(e,t);this._functionRasterInfos[r]=a;try{return await a}catch{return this._functionRasterInfos[r]=null,null}}getExportImageServiceParameters(e,t,r,a){var w;e=e.clone().shiftCentralMeridian();const p=St(e.spatialReference,n(this.parsedUrl));this.pixelType!==this.serviceRasterInfo.pixelType&&(this.exportImageServiceParameters.pixelType=this.pixelType);const c=this.exportImageServiceParameters.toJSON(),{bandIds:m,noData:f}=c;let{renderingRule:d}=c;const h=(w=this.renderingRule)==null?void 0:w.rasterFunctionDefinition,b=!this.renderer||this.renderer.type==="raster-stretch";if(m!=null&&m.length&&this._hasRenderingRule(this.renderingRule)&&!h&&b){const y={rasterFunction:"ExtractBand",rasterFunctionArguments:{BandIds:m}};if(d.rasterFunction==="Stretch")y.rasterFunctionArguments.Raster=d.rasterFunctionArguments.Raster,d.rasterFunctionArguments.Raster=y;else if(d.rasterFunction==="Colormap"){const R=d.rasterFunctionArguments.Raster;(R==null?void 0:R.rasterFunction)==="Stretch"?(y.rasterFunctionArguments.Raster=R.rasterFunctionArguments.Raster,R.rasterFunctionArguments.Raster=y):(y.rasterFunctionArguments.Raster=R,d.rasterFunctionArguments.Raster=y)}else y.rasterFunctionArguments.Raster=d,d=y;c.bandIds=void 0}else c.bandIds=m==null?void 0:m.join(",");f instanceof Array&&f.length>0&&(c.noData=f.join(","));const S=this._processMultidimensionalIntersection(null,a,this.exportImageServiceParameters.mosaicRule);if(S.isOutSide)return null;c.mosaicRule=S.mosaicRule!=null?JSON.stringify(S.mosaicRule):null,a=S.timeExtent,c.renderingRule=this._getRenderingRuleString(I.fromJSON(d));const g={};if(a!=null){const{start:y,end:R}=a.toJSON();y&&R&&y===R?g.time=""+y:(y!=null||R!=null)&&(g.time=`${y??"null"},${R??"null"}`)}return{bbox:e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:p,imageSR:p,size:t+","+r,...c,...g}}async getSamples(e,t){const r=await this._fetchCapabilities(t==null?void 0:t.signal);if(!(r!=null&&r.operations.supportsGetSamples))throw new A("imagery-layer:get-samples","getSamples operation is not supported on the input image service");e=H(ar,e).clone();const{raster:a}=this;return a&&e.raster==null&&(e.raster=a),Wi(this.url,e,this._getRequestOptions(t))}async identify(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsIdentify)throw new A("imagery-layer:identify","identify operation is not supported on the input image service");e=H(ot,e).clone();const a=this._processMultidimensionalIntersection(e.geometry,e.timeExtent,e.mosaicRule||this.mosaicRule);if(a.isOutSide)throw new A("imagery-layer:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");e.timeExtent=a.timeExtent,e.mosaicRule=a.mosaicRule;const{raster:p,renderingRule:c}=this;return c&&e.renderingRule==null&&(e.renderingRule=c),p&&e.raster==null&&(e.raster=p),nt(this.url,e,this._getRequestOptions(t))}createQuery(){const e=new Ue;return e.outFields=["*"],e.returnGeometry=!0,e.where=this.definitionExpression||"1=1",e}async queryRasters(e,t){return{query:e,requestOptions:t}=await this._prepareForQuery(e,t),ui(this.url,e,t)}async queryObjectIds(e,t){return{query:e,requestOptions:t}=await this._prepareForQuery(e,t),pi(this.url,e,t)}async queryRasterCount(e,t){return{query:e,requestOptions:t}=await this._prepareForQuery(e,t),ci(this.url,e,t)}async queryVisibleRasters(e,t){var T,M,j,K;if(!e)throw new A("imagery-layer: query-visible-rasters","missing query parameter");await this.load();const{pixelSize:r,returnDomainValues:a,returnTopmostRaster:p,showNoDataRecords:c}=t||{pixelSize:null,returnDomainValues:!1,returnTopmostRaster:!1,showNoDataRecords:!1};let m=!1,f=null,d=null;const h="raster.servicepixelvalue",b=this._rasterFunctionNamesIndex;if(e.outFields!=null&&(m=e.outFields.some(C=>!C.toLowerCase().includes(h)),this.version>=10.4)){const C=e.outFields.filter(J=>J.toLowerCase().includes(h)&&J.length>h.length).map(J=>{const ye=J.slice(h.length+1);return[this._updateRenderingRulesFunctionName(ye,b),ye]});f=C.map(J=>new I({functionName:J[0]})),d=C.map(J=>J[1]);const{renderingRule:V}=this;f.length===0?V!=null&&V.functionName?(f.push(V),d.push(V.functionName)):f=null:V!=null&&V.functionName&&!f.some(J=>J.functionName===V.functionName)&&(f.push(V),d.push(V.functionName))}const S=e.outSpatialReference==null||e.outSpatialReference.equals(this.spatialReference),{multidimensionalSubset:g}=this;let w=e.timeExtent||this.timeExtent;if(g){const{isOutside:C,intersection:V}=Ge(g,{geometry:e.geometry,timeExtent:e.timeExtent,multidimensionalDefinition:(T=this.exportImageServiceParameters.mosaicRule)==null?void 0:T.multidimensionalDefinition});if(C)throw new A("imagery-layer:query-visible-rasters","the request cannot be fulfilled when falling outside of the multidimensional subset");V&&V.timeExtent!=null&&(w=V.timeExtent)}const y=this._combineMosaicRuleWithTimeExtent(this.exportImageServiceParameters.mosaicRule,w),R=this._getQueryParams({geometry:e.geometry,timeExtent:w,mosaicRule:y,renderingRule:this.version<10.4?this.renderingRule:null,renderingRules:f,pixelSize:r,returnCatalogItems:m,returnGeometry:S,raster:this.raster,maxItemCount:p?1:null});delete R.f;const x=new ot(R);try{await this.generateRasterInfo(this.renderingRule);const C=await nt(this.url,x,{signal:t==null?void 0:t.signal,query:{...this.customParameters}}),V=e.outFields,J=C.value!=null&&C.value.toLowerCase().includes("nodata");if(!(m&&!S&&((M=C==null?void 0:C.catalogItems)==null?void 0:M.features.length)&&(c||!J)))return this._processVisibleRastersResponse(C,{returnDomainValues:a,templateRRFunctionNames:d,showNoDataRecords:c,templateFields:V});const L=this.objectIdField||"ObjectId",re=((j=C.catalogItems)==null?void 0:j.features)??[],Pe=re.map(ue=>{var q;return(q=ue.attributes)==null?void 0:q[L]}),Te=new Ue({objectIds:Pe,returnGeometry:!0,outSpatialReference:e.outSpatialReference,outFields:[L]}),le=await this.queryRasters(Te);return(K=le==null?void 0:le.features)!=null&&K.length&&le.features.forEach(ue=>{re.forEach(q=>{q.attributes[L]===ue.attributes[L]&&(q.geometry=new Ft(ue.geometry),e.outSpatialReference!=null&&(q.geometry.spatialReference=e.outSpatialReference))})}),this._processVisibleRastersResponse(C,{returnDomainValues:a,templateRRFunctionNames:d,showNoDataRecords:c,templateFields:V})}catch{throw new A("imagery-layer:query-visible-rasters","encountered error when querying visible rasters")}}async fetchVariableStatisticsHistograms(e,t){const r=D(n(this.parsedUrl)+"/statistics",{query:this._getQueryParams({variable:e}),signal:t}).then(c=>{var m;return(m=c.data)==null?void 0:m.statistics}),a=D(n(this.parsedUrl)+"/histograms",{query:this._getQueryParams({variable:e}),signal:t}).then(c=>{var m;return(m=c.data)==null?void 0:m.histograms}),p=await Promise.all([r,a]);return p[0]&&p[0].forEach(c=>{c.avg=c.mean,c.stddev=c.standardDeviation}),{statistics:p[0]||null,histograms:p[1]||null}}async createFlowMesh(e,t){const r=this._rasterJobHandler.instance;return r?r.createFlowMesh(e,t):Yt(e.meshType,e.simulationSettings,e.flowData,t.signal!=null?t.signal:new AbortController().signal)}getMultidimensionalSubsetVariables(e){const t=e??this.serviceRasterInfo.multidimensionalInfo;return Kt(this.multidimensionalSubset,t)}async _fetchService(e){await this._fetchServiceInfo(e),this.rasterInfo||(this.rasterInfo=this.serviceRasterInfo);const t=this.sourceJSON,r=this.serviceRasterInfo!=null?Promise.resolve(this.serviceRasterInfo):Et(n(this.parsedUrl),t,{signal:e,query:this._getQueryParams()}).then(c=>(this._set("serviceRasterInfo",c),this._set("multidimensionalInfo",c.multidimensionalInfo),c)),a=this._hasRenderingRule(this.renderingRule)?this.generateRasterInfo(this.renderingRule,{signal:e}):null,p=this._getRasterFunctionInfos();return Promise.all([r,a,p]).then(c=>{c[1]?this._set("rasterInfo",c[1]):this._set("rasterInfo",c[0]),c[2]&&this._set("rasterFunctionInfos",c[2]),this.renderer&&!this._isSupportedRenderer(this.renderer)&&(this._set("renderer",null),tt.getLogger(this.declaredClass).warn("ArcGISImageService","Switching to the default renderer. Renderer applied is not valid for this Imagery Layer")),this._set("renderer",this._configRenderer(this.renderer)),this.addHandles([Pt(()=>this.renderingRule,f=>{(this.renderer||this.symbolizer||this.popupEnabled&&this.popupTemplate)&&this.generateRasterInfo(f).then(d=>{d&&(this.rasterInfo=d)})})]);const{serviceRasterInfo:m}=this;m.multidimensionalInfo!=null&&this._updateMultidimensionalDefinition(m)})}_combineMosaicRuleWithTimeExtent(e,t){var w;const r=this.timeInfo,{multidimensionalInfo:a}=this.serviceRasterInfo;if(e==null||a==null||t==null||(r==null?void 0:r.startField)==null)return e;const{startField:p}=r,m=a.variables.some(y=>y.dimensions.some(R=>R.name===p))?p:"StdTime";if(e=e.clone(),this.sourceType==="mosaic-dataset")return e.multidimensionalDefinition=(w=e.multidimensionalDefinition)==null?void 0:w.filter(y=>y.dimensionName!==m),this._cleanupMultidimensionalDefinition(e);e.multidimensionalDefinition=e.multidimensionalDefinition||[];const f=e.multidimensionalDefinition.filter(y=>y.dimensionName===m),d=t.start!=null?t.start.getTime():null,h=t.end!=null?t.end.getTime():null,b=d==null||h==null||d===h,S=b?[d||h]:[[d,h]],g=this.version>=10.8;if(f.length)f.forEach(y=>{y.dimensionName===m&&(g?(y.dimensionName=null,y.isSlice=!1,y.values=[]):(y.isSlice=b,y.values=S))});else if(!g){const y=e.multidimensionalDefinition.filter(R=>R.variableName!=null&&R.dimensionName==null);y.length?y.forEach(R=>{R.dimensionName=m,R.isSlice=b,R.values=S}):e.multidimensionalDefinition.push(new Xt({variableName:"",dimensionName:m,isSlice:b,values:S}))}return this._cleanupMultidimensionalDefinition(e)}_cleanupMultidimensionalDefinition(e){return e==null?null:(e.multidimensionalDefinition&&(e.multidimensionalDefinition=e.multidimensionalDefinition.filter(t=>!!(t.variableName||t.dimensionName)),e.multidimensionalDefinition.length===0&&(e.multidimensionalDefinition=null)),this.sourceType!=="mosaic-dataset"&&e.multidimensionalDefinition==null?null:e)}async _prepareForQuery(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsQuery)throw new A("imagery-layer:query-rasters","query operation is not supported on the input image service");return e=e!=null?H(Ue,e):this.createQuery(),t=this._getRequestOptions(t),this.raster&&(t.query={...t.query,raster:this.raster}),{query:e,requestOptions:t}}async _initJobHandler(){if(this._rasterJobHandler.connectionPromise!=null)return this._rasterJobHandler.connectionPromise;const e=new Bt;this._rasterJobHandler.connectionPromise=e.initialize().then(()=>{this._rasterJobHandler.instance=e},()=>{}),await this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null}_isSupportedRenderer(e){const{rasterInfo:t,renderingRule:r}=this;return e.type==="unique-value"&&this._hasRenderingRule(r)&&(t==null?void 0:t.bandCount)===1&&["u8","s8"].includes(t.pixelType)||t!=null&&e!=null&&Lt(t).includes(e.type)}async _fetchCapabilities(e){return this.capabilities?this.capabilities:(await this._fetchServiceInfo(e),this.capabilities)}async _fetchServiceInfo(e){var a;let t=this.sourceJSON;if(!t){const{data:p,ssl:c}=await D(n(this.parsedUrl),{query:this._getQueryParams(),signal:e});t=p,this.sourceJSON=t,c&&(this.url=this.url.replace(/^http:/i,"https:"))}if(((a=t.capabilities)==null?void 0:a.toLowerCase().split(",").map(p=>p.trim()).indexOf("tilesonly"))>-1)throw new A("imagery-layer:fetch-service-info","use ImageryTileLayer to open tiles-only image services");this.read(t,{origin:"service",url:this.parsedUrl})}_isMosaicDataset(e){var t;return e.serviceSourceType?e.serviceSourceType==="esriImageServiceSourceTypeMosaicDataset":((t=e.fields)==null?void 0:t.length)>0}_isMosaicRuleSupported(e){var a;if(!e)return!1;const t=this._isMosaicDataset(e),r=e.currentVersion>=10.71&&e.hasMultidimensions&&!(((a=e.fields)==null?void 0:a.length)>1);return t||r}_isVectorFieldResampleFunction(e){if(e==null)return!1;const{functionName:t,functionArguments:r}=e,a=(t==null?void 0:t.toLowerCase())==="resample",p=(r==null?void 0:r.ResampleType)||(r==null?void 0:r.resampleType);return a&&(p===7||p===10)}_isPicture(){return!this.format||this.format.includes("jpg")||this.format.includes("png")}_configRenderer(e){var a,p;const t=this._isPicture(),{rasterInfo:r}=this;if(!(t||this.pixelFilter)||this._isVectorDataSet()){if(!this.bandIds&&r.bandCount>=3){const m=zt(r);m&&!(r.bandCount===3&&m[0]===0&&m[1]===1&&m[2]===2)&&(this.bandIds=m)}e||(e=Gt(r,{bandIds:this.bandIds,variableName:this.renderingRule?null:(p=(a=this.mosaicRule)==null?void 0:a.multidimensionalDefinition)==null?void 0:p[0].variableName}));const c=Ht(e.toJSON());this.symbolizer?(this.symbolizer.rendererJSON=c,this.symbolizer.rasterInfo=r):this.symbolizer=new ni({rendererJSON:c,rasterInfo:r}),this.symbolizer.bind().success||(this.symbolizer=null)}return e}_clonePixelData(e){return e==null?e:{extent:e.extent&&e.extent.clone(),pixelBlock:e.pixelBlock!=null?e.pixelBlock.clone():null}}_getQueryParams(e){e&&e.renderingRule!=null&&typeof e.renderingRule!="string"&&(e.renderingRule=this._getRenderingRuleString(e.renderingRule));const{raster:t,viewId:r}=this;return{raster:t,viewId:r,f:"json",...e,...this.customParameters}}_getRequestOptions(e){return{...e,query:{...e==null?void 0:e.query,...this.customParameters}}}_decodePixelBlock(e,t,r){return this._rasterJobHandler.instance?this._rasterJobHandler.instance.decode({data:e,options:t}):rt(e,t,r)}async _getRasterFunctionInfos(e){var r;const t=this.sourceJSON.rasterFunctionInfos;return this.loaded?t:t&&this.version>=10.3?t.length===1&&t[0].name.toLowerCase()==="none"?t:(r=(await D(n(this.parsedUrl)+"/rasterFunctionInfos",{query:this._getQueryParams(),signal:e})).data)==null?void 0:r.rasterFunctionInfos:null}_canRequestImageElement(e){return!this.pixelFilter&&(!e||e.includes("png"))}async _requestArrayBuffer(e){const{imageProps:t,requestAsImageElement:r,returnImageBitmap:a,signal:p}=e;if(r&&this._canRequestImageElement(t.format)){const R=`${n(this.parsedUrl)}/exportImage`,{data:x}=await D(R,{responseType:a?"blob":"image",query:this._getQueryParams({f:"image",...this.refreshParameters,...e.imageServiceParameters}),signal:p});return x instanceof Blob?{imageBitmap:await st(x,R,p),params:t}:{imageOrCanvasElement:x,params:t}}const c=this._initJobHandler(),m=D(n(this.parsedUrl)+"/exportImage",{responseType:"array-buffer",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:p}),d=(await Promise.all([m,c]))[0].data,h=t.format||"jpgpng";let b=h;if(b!=="bsq"&&b!=="bip"&&(b=ai(d)),!b)throw new A("imagery-layer:fetch-image","unsupported format signature "+String.fromCharCode.apply(null,new Uint8Array(d)));const S=h==="gif"||h==="bmp"||h.includes("png")&&(b==="png"||b==="jpg"),g={signal:p};return{pixelData:{pixelBlock:await(S?rt(d,{useCanvas:!0,...t},g):this._decodePixelBlock(d,{width:t.width,height:t.height,planes:null,pixelType:null,noDataValue:null,format:h},g)),extent:t.extent},params:t}}_generateRasterInfo(e,t){const r=this._getQueryParams(),a={...t,query:r};return Ut(n(this.parsedUrl),e,a)}_isValidCustomizedMosaicRule(e){var t;return e&&JSON.stringify(e.toJSON())!==JSON.stringify((t=this.defaultMosaicRule)==null?void 0:t.toJSON())}_updateMultidimensionalDefinition(e){var r;if(this._isValidCustomizedMosaicRule(this.mosaicRule))return;let t=Zt(e,{multidimensionalSubset:this.multidimensionalSubset});if(t!=null&&t.length>0){this.mosaicRule=this.mosaicRule||new U;const a=this.mosaicRule.multidimensionalDefinition;!this.sourceJSON.defaultVariableName&&this.renderingRule&&((r=this.renderingRule.functionName)==null?void 0:r.toLowerCase())!=="none"&&t.forEach(p=>p.variableName=""),t=t.filter(({variableName:p,dimensionName:c})=>p&&p!=="*"||c),!(a!=null&&a.length)&&t.length&&(this.mosaicRule.multidimensionalDefinition=t)}}_processVisibleRastersResponse(e,t){t=t||{};const r=e.value,{templateRRFunctionNames:a,showNoDataRecords:p,returnDomainValues:c,templateFields:m}=t,f=e.processedValues;let d=e.catalogItems&&e.catalogItems.features,h=e.properties&&e.properties.Values&&e.properties.Values.map(x=>x.replace(/ /gi,", "))||[];const b=this.objectIdField||"ObjectId",S=typeof r=="string"&&r.toLowerCase().includes("nodata"),g=[];if(r&&!d&&!S){const x={};x[b]=0;const T=new Tt(this.fullExtent,null,x);h=[r],d=[T]}if(!d)return[];this._updateResponseFieldNames(d,m),S&&!p&&(d=[]);let w,y,R;for(let x=0;x<d.length;x++){if(w=d[x],r!=null){if(y=h[x],R=this.renderingRule&&f&&f.length>0&&a&&a.length>0&&a.includes(this.renderingRule.functionName)?f[a.indexOf(this.renderingRule.functionName)]:r,y.toLowerCase()==="nodata"&&!p)continue;const T="Raster.ItemPixelValue",M="Raster.ServicePixelValue";w.attributes[T]=y,w.attributes[M]=R,this._updateFeatureWithMagDirValues(w,y);const j=this.fields&&this.fields.length>0;let K=this.renderingRule&&this.serviceRasterInfo.attributeTable!=null?j?y:r:R;this.renderingRule||(K=j?y:r),this._updateFeatureWithRasterAttributeTableValues(w,K)}if(w.sourceLayer=w.layer=this,c&&this._updateFeatureWithDomainValues(w),a&&f&&a.length===f.length)for(let T=0;T<a.length;T++){const M="Raster.ServicePixelValue."+a[T];w.attributes[M]=f[T]}g.push(d[x])}return g}_processMultidimensionalIntersection(e,t,r){const{multidimensionalSubset:a}=this;if(!a)return r=this._combineMosaicRuleWithTimeExtent(r,t),{isOutSide:!1,timeExtent:t,mosaicRule:r};if(a){const{isOutside:p,intersection:c}=Ge(a,{geometry:e,timeExtent:t});if(p)return{isOutSide:!0,timeExtent:null,mosaicRule:null};c&&c.timeExtent!=null&&(t=c.timeExtent)}if(r=this._combineMosaicRuleWithTimeExtent(r,t),r!=null&&r.multidimensionalDefinition){const{isOutside:p}=Ge(a,{multidimensionalDefinition:r.multidimensionalDefinition});if(p)return{isOutSide:!0,timeExtent:null,mosaicRule:null}}return{isOutSide:!1,timeExtent:t,mosaicRule:r}}_updateFeatureWithRasterAttributeTableValues(e,t){const r=this.rasterInfo.attributeTable||this.serviceRasterInfo.attributeTable;if(r==null)return;const{features:a,fields:p}=r,c=p.map(d=>d.name).filter(d=>d.toLowerCase()==="value"),m=c&&c[0];if(!m)return;const f=a.filter(d=>d.attributes[m]===(t!=null?parseInt(t,10):null));f&&f[0]&&p.forEach(d=>{const h=this._rasterAttributeTableFieldPrefix+d.name;e.attributes[h]=f[0].attributes[d.name]})}_updateFeatureWithMagDirValues(e,t){if(!this._isVectorDataSet())return;const r=t.split(/,\s*/).map(f=>parseFloat(f)),a=r.map(f=>[f]),p=r.map(f=>({minValue:f,maxValue:f,noDataValue:null})),c=new He({height:1,width:1,pixelType:"f32",pixels:a,statistics:p});this.pixelFilter!=null&&this.pixelFilter({pixelBlock:c,extent:new De(0,0,0,0,this.spatialReference)});const m=this.serviceDataType==="esriImageServiceDataTypeVector-MagDir"?[c.pixels[0][0],c.pixels[1][0]]:ei([c.pixels[0][0],c.pixels[1][0]]);e.attributes["Raster.Magnitude"]=m[0],e.attributes["Raster.Direction"]=m[1]}_updateFeatureWithDomainValues(e){const t=this.fields&&this.fields.filter(r=>r.domain&&r.domain.type==="coded-value");t!=null&&t.forEach(r=>{const a=e.attributes[r.name];if(a!=null){const p=r.domain.codedValues.find(c=>c.code===a);p&&(e.attributes[r.name]=p.name)}})}_updateResponseFieldNames(e,t){if(!t||t.length<1)return;const r=this.fieldsIndex;r!=null&&e.forEach(a=>{var p;if(a&&a.attributes)for(const c of t){const m=(p=r.get(c))==null?void 0:p.name;m&&m!==c&&(a.attributes[c]=a.attributes[m],delete a.attributes[m])}})}_getRenderingRuleString(e){if(e){let t=e.toJSON();return t=t.rasterFunctionDefinition??t,(t.thumbnail||t.thumbnailEx)&&(t.thumbnail=t.thumbnailEx=null),JSON.stringify(t)}return null}_hasRenderingRule(e){return e!=null&&e.functionName!=null&&e.functionName.toLowerCase()!=="none"}_updateRenderingRulesFunctionName(e,t){if(!e||e.length<1)return;if(e==="Raw")return e.replace("Raw","None");const r=e.toLowerCase().replace(/ /gi,"_");return t.has(r)?t.get(r):e}_isRFTJson(e){return e&&e.name&&e.arguments&&e.function&&e.hasOwnProperty("functionType")}_isVectorDataSet(){return this.serviceDataType==="esriImageServiceDataTypeVector-UV"||this.serviceDataType==="esriImageServiceDataTypeVector-MagDir"}_applyMosaicAndRenderingRules(e){const{raster:t,mosaicRule:r,renderingRule:a}=this;a&&e.renderingRule==null&&(e.renderingRule=a),r&&e.mosaicRule==null&&(e.mosaicRule=r),t&&e.raster==null&&(e.raster=t)}_readCapabilities(e){const t=e.capabilities?e.capabilities.toLowerCase().split(",").map(g=>g.trim()):["image","catalog"],{currentVersion:r,advancedQueryCapabilities:a,maxRecordCount:p}=e,c=t.includes("image"),m=e.serviceDataType==="esriImageServiceDataTypeElevation",f=!!(e.spatialReference||e.extent&&e.extent.spatialReference),d=t.includes("edit"),h=t.includes("mensuration")&&f,b=e.mensurationCapabilities==null?[]:e.mensurationCapabilities.toLowerCase().split(",").map(g=>g.trim()),S=h&&b.includes("basic");return{data:{supportsAttachment:!1},operations:{supportsComputeHistograms:c,supportsExportImage:c,supportsIdentify:c,supportsMeasure:h,supportsDownload:t.includes("download"),supportsQuery:t.includes("catalog")&&e.fields&&e.fields.length>0,supportsGetSamples:r>=10.2&&c,supportsProject:r>=10.3&&c,supportsComputeStatisticsHistograms:r>=10.4&&c,supportsQueryBoundary:r>=10.6&&c,supportsCalculateVolume:r>=10.7&&m,supportsComputePixelLocation:r>=10.7&&t.includes("catalog"),supportsComputeAngles:r>=10.91,supportsAdd:d,supportsDelete:d,supportsEditing:d,supportsUpdate:d,supportsCalculate:!1,supportsTruncate:!1,supportsValidateSql:!1,supportsChangeTracking:!1,supportsQueryAttachments:!1,supportsResizeAttachments:!1,supportsSync:!1,supportsExceedsLimitStatistics:!1,supportsQueryAnalytics:!1,supportsQueryTopFeatures:!1},query:{maxRecordCount:p,maxRecordCountFactor:void 0,supportsStatistics:!!(a!=null&&a.supportsStatistics),supportsOrderBy:!!(a!=null&&a.supportsOrderBy),supportsDistinct:!!(a!=null&&a.supportsDistinct),supportsPagination:!!(a!=null&&a.supportsPagination),supportsStandardizedQueriesOnly:!!(a!=null&&a.useStandardizedQueries),supportsPercentileStatistics:!!(a!=null&&a.supportsPercentileStatistics),supportsCentroid:!!(a!=null&&a.supportsReturningGeometryCentroid),supportsDistance:!!(a!=null&&a.supportsQueryWithDistance),supportsExtent:!!(a!=null&&a.supportsReturningQueryExtent),supportsGeometryProperties:!!(a!=null&&a.supportsReturningGeometryProperties),supportsHavingClause:!!(a!=null&&a.supportsHavingClause),supportsQuantization:!1,supportsQuantizationEditMode:!1,supportsQueryGeometry:!1,supportsResultType:!1,supportsMaxRecordCountFactor:!1,supportsSqlExpression:!1,supportsTopFeaturesQuery:!1,supportsQueryByOthers:!1,supportsHistoricMoment:!1,supportsFormatPBF:!1,supportsDisjointSpatialRelationship:!1,supportsCacheHint:!1,supportsSpatialAggregationStatistics:!1,supportedSpatialAggregationStatistics:{envelope:!1,centroid:!1,convexHull:!1},supportsDefaultSpatialReference:!!(a!=null&&a.supportsDefaultSR),supportsFullTextSearch:!1,supportsCompactGeometry:!1,standardMaxRecordCount:void 0,tileMaxRecordCount:void 0},mensuration:{supportsDistanceAndAngle:S,supportsAreaAndPerimeter:S,supportsPointOrCentroid:S,supportsHeightFromBaseAndTop:h&&b.includes("base-top height"),supportsHeightFromBaseAndTopShadow:h&&b.includes("base-top shadow height"),supportsHeightFromTopAndTopShadow:h&&b.includes("top-top shadow height"),supports3D:h&&b.includes("3d")}}}};s([l()],i.prototype,"_functionRasterInfos",void 0),s([l()],i.prototype,"_rasterJobHandler",void 0),s([l()],i.prototype,"_cachedRendererJson",void 0),s([l({readOnly:!0})],i.prototype,"_serviceSupportsMosaicRule",void 0),s([E("_serviceSupportsMosaicRule",["currentVersion","fields"])],i.prototype,"readServiceSupportsMosaicRule",null),s([l()],i.prototype,"_rasterAttributeTableFieldPrefix",void 0),s([l({readOnly:!0})],i.prototype,"_rasterFunctionNamesIndex",null),s([l()],i.prototype,"adjustAspectRatio",void 0),s([l({type:[Ve],json:{write:!0}})],i.prototype,"bandIds",void 0),s([E("bandIds")],i.prototype,"readBandIds",null),s([l({readOnly:!0,json:{read:!1}})],i.prototype,"capabilities",void 0),s([E("service","capabilities",["capabilities","currentVersion","serviceDataType"])],i.prototype,"readCapabilities",null),s([l({type:Number})],i.prototype,"compressionQuality",void 0),s([P("compressionQuality")],i.prototype,"writeCompressionQuality",null),s([l({type:Number})],i.prototype,"compressionTolerance",void 0),s([P("compressionTolerance")],i.prototype,"writeCompressionTolerance",null),s([l({json:{read:{source:"copyrightText"}}})],i.prototype,"copyright",void 0),s([l({readOnly:!0,dependsOn:["_serviceSupportsMosaicRule"]})],i.prototype,"defaultMosaicRule",void 0),s([E("defaultMosaicRule",["defaultMosaicMethod"])],i.prototype,"readDefaultMosaicRule",null),s([l({type:String,json:{name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],i.prototype,"definitionExpression",void 0),s([l({readOnly:!0,constructOnly:!0})],i.prototype,"exportImageServiceParameters",void 0),s([l()],i.prototype,"rasterInfo",void 0),s([l({readOnly:!0,type:[pe]})],i.prototype,"fields",void 0),s([l({readOnly:!0})],i.prototype,"fieldsIndex",null),s([l({type:["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"],json:{write:!0}})],i.prototype,"format",null),s([E("service","format",["serviceDataType"])],i.prototype,"readFormat",null),s([l({type:De})],i.prototype,"fullExtent",void 0),s([l({readOnly:!0})],i.prototype,"hasMultidimensions",void 0),s([l({json:{read:{source:"maxImageHeight"}}})],i.prototype,"imageMaxHeight",void 0),s([l({json:{read:{source:"maxImageWidth"}}})],i.prototype,"imageMaxWidth",void 0),s([l({type:String,json:{type:se.jsonValues,read:se.read,write:se.write}})],i.prototype,"interpolation",void 0),s([l()],i.prototype,"minScale",void 0),s([E("service","minScale")],i.prototype,"readMinScale",null),s([l()],i.prototype,"maxScale",void 0),s([E("service","maxScale")],i.prototype,"readMaxScale",null),s([l({type:U})],i.prototype,"mosaicRule",null),s([E("mosaicRule",["mosaicRule","defaultMosaicMethod"])],i.prototype,"readMosaicRule",null),s([P("mosaicRule")],i.prototype,"writeMosaicRule",null),s([l()],i.prototype,"multidimensionalInfo",void 0),s([l({type:jt,json:{write:!0}})],i.prototype,"multidimensionalSubset",void 0),s([l({json:{type:Ve}})],i.prototype,"noData",void 0),s([P("noData")],i.prototype,"writeNoData",null),s([l({type:String,json:{type:Ie.jsonValues,read:Ie.read,write:Ie.write}})],i.prototype,"noDataInterpretation",void 0),s([l({type:String,readOnly:!0,json:{read:{source:["fields"]}}})],i.prototype,"objectIdField",void 0),s([E("objectIdField")],i.prototype,"readObjectIdField",null),s([l({})],i.prototype,"geometryType",void 0),s([l({})],i.prototype,"typeIdField",void 0),s([l({})],i.prototype,"types",void 0),s([l({readOnly:!0})],i.prototype,"parsedUrl",null),s([l({type:Function})],i.prototype,"pixelFilter",void 0),s([l()],i.prototype,"raster",void 0),s([l({readOnly:!0})],i.prototype,"sourceType",void 0),s([E("sourceType",["serviceSourceType","fields"])],i.prototype,"readSourceType",null),s([l()],i.prototype,"viewId",void 0),s([l({types:Mt,json:{name:"layerDefinition.drawingInfo.renderer",origins:{"web-scene":{types:Ot,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(o){return{enabled:o&&o.type!=="vector-field"&&o.type!=="flow"}}}}}}})],i.prototype,"renderer",null),s([E("renderer")],i.prototype,"readRenderer",null),s([P("renderer")],i.prototype,"writeRenderer",null),s([l()],i.prototype,"symbolizer",void 0),s([l($t)],i.prototype,"opacity",void 0),s([l({readOnly:!0})],i.prototype,"rasterFields",null),s([l({constructOnly:!0})],i.prototype,"rasterFunctionInfos",void 0),s([l({type:I})],i.prototype,"renderingRule",null),s([E("renderingRule",["renderingRule","rasterFunctionInfos"])],i.prototype,"readRenderingRule",null),s([P("renderingRule")],i.prototype,"writeRenderingRule",null),s([l()],i.prototype,"serviceDataType",void 0),s([l({readOnly:!0,type:ce})],i.prototype,"spatialReference",void 0),s([E("spatialReference",["spatialReference","extent"])],i.prototype,"readSpatialReference",null),s([l({json:{type:$e.jsonValues}})],i.prototype,"pixelType",void 0),s([E("pixelType")],i.prototype,"readPixelType",null),s([P("pixelType")],i.prototype,"writePixelType",null),s([l({constructOnly:!0,type:mt})],i.prototype,"serviceRasterInfo",void 0),s([l()],i.prototype,"sourceJSON",void 0),s([l(kt)],i.prototype,"url",void 0),s([l({readOnly:!0})],i.prototype,"version",void 0),s([E("version",["currentVersion","fields","timeInfo"])],i.prototype,"readVersion",null),i=s([F("esri.layers.mixins.ArcGISImageService")],i);function n(o){return(o==null?void 0:o.path)??""}return i};let Q=class extends di(bi(Ri(hi(yi(pr(gi(fi(mi(At(Ct)))))))))){constructor(...i){super(...i),this.legendEnabled=!0,this.isReference=null,this.operationalLayerType="ArcGISImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.type="imagery"}normalizeCtorArgs(i,n){return typeof i=="string"?{url:i,...n}:i}load(i){const n=i!=null?i.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},i).catch(_t).then(()=>this._fetchService(n))),Promise.resolve(this)}writeOperationalLayerType(i,n,o){var t;const e=((t=this.renderer)==null?void 0:t.type)==="vector-field";n[o]=e?"ArcGISImageServiceVectorLayer":"ArcGISImageServiceLayer"}get defaultPopupTemplate(){return this.createPopupTemplate()}createPopupTemplate(i){const n=this.rasterFields,o=this.title,e=new Set;let t=!1,r=!1;this.capabilities&&(t=this.capabilities.operations.supportsQuery&&this.fields&&this.fields.length>0,r=this.serviceDataType==="esriImageServiceDataTypeVector-UV"||this.serviceDataType==="esriImageServiceDataTypeVector-MagDir");const a=new Set;t&&a.add("raster.itempixelvalue");for(const p of n){const c=p.name.toLowerCase();a.has(c)||c.includes("raster.servicepixelvalue.")||e.add(p.name)}return r&&e.add("raster.magnitude").add("raster.direction"),wi({fields:n,title:o},{...i,visibleFieldNames:e})}queryFeatures(i,n){return this.queryRasters(i,n).then(o=>{if(o!=null&&o.features)for(const e of o.features)e.layer=e.sourceLayer=this;return o})}queryFeatureCount(i,n){return this.queryRasterCount(i,n)}redraw(){this.emit("redraw")}serviceSupportsSpatialReference(i){return Si(this,i)}};s([l(Qt)],Q.prototype,"legendEnabled",void 0);s([l({type:["show","hide"]})],Q.prototype,"listMode",void 0);s([l({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],Q.prototype,"isReference",void 0);s([l({type:["ArcGISImageServiceLayer"],json:{origins:{"web-map":{type:["ArcGISImageServiceLayer","ArcGISImageServiceVectorLayer"],read:!1,write:{target:"layerType",ignoreOrigin:!0}}}}})],Q.prototype,"operationalLayerType",void 0);s([P("web-map","operationalLayerType")],Q.prototype,"writeOperationalLayerType",null);s([l(Wt)],Q.prototype,"popupEnabled",void 0);s([l({type:Vt,json:{read:{source:"popupInfo"},write:{target:"popupInfo"}}})],Q.prototype,"popupTemplate",void 0);s([l({readOnly:!0})],Q.prototype,"defaultPopupTemplate",null);s([l({readOnly:!0,json:{read:!1}})],Q.prototype,"type",void 0);Q=s([F("esri.layers.ImageryLayer")],Q);const Hs=Q;export{Hs as default};
