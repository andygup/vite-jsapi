import{ae as S,ai as F,aR as u}from"./index-30d9bb6f.js";import{d as b}from"./diffUtils-655e0682.js";import{b as g}from"./heatmapUtils-9ca00d5c.js";import{g as E}from"./definitions-3f56d206.js";import{B as U}from"./BaseProcessor-52f6e4d1.js";import{g as a}from"./tileUtils-fdb57ff2.js";import"./vec4-3dd523e8.js";import"./vec4f64-efdcb593.js";class i{constructor(t,s){this.offset=t,this.extent=s}}function v(n){const t=n.key,s=new Map,r=256,e=E,o=n.tileInfoView.tileInfo.isWrappable;return s.set(a(t,-1,-1,o).id,new i([-e,-e],[e-r,e-r,e,e])),s.set(a(t,0,-1,o).id,new i([0,-e],[0,e-r,e,e])),s.set(a(t,1,-1,o).id,new i([e,-e],[0,e-r,r,e])),s.set(a(t,-1,0,o).id,new i([-e,0],[e-r,0,e,e])),s.set(a(t,1,0,o).id,new i([e,0],[0,0,r,e])),s.set(a(t,-1,1,o).id,new i([-e,e],[e-r,0,e,r])),s.set(a(t,0,1,o).id,new i([0,e],[0,0,e,r])),s.set(a(t,1,1,o).id,new i([e,e],[0,0,r,r])),s}let p=class extends U{constructor(){super(...arguments),this.type="heatmap",this._tileKeyToFeatureSets=new Map}initialize(){this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this))])}async update(t,s){const r=s.schema.processors[0];r.type!=="heatmap"||!b(this._schema,r)||(t.mesh=!0,this._schema=r)}onTileUpdate(t){for(const s of t.removed)this._tileKeyToFeatureSets.delete(s.key.id)}onTileClear(t){const s={clear:!0};return this._tileKeyToFeatureSets.delete(t.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:t.id,data:s})}async onTileMessage(t,s,r){this._tileKeyToFeatureSets.has(t.key.id)||this._tileKeyToFeatureSets.set(t.key.id,new Map);const e=this._tileKeyToFeatureSets.get(t.key.id);if(e&&s.addOrUpdate!=null&&s.addOrUpdate.hasFeatures&&e.set(s.addOrUpdate.instance,s),s.end){const o=[],f=v(t);this._tileKeyToFeatureSets.forEach((m,d)=>{if(d===t.key.id)m.forEach(c=>u(c.addOrUpdate,h=>o.push(h)));else if(f.has(d)){const c=f.get(d),[h,w]=c.offset;m.forEach(_=>u(_.addOrUpdate,k=>{const K=k.transform(h,w,1,1);o.push(K)}))}});const l=g(o,this._schema.mesh,512,512),y={tileKey:t.key.id,intensityInfo:l},T=[l.matrix];return this.remoteClient.invoke("tileRenderer.onTileData",y,{...r,transferList:T})}}onTileError(t,s,r){return this.remoteClient.invoke("tileRenderer.onTileError",{tileKey:t.id,error:s},r)}};p=S([F("esri.views.2d.layers.features.processors.HeatmapProcessor")],p);const B=p;export{B as default};
