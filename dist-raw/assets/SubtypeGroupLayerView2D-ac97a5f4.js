import{ae as d,ai as u,A as y,B as h,m as c}from"./index-0cbe37a0.js";import{F as b}from"./FeatureEffect-4161b57f.js";import g from"./FeatureLayerView2D-0f7384c3.js";import"./jsonUtils-1ca84aef.js";import"./parser-4c0b00b2.js";import"./_commonjsHelpers-725317a4.js";import"./Query-612ec863.js";import"./Field-a5856a62.js";import"./fieldType-7585de06.js";import"./Container-8061ac15.js";import"./definitions-3f56d206.js";import"./enums-08489827.js";import"./TextureDescriptor-1f8c554e.js";import"./FeatureSet-10ffd73d.js";import"./LayerView-3efbec1b.js";import"./schemaUtils-fdf930ff.js";import"./sql-e009a7de.js";import"./diffUtils-6d46a8ba.js";import"./labelingInfo-e7968113.js";import"./labelUtils-c3e92de5.js";import"./defaultsJSON-b396ba80.js";import"./jsonUtils-98d903f2.js";import"./color-1b66ad26.js";import"./enums-eb6e4255.js";import"./VertexElementDescriptor-24e04d97.js";import"./utils-c4b4ba96.js";import"./MaterialKey-e90d5ee5.js";import"./heatmapUtils-c9f41040.js";import"./vec4-3dd523e8.js";import"./vec4f64-efdcb593.js";import"./visualVariablesUtils-fff56d02.js";import"./ExpandedCIM-757539da.js";import"./BidiEngine-cdaf024a.js";import"./GeometryUtils-26dde58c.js";import"./Rect-df8ea165.js";import"./quantizationUtils-7579f13f.js";import"./floatRGBA-2c89f36a.js";import"./featureFlags-986067cc.js";import"./clusterUtils-ffb33f67.js";import"./SizeVariable-f1c59b14.js";import"./colorRamps-3b9c4be9.js";import"./LegendOptions-fe356083.js";import"./sizeVariableUtils-2914222a.js";import"./lengthUtils-3c389155.js";import"./util-340d902b.js";import"./commonProperties-31665bf0.js";import"./ElevationInfo-bbf2ebe0.js";import"./floorFilterUtils-0e56040f.js";import"./popupUtils-694b4611.js";import"./RefreshableLayerView-9ffe412a.js";function f(o,t){return!o.visible||o.minScale!==0&&t>o.minScale||o.maxScale!==0&&t<o.maxScale}let n=class extends g{initialize(){this.addHandles([y(()=>this.view.scale,()=>this._update(),h)],"constructor")}isUpdating(){var l;const t=this.layer.sublayers.some(m=>m.renderer!=null),e=this._commandsQueue.updating,s=this._updatingRequiredFieldsPromise!=null,r=!this._proxy||!this._proxy.isReady,i=this._pipelineIsUpdating,p=this.tileRenderer==null||((l=this.tileRenderer)==null?void 0:l.updating),a=t&&(e||s||r||i||p);return c("esri-2d-log-updating")&&console.log(`Updating FLV2D: ${a}
  -> hasRenderer ${t}
  -> hasPendingCommand ${e}
  -> updatingRequiredFields ${s}
  -> updatingProxy ${r}
  -> updatingPipeline ${i}
  -> updatingTileRenderer ${p}
`),a}_injectOverrides(t){let e=super._injectOverrides(t);const s=this.view.scale,r=this.layer.sublayers.filter(p=>f(p,s)).map(p=>p.subtypeCode);if(!r.length)return e;e=e??new b().toJSON();const i=`NOT ${this.layer.subtypeField} IN (${r.join(",")})`;return e.where=e.where?`(${e.where}) AND (${i})`:i,e}_setLayersForFeature(t){const e=this.layer.fieldsIndex.get(this.layer.subtypeField),s=t.attributes[e.name],r=this.layer.sublayers.find(i=>i.subtypeCode===s);t.layer=t.sourceLayer=r}_createSchemaConfig(){const t={subtypeField:this.layer.subtypeField,sublayers:Array.from(this.layer.sublayers).map(i=>({featureReduction:null,geometryType:this.layer.geometryType,labelingInfo:i.labelingInfo,labelsVisible:i.labelsVisible,renderer:i.renderer,subtypeCode:i.subtypeCode,orderBy:null}))},e=this.layer.sublayers.map(i=>i.subtypeCode).join(","),s=this.layer.sublayers.length?`${this.layer.subtypeField} IN (${e})`:"1=2";let r=this.layer.definitionExpression?this.layer.definitionExpression+" AND ":"";return r+=s,{...super._createSchemaConfig(),...t,definitionExpression:r}}};n=d([u("esri.views.2d.layers.SubtypeGroupLayerView2D")],n);const be=n;export{be as default};
