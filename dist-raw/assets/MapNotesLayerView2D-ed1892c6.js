import{ah as u,J as f,aB as w,A as h,B as p,an as y,ae as V,ai as _}from"./index-1ff2b83b.js";import{C}from"./Container-c03efaff.js";import{G as v}from"./GroupContainer-7b0eed27.js";import{L as H,a as b}from"./LayerView-961a55ce.js";import{G as c}from"./GraphicContainer-b4a813d7.js";import{G as m}from"./GraphicsView2D-39268077.js";import"./parser-4edf9fb4.js";import"./_commonjsHelpers-725317a4.js";import"./definitions-3f56d206.js";import"./enums-08489827.js";import"./TextureDescriptor-d93b8350.js";import"./WGLContainer-d45d831d.js";import"./VertexArrayObject-174fcb9d.js";import"./VertexElementDescriptor-24e04d97.js";import"./color-931e5528.js";import"./enums-eb6e4255.js";import"./ProgramTemplate-cedad509.js";import"./MaterialKey-ac09a7af.js";import"./utils-ab80218c.js";import"./heatmapUtils-2699876b.js";import"./vec4-3dd523e8.js";import"./vec4f64-efdcb593.js";import"./StyleDefinition-edaaf36e.js";import"./config-c06e4a6d.js";import"./GeometryUtils-0ab64fac.js";import"./earcut-db592379.js";import"./featureConversionUtils-e2e44d08.js";import"./OptimizedGeometry-af84d2ad.js";import"./OptimizedFeatureSet-5c82fe5a.js";import"./BaseGraphicContainer-143a5b98.js";import"./FeatureContainer-e8f208b6.js";import"./AttributeStoreView-1002ec4b.js";import"./TiledDisplayObject-136f3a7e.js";import"./visualVariablesUtils-73777b49.js";import"./visualVariablesUtils-d9203111.js";import"./TileContainer-efa0645f.js";import"./lengthUtils-a56675d8.js";import"./vec3f32-ec4c3c20.js";import"./normalizeUtils-19de81d3.js";import"./normalizeUtilsCommon-8aa6d9c6.js";import"./ExpandedCIM-51e5278e.js";import"./BidiEngine-cdaf024a.js";import"./GeometryUtils-26dde58c.js";import"./Rect-df8ea165.js";import"./quantizationUtils-719bd53e.js";import"./floatRGBA-bf12c96e.js";import"./normalizeUtilsSync-98f0d7ee.js";import"./projectionSupport-55a539de.js";import"./json-9ae8d6f8.js";import"./labelingInfo-c9b9bf14.js";import"./labelUtils-6157dfad.js";import"./defaultsJSON-b396ba80.js";import"./jsonUtils-2332f9ae.js";import"./Matcher-e4e9830d.js";import"./tileUtils-fdb57ff2.js";import"./TurboLine-4024b500.js";import"./LRUCache-6f7e49d4.js";import"./MemCache-0e11f97c.js";import"./devEnvironmentUtils-e2e22b53.js";import"./styleUtils-7c3bb336.js";import"./featureFlags-fd0f9f5d.js";import"./schemaUtils-29acd33d.js";import"./sql-f95a493c.js";import"./diffUtils-218aeec0.js";import"./clusterUtils-c8666ffc.js";import"./SizeVariable-26ffe240.js";import"./colorRamps-2ec53a25.js";import"./LegendOptions-94e3feca.js";import"./sizeVariableUtils-2914222a.js";import"./util-b57eab6f.js";import"./ComputedAttributeStorage-5e6b576c.js";import"./FieldsIndex-9b7b8612.js";import"./arcadeTimeUtils-0132b4b1.js";import"./executionError-e2eca390.js";import"./centroid-1116d1e7.js";const g="sublayers",n="layerView",L=Object.freeze({remove(){},pause(){},resume(){}});let l=class extends H(b){constructor(){super(...arguments),this._highlightIds=new Map,this.container=new v}async fetchPopupFeatures(i){return Array.from(this.graphicsViews(),t=>t.hitTest(i).filter(e=>!!e.popupTemplate)).flat()}*graphicsViews(){if(this._graphicsViewsFeatureCollectionMap!=null){yield*this._graphicsViewsFeatureCollectionMap.keys();return}if(this._graphicsViews!=null){yield*this._graphicsViews;return}yield*[]}async hitTest(i,t){return Array.from(this.graphicsViews(),s=>{const a=s.hitTest(i);if(this._graphicsViewsFeatureCollectionMap!=null){const o=this._graphicsViewsFeatureCollectionMap.get(s);for(const r of a)!r.popupTemplate&&o.popupTemplate&&(r.popupTemplate=o.popupTemplate),r.sourceLayer=r.layer=this.layer}return a}).flat().map(s=>({type:"graphic",graphic:s,layer:this.layer,mapPoint:i}))}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof u?t=[i.uid]:Array.isArray(i)&&i.length>0?typeof i[0]=="number"?t=i:t=i.map(s=>s&&s.uid):f.isCollection(i)&&(t=i.map(s=>s&&s.uid).toArray());const e=t==null?void 0:t.filter(w);return e!=null&&e.length?(this._addHighlight(e),{remove:()=>{this._removeHighlight(e)}}):L}update(i){for(const t of this.graphicsViews())t.processUpdate(i)}attach(){const i=this.view,t=()=>this.requestUpdate(),e=this.layer.featureCollections;if(e!=null&&e.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const s of e){const a=new c(this.view.featuresTilingScheme),o=new m({view:i,graphics:s.source,renderer:s.renderer,requestUpdateCallback:t,container:a});this._graphicsViewsFeatureCollectionMap.set(o,s),this.container.addChild(o.container),this.addHandles([h(()=>s.visible,r=>o.container.visible=r,p),h(()=>o.updating,()=>this.notifyChange("updating"),p)],n)}this._updateHighlight()}else this.layer.sublayers!=null&&this.addHandles(y(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),g)}detach(){this._destroyGraphicsViews(),this.removeHandles(g)}moveStart(){}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.removeHandles(n);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),this.layer.sublayers==null)return;const i=[],t=this.view,e=()=>this.requestUpdate();for(const s of this.layer.sublayers){const a=new C,o=new c(this.view.featuresTilingScheme);o.fadeTransitionEnabled=!0;const r=new m({view:t,graphics:s.graphics,requestUpdateCallback:e,container:o});this.addHandles([s.on("graphic-update",r.graphicUpdateHandler),h(()=>s.visible,d=>r.container.visible=d,p),h(()=>r.updating,()=>this.notifyChange("updating"),p)],n),a.addChild(r.container),this.container.addChild(a),i.push(r)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this.graphicsViews())t.setHighlight(i)}};l=V([_("esri.views.2d.layers.MapNotesLayerView2D")],l);const Ki=l;export{Ki as default};
